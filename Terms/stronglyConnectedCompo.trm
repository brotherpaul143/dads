# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Thu Aug 14 12:15:38 2008" *by "Paul E. Black"

# $Log: stronglyConnectedCompo.trm,v $
# Revision 1.11  2008/08/14 16:15:42  black
# Update HTML line break (br) tags to be XML/XHMTL compatible
#
# Revision 1.10  2006/09/11 14:05:24  black
# Remove incorrect formal definition.
#
# Revision 1.9  2004/12/17 18:56:01  black
# Make LI XHTML compliant.
#
# Revision 1.8  2004/12/17 17:28:48  black
# Make more XHTML compliant.
#
# Revision 1.7  2004/12/17 17:24:50  black
# Make more XHTML compliant.
#
# Revision 1.6  2004/09/03 16:35:34  black
# Add LINK to Nuutila and Soisalon-Soininen's paper with algorithms.
#
# Revision 1.5  2004/04/19 18:57:12  black
# Use the standard English plural of vertex
#
# Revision 1.4  2004/02/26 20:17:55  black
# Note that strongly connected components (SCC) partition the vertices.
# Adapt the formal definition of partition (which notes that SCC are
# not empty).  Drop the statement that SCC partition the edges.
#
# Revision 1.3  2004/02/26 19:56:25  black
# Refine XREFS into IMA, etc.  Add references to cycle and depth-first
# search.  Add Tarjan's original paper.  Add an informal definition.
#
# Revision 1.2  2003/10/14 18:58:57  black
# Use a more regular plural of vertex
#

# entry name
@NAME=strongly connected component
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=D
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=graph
# the definition
@DEFN=A {strongly connected#strongly connected graph} {subgraph}, $S$,
of a {directed graph}, $D$, such that no {vertex} of $D$ can be added to
$S$ and it still be strongly connected.  Informally, a maximal
subgraph in which every vertex is {reachable} from every other vertex.
@FORML=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={maximally connected component}, {strongly connected graph},
{connected graph}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME={depth-first search}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={cycle}

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
This has a linear time algorithm for finding strongly connected
components:<br />
<strong>Robert E. Tarjan</strong>, 
<em>Depth-first search and linear graph algorithms</em>,
SIAM Journal on Computing, 1(2):146-160, 1972.

# any notes.  these will not be printed in the final dictionary
@NOTES=If a graph is strongly connected, it has only one
strongly connected component.
</p>

<p>
The strongly connected components {partition} the vertices in the
graph.  That is, every vertex is in exactly one strongly connected
component.
</p>

<p>
After Robert Caswell (caswer01@cs.uwa.edu.au), 3 May 2002.
# further explanation (pure HTML)
@LINKS=
<a href="http://www.cs.hut.fi/~enu/tc.html">Transitive closure</a> has
a link to 
<strong>Esko Nuutila</strong> and <strong>Eljas Soisalon-Soininen</strong>, 
<a href="http://www.cs.hut.fi/~enu/ps/ipl-scc.ps"><em>On finding the
strongly connected components in a directed graph</em></a>
(PostScript&reg;),
Information Processing Letters 49 (1993) 9-14.
The paper has Tarjan's algorithm, references to other algorithms, and
two faster algorithms in Pascal-like pseudo-code.

# implementation(s) (pure HTML)
@IMPL=<a
href="http://www.cs.sunysb.edu/~algorith/files/dfs-bfs.shtml">(C++, C,
Pascal, Mathematica, and Fortran)</a>

# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/stronglyConnectedCompo.trm,v $
