# *created  "Mon Oct 19 14:50:33 1998" *by "Paul E. Black"
# *modified "Fri Dec 17 09:47:42 2004" *by "Paul E. Black"

# $Log: bucketsort.trm,v $
# Revision 1.2  2004/12/17 14:50:47  black
# NOTE the contrast between bucket, histogram, and counting sorts.
# Refine XREFS into IMA, etc.  Make more XHTML compliant.
#

# entry name
@NAME=bucket sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=sort
# the definition
@DEFN=A {distribution sort} where input elements are initially 
distributed to several {buckets} based on an interpolation
of the element's {key}.
Each bucket is sorted if necessary, and the buckets' contents
are concatenated.
# Also Known As.  Adds an entry which is a cross reference here
@AKA=bin sort

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT={histogram sort}, {counting sort}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={range sort}, {radix sort}, 
{hash heap}

# any notes.  these will not be printed in the final dictionary
@NOTES=A bucket sort uses fixed-size buckets.  A histogram sort
sets up buckets of exactly the right size in a first pass.  A
counting sort uses one bucket per key.
</p>

<p>
The space required is one
bucket for every few possible key value, but is {O(n log log n)#big-O
notation} taking into account a distribution of keys.  That is, some
buckets will have a lot of keys.
</p>

<p>
Bucket sorts work well for data sets where the possible key values are
known and relatively small and there are on average just a few
elements per bucket.  This means the cost of sorting the contents of
each bucket can be reduced toward zero.  The ideal result is if the
order in each bucket is uninteresting or trivial, for instance, when
each bucket holds a single key.  The buckets may be arranged so the
concatenation phase is not needed, for instance, the buckets are
contiguous parts of an array.
</p>

<p>
Bucket sorts can be {stable}.  
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# John Morris morris@ee.uwa.edu.au
<a
href="http://ciips.ee.uwa.edu.au/~morris/Year2/PLDS210/binsort.html">analysis,
explanation, and code (C)</a>, and
<a
href="http://www.dcc.uchile.cl/~rbaeza/handbook/algs/4/423.sort.c">(C)</a>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/bucketsort.trm,v $
