# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Wed Feb  1 12:57:16 2012" *by "Paul E. Black"

# $Log: linearCongruentGen.trm,v $
# Revision 1.6  2012/02/01 17:58:29  black
# Restore LINK to Entacher's web site - it is back
#
# Revision 1.5  2011/12/12 15:20:52  black
# remove LINK to Entacher's review - server is gone
#
# Revision 1.4  2010/06/22 17:33:40  black
# Update LINK to Entacher's comparison.
#
# Revision 1.3  2004/12/17 17:28:21  black
# Make more XHTML compliant.
#
# Revision 1.2  2004/06/16 17:09:29  black
# Refine XREFS into IMA, etc. and add RCS keywords.  Correct defn: A and
# M are relatively random (not A and B).  LINK to good review.
#

# entry name
@NAME=linear congruential generator
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=numeric
# the definition
@DEFN=A class of {algorithms} that are {pseudo-random number
generators}.  The next number is generated from the current one by 
$r<sub>n+1</sub> = (A \times r<sub>n</sub> + B) \bmod  M$, where A and M are
relatively prime numbers.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={pseudo-random number generator}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=

# any notes.  these will not be printed in the final dictionary
@NOTES=When implemented in software, A and B may be chosen so as to
have integer overflow on nearly every step, and therefore have a less predictable
sequence and avoid the $\bmod$ operation.  The low-order bits tend to
be less random 
than high-order bits.  This is improved by discarding some of the
low-order bits.  Therefore, the range of random numbers is less than
the range of the integer used in the computation. 
</p>

<p>
Better algorithms are available, but they are more complex.
# further explanation (pure HTML)
@LINKS=
Karl Entacher's thorough review and comparison of
<a href="http://random.mat.sbg.ac.at/results/karl/server/">many
linear congruential generators</a>.

# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=BB
# end $Source: /home/black/DADS/Terms/RCS/linearCongruentGen.trm,v $
