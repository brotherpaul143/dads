# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Mon Oct  4 14:15:16 2021" *by "Paul E. Black"

# $Log: knightstour.trm,v $
# Mon Oct  4 14:19:29 2021  Paul E. Black
# Use https to access okmij.org IMPL
# 
# Mon Jun 24 15:12:46 2019  Paul E. Black
# Remove LINK to Thomassons Knights Tour page - its gone.
# 
# Mon Jun 17 08:44:08 2019  Paul E. Black
# Update borderschess INFO URL
# 
# Revision 1.5  2005/06/06 12:59:57  black
# Remove LINK to Mark Keen's page - its gone.
#
# Revision 1.4  2005/04/11 13:32:12  black
# Link to Thomasson's page.
#
# Revision 1.3  2005/01/10 14:28:54  black
# Update Oleg Kiselyov's URL
#
# Revision 1.2  2004/12/17 16:52:46  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#

# entry name
@NAME=knight's tour
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=P
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=combin
# the definition
@DEFN=A series of moves of a chess knight that visits all squares on
the board exactly once.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={Hamiltonian cycle}

# any notes.  these will not be printed in the final dictionary
@NOTES=The associated problem is to find such a series of moves.  The
problem can be generalized to an $n \times m$ rectangular chess board.
Solutions may be found using {backtracking}.
# further explanation (pure HTML)
@LINKS=

# implementation(s) (pure HTML)
@IMPL=Oleg Kiselyov's <a
href="https://okmij.org/ftp/Prolog/Knight.prl">derivation (Prolog)</a>
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/knightstour.trm,v $
