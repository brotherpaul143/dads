# *created  "Mon Nov 29 15:25:29 2004" *by "Paul E. Black"
# *modified "Thu Mar 30 14:34:58 2006" *by "Paul E. Black"

# $Log: tournamentSort.trm,v $
# Revision 1.3  2006/03/30 19:36:57  black
# NOTE another proposed algorithm called tournament sort
#
# Revision 1.2  2006/03/30 19:26:12  black
# XREF heapsort and dominance tree sort.  NOTE that heapsort is
# sometimes called tournament sort.  Add links to possible web
# resources.
#
# Revision 1.1  2004/11/29 20:34:56  black
# Initial revision
#

# entry name
@NAME=tournament sort
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=sort
# the definition
@DEFN=
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names or {cross refs} that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as name or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={dominance tree sort}, {heapsort}

# bib refs, eg, to defining article (pure HTML).  printed within <P>..</P>
@BIB=
<strong>Kenneth E. Iverson</strong>, <em>A Programming Language</em>,
John Wiley and Sons, 1962, pages 223-226.
# PAGE NUMBERS NOT CHECKED

# any notes.  these are not printed in the final dictionary
@NOTES=
{Heapsort} is sometimes called tournament sort.  Consider the tree of
matches in a single-elimination sports tournament, where players'
abilities are a {total order}.  The tournament tree has the {heap
property}.  When a winner is found (the least element is chosen), the
winner is removed and the appropriate matches replayed.  For instance,
see
<a
href="http://www.cs.mcgill.ca/~cs251/OldCourses/1997/topic15/#Tournament%20Trees">Tournament
Trees</a> at McGill.
</p>

<p>
In
<a href="http://www.stepanovpapers.com/TournamentTrees.pdf">Using
Tournament Trees to Sort</a>, Center for Advanced
Technology in Telecommunications, Polytechnic University, Brooklyn,
New York, C.A.T.T Technical Report 86-13, Alexander Stepanov and
Aaron Kershenbaum extend the observation that a
tournament can find the winner in N comparisons and the 2nd in $\log
N$ more comparisons.
</p>

<p>
An algorithm written up in 2002 also called a
<a href="http://www.halfbakery.com/idea/Tournament_20Sort">tournament
sort</a>. 
# any historical notes
@HISTORY=

# implementation(s) (pure HTML)
@IMPL=
# further explanation (pure HTML)
@LINKS=
# author's initials (see authors.data)
@AUTHOR=
# end $Source: /home/black/Workspace/dads/Terms/RCS/tournamentSort.trm,v $
