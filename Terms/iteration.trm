# *created  "Fri Feb 26 16:56:28 1999" *by "Paul E. Black"
# *modified "Thu Oct 27 10:00:37 2005" *by "Paul E. Black"

# $Log: iteration.trm,v $
# Revision 1.4  2005/10/27 14:00:46  black
# Update John Morris' URL
#
# Revision 1.3  2005/01/11 20:41:02  black
# Remove leading redundant phrase in DEFN.
#
# Revision 1.2  2004/12/17 16:52:36  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#

# entry name
@NAME=iteration
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=T
# basic theory numeric search sort tree graph combin(atorial) para(llel) crypt
@AREA=basic
# the definition
@DEFN=Solve a problem by
repeatedly working on successive parts of the problem.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={recursion}

# any notes.  these will not be printed in the final dictionary
@NOTES=
# further explanation (pure HTML)
@LINKS=See 
# John Morris morris@ee.uwa.edu.au
<a
href="http://www.cs.auckland.ac.nz/software/AlgAnim/dynamic.html#fibonacci">dynamic
algorithms</a> for an example of one trade-off between speed and
clarity for a recursive vs. an iterative implementation.
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/iteration.trm,v $
