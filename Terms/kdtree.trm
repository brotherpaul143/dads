# *created  "Mon Nov 16 15:21:02 1998" *by "Paul E. Black"
# *modified "Tue Sep  2 08:42:38 2014" *by "Paul E. Black"

# $Log: kdtree.trm,v $
# Tue Sep  2 08:42:51 2014  Paul E. Black
# Change stonybrook.edu URL in IMPL
# 
# Mon Jul 28 16:26:49 2014  Paul E. Black
# update URL for Skienas Stony Brook Algorithm Respository IMPLs
# 
# Revision 1.7  2009/11/16 14:52:23  black
# Update domain name of Ricardo Baeza-Yates' Handbook of Algorithms and Data Structures
#
# Revision 1.6  2009/09/30 17:20:47  black
# Update domain name of Raul Baeza's Handbook of Algorithms and Data Structures
#
# Revision 1.5  2009/05/26 21:02:24  black
# Remove jegrant link - page is gone, and I can't find a new version.
#
# Revision 1.4  2005/01/10 17:09:57  black
# Update jegrant (notes) URL.
#
# Revision 1.3  2004/12/17 17:24:08  black
# Make more XHTML compliant.
#
# Revision 1.2  2004/10/06 15:02:32  black
# Refine XREFS into IMA, etc.  Add RCS keywords.
#

# entry name
@NAME=k-d tree
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=search
# the definition
@DEFN=A multidimensional {search tree} for points in $k$ dimensional
space.  Levels of the tree are split along successive dimensions at
the points.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={binary search tree}, {adaptive k-d tree}, {point access method}

# any notes.  these will not be printed in the final dictionary
@NOTES=After <a href="../terms.html#GG98">[GG98]</a>.  
Robert Keith Oswald (rko9h@virginia.edu) explains,
In a traditional binary search tree, records are 
defined by only one key. In a k-d tree, records are defined 
by k keys. Like a traditional binary search trees, records 
are inserted and returned using $&lt;$ and $\geq$. 
However, the key that determines the subtree to use 
(i.e. left or right) varies with the level in the tree. 
At level $L$, key number $L \bmod k + 1$ is used, where the 
root is at level 0. Therefore, the first key is used 
at the root, the second key at level 1, and so on until all keys have
been used.  The keys are used again beginning at level $k$.
# further explanation (pure HTML)
@LINKS=

# implementation(s) (pure HTML)
@IMPL=<a href="http://www3.cs.stonybrook.edu/~algorith/files/kd-trees.shtml">C,
Pascal, or FORTRAN</a>, <a
href="http://www.dcc.uchile.cl/~rbaeza/handbook/algs/3/352.ins.c">insert
(C)</a>, <a
href="http://www.dcc.uchile.cl/~rbaeza/handbook/algs/3/352.range.c">range
search (C)</a>, and <a
href="http://www.dcc.uchile.cl/~rbaeza/handbook/algs/3/352.srch.c">search
(C)</a>.
<a href="http://www3.cs.stonybrook.edu/~algorith/files/kd-trees.shtml">(C,
Pascal, and Fortran)</a>
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/kdtree.trm,v $
