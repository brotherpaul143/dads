# *created  "Fri Feb 26 16:47:11 1999" *by "Paul E. Black"
# *modified "Mon Dec  7 13:44:54 2020" *by "Paul E. Black"

# $Log: nondetermAlgo.trm,v $
# Mon Dec  7 13:50:20 2020  Paul E. Black
# Remove "Random" from the example function name for clarity.
# 
# Jim S. Hefferon <jhefferon@smcvt.edu> points out that "Random" in the
# name may lead some to think that nondeterminism is done by, say coin
# flipping.  That is, that it is the same as random choice.
# 
# Revision 1.4  2008/08/14 16:14:56  black
# Update HTML line break (br) tags to be XML/XHMTL compatible
#
# Revision 1.3  2004/12/17 17:28:28  black
# Make more XHTML compliant.
#
# Revision 1.2  2004/07/16 19:09:25  black
# Define and explain in notes.  Add more cross references.  Change file
# name to something a little longer and more readable.  Refine XREFS to
# IMA, etc.

# entry name
@NAME=nondeterministic algorithm
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=T
# basic theory numeric search sort tree graph combin(atorial) para(llel) crypt
@AREA=basic
# the definition
@DEFN=A conceptual {algorithm} with more than one allowed step at
certain times and which always takes the right or best step.  
It is not random, as in {randomized algorithm}, or indeterminate.
Rather it has the supercomputational characteristic of choosing the
optimal behavior.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={deterministic algorithm}, {probabilistic algorithm},
{randomized algorithm}, {heuristic}

# any notes.  these will not be printed in the final dictionary
@NOTES=
Conceptually a nondeterministic algorithm could run on a deterministic
computer with an unlimited number of parallel processors.  Each time
more than one step is possible, new processes are instantly forked to
try all of them.  When one successfully finishes, that result is
returned.  Thus the computation is as fast as if it always chooses the
right step.
</p>

<p>
This notion is defined for theoretic analysis and specifying.
Nondeterministic algorithms compute the same class of functions as
{deterministic algorithms}, but the {complexity} may be much less.
Every nondeterministic algorithm can be turned into a deterministic
algorithm, possibly with {exponential} slow down.
</p>

<p>
Consider searching an unordered {array}.  A {linear search} has
{$\Theta(n)$#\Theta} expected time.  A nondeterministic search has
constant expected time.
<pre>
int search(key k, array a)		<br />
\{					<br />
    return oracle(0, sizeof(a));	<br />
}
</pre>
where oracle() returns (the right) number between 0 and the size
of the array in constant time.

# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/nondetermAlgo.trm,v $
