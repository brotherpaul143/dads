# *created  "Thu May  6 08:55:42 1999" *by "Paul E. Black"
# *modified "Wed Feb 24 11:20:34 2016" *by "Paul E. Black"

# $Log: primitiveRecursive.trm,v $
# Wed Feb 24 11:25:58 2016  Paul E. Black
# Improve grammar and spelling.
# 
# Wed Feb 24 10:47:03 2016  Paul E. Black
# Improve grammar.
# 
# Revision 1.2  2004/12/17 16:53:45  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#

# entry name
@NAME=primitive recursive
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=D
# basic theory numeric search sort tree graph combin para (see areas.data)
@AREA=theory
# the definition
@DEFN=A {total function} that can be written using only nested
conditional (if-then-else) statements and fixed iteration (for)
loops.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={computable}

# any notes.  these will not be printed in the final dictionary
@NOTES={Ackermann's function} is {computable}, but is not
primitive recursive.  Primitive recursive functions always
terminate.  More powerful languages have some functions that cannot
be proved to either terminate or run forever.
</p>

<p>
After Algorithms and Theory of Computation Handbook, footnote, page
26-13, 
Copyright &copy; 1999 by CRC Press LLC.
Appearing in the Dictionary of Computer Science, Engineering and
Technology, Copyright &copy; 2000 CRC Press LLC.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/DADS/dads/Terms/RCS/primitiveRecursive.trm,v $
