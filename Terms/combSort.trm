# *created  "Thu Jan  6 12:27:59 2005" *by "Paul E. Black"
# *modified "Mon Dec 17 10:50:35 2007" *by "Paul E. Black"

# $Log: combSort.trm,v $
# Revision 1.5  2007/12/17 15:52:54  black
# Remove yagni.com IMPLs - the site has been empty since May.
#
# Revision 1.4  2006/07/03 13:10:39  black
# Remove jdveale IMPL - no longer on line.  Improve wording in DEFN,
# NOTE, and another IMPL.
#
# Revision 1.3  2005/01/07 14:36:07  black
# Make comb sort a variant of diminishing increment sort.  Remove words
# in def'n left over from editing.  Explicitly link to Ring's IMPL.
#
# Revision 1.2  2005/01/06 19:25:36  black
# Improve the text for veale's page.
#
# Revision 1.1  2005/01/06 19:20:40  black
# Initial revision
#

# entry name
@NAME=comb sort
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=sort
# the definition
@DEFN=An {in-place sort} algorithm that repeatedly reorders different
pairs of items.  On each pass swap pairs of items separated by the
increment or gap, if needed, and reduce the gap (divide it by about
1.3).  The gap starts at about 3/4 of the number of items.  Continue
until the gap is 1 and a pass had no swaps.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as name or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={diminishing increment sort}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={bubble sort}, {Shell sort}

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
<strong>Richard Box</strong> and <strong>Stephen Lacey</strong>, 
<em>A fast, easy sort</em>, Byte, 16(4):315-ff, April 1991.

# any notes.  these are not printed in the final dictionary
@NOTES=Bubble sort can be seen as a variant of comb sort where the gap
is always 1.  Since items may move large distances at first, comb sort
is quite efficient.
</p>

<p>
Comb sort does a single "bubbling" pass (ala {bubble sort}) over 
each set for each gap or increment, whereas {Shell sort} completely
sorts each set.
# any historical notes
@HISTORY=

# implementation(s) (pure HTML)
@IMPL=
<a
href="http://www.cs.ubc.ca/spider/harrison/Java/CombSort11Algorithm.java">(Java)</a>.

# further explanation (pure HTML)
@LINKS=
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/combSort.trm,v $
