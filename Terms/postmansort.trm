# *created  "Tue Dec  1 13:01:38 1998" *by "Paul E. Black"
# *modified "Tue Mar 28 14:47:30 2006" *by "Paul E. Black"

# $Log: postmansort.trm,v $
# Revision 1.4  2006/03/28 19:49:07  black
# IMA (highly engineered) top-down radix sort
#
# Revision 1.3  2005/12/14 19:02:07  black
# XREF multikey Quicksort, which is like this
#
# Revision 1.2  2004/12/17 16:53:43  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#

# entry name
@NAME=postman's sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=sort
# the definition
@DEFN=A highly engineered variant of {top-down radix sort} where
attributes of the {key} are described so the algorithm can allocate
buckets and distribute efficiently.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=postman sort

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={top-down radix sort}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={multikey Quicksort}

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
<strong>Robert Ramey</strong>, <em>The Postman's Sort</em>,
C Users Journal, August 1992.
# any notes.  these will not be printed in the final dictionary
@NOTES=This is the algorithm used by letter-sorting machines in the
post office: first states, then post offices, then routes, etc.  Since
keys are not compared against each other, sorting
time is {O(cn)#big-O notation}, where <em>c</em> depends on the
size of the key and number of buckets.  You probably used a form 
of this if
you sorted lots of papers alphabetically: you put each paper in its
pile (or bucket), A's, B's, C's, D's, etc., then sort each pile.  
</p>

<p>
This is similar to {radix sort}, but works "top down" or "most
significant digit first" while radix sort works "bottom up" or "least
significant digit first".  Also this does not merge distributed items
while radix sort does.
</p>

<p>
After Robert Ramey (ramey@rrsd.com)
# further information (pure HTML)
@LINKS=Robert Ramey's 
<a href="http://www.rrsd.com/psort/cuj/cuj.htm">August 1992
article</a>.
# implementation (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/postmansort.trm,v $
