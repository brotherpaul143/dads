# *created  "Wed Sep 16 08:55:08 1998" *by "Paul E. Black"
# *modified "Mon Aug 21 09:33:40 2006" *by "Paul E. Black"

# $Log: stack.trm,v $
# Revision 1.13  2006/09/11 14:04:38  black
# Update tutorial IMPL URL
#
# Revision 1.12  2006/05/31 12:51:54  black
# Improve attribution: change Goletas' to Maksim Goleta's
#
# Revision 1.11  2006/05/31 12:42:57  black
# Add Goletas' C# IMPL
#
# Revision 1.10  2005/12/30 20:16:06  black
# Fix typo in BIB entry.
#
# Revision 1.9  2005/12/14 13:58:52  black
# Change pp to pages
#
# Revision 1.8  2005/10/27 14:02:25  black
# Update John Morris' URL
#
# Revision 1.7  2005/01/04 14:58:26  black
# Remove Campbell IMPL-gone.
#
# Revision 1.6  2004/12/17 17:24:47  black
# Make more XHTML compliant.
#
# Revision 1.5  2004/11/26 18:20:20  black
# Add "push-down" store as another web variant.
#
# Revision 1.4  2004/08/25 13:07:59  black
# Refine XREFS into IMA, etc. and move refs to appropriate places.  Add
# RCS keywords.
#
# Revision 1.3  2004/04/06 18:48:55  black
# Add link to axiomatic semantics in the formal definition.
#
# Revision 1.2  2003/09/04 21:25:33  black
# Remove a site no longer found anywhere that I could find
#

# entry name
@NAME=stack
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, search, sort, graph, combin(atorial), etc.
@AREA=basic
# the definition
@DEFN=A collection of items in which only the most recently added item may be
removed.  The latest added item is at the top.  Basic operations are
push and pop.  Often top and isEmpty are available, too.
Also known as "last-in, first-out" or LIFO.
# formal definition or {cross reference} to an entry
@FORML=The operations new(), push(v, S), top(S), and popoff(S) may be
defined with {axiomatic semantics} as follows.
<ol>
<li>new() returns a stack
<li>popoff(push(v, S)) = S
<li>top(push(v, S)) = v
</ol>
where S is a stack and v is a value.  The pop operation is a
combination of top, to return the top value, and popoff, to remove the
top value.
</p>

<p>
The {predicate} isEmpty(S) may be defined with the following additional axioms.
<ol start="4">
<li>isEmpty(new()) = true
<li>isEmpty(push(v, S)) = false
</ol>
# comma-sep list of pure names that this is Also Known As.
@AKA=LIFO
# other cross-listings solely for the web, such as word or spelling variants
@WEB=pushdown, PD, push-down store

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={abstract data type}
# Specialization: "... is a kind of me."
@VARIANT={bounded stack}, {cactus stack}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={queue}

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=Origin is attributed to <strong>A. W. Burks, D. W. Warren</strong>, and
<strong>J. B. Wright</strong>, <em>An analysis of a logical machine using
parenthesis-free notation</em>, Mathematical Tables and Other Aids to
Computation, 8(46):53-57, April 1954, and
<strong>A. Newell</strong> and <strong>J. C. Shaw</strong>,
<em>Programming the logic theory machine</em>, Proceedings of the
1957 Western Joint Computer Conference, pages 230-240, Institute of Radio
Engineers, New York, February 1957.
# any notes.  these will not be printed in the final dictionary
@NOTES=Other operations may
include index(i, S), return the ith item in the stack, isFull(S), and
rotate(i, S), move i items from top to bottom or vice versa.
# further explanation (pure HTML)
@LINKS=
# John Morris morris@ee.uwa.edu.au
<a
href="http://www.cs.auckland.ac.nz/software/AlgAnim/stacks.html">examples
and code</a>.
Demonstration with <a
href="http://www.cosc.canterbury.ac.nz/people/mukundan/dsal/StackAppl.html">dynamic
array</a> and
<a
href="http://www.cosc.canterbury.ac.nz/people/mukundan/dsal/LinkStackAppl.html">linked
list</a> implementations.
# implementation(s) (pure HTML)
@IMPL=
Maksim Goleta's
<a href="http://goletas.com/solutions/collections/">Collections
(C#)</a> implementing singly- and doubly-linked lists, binary search
trees, and AVL trees.
Bro. David Carlson's
<a
href="http://cis.stvincent.edu/html/tutorials/swd/stacks/stacks.html">tutorial
and code (C++)</a>.
<a
href="http://www.math.grin.edu/~stone/events/scheme-workshop/stacks.html">(Scheme)</a>
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/stack.trm,v $
