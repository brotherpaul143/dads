# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Mon Aug 12 09:06:29 2019" *by "Paul E. Black"

# $Log: eulercycle.trm,v $
# Mon Aug 12 09:08:05 2019  Paul E. Black
# Update Skiena algorist IMPL URL - change page name
# 
# Tue Sep  2 08:38:58 2014  Paul E. Black
# Change stonybrook.edu URL in IMPL
# 
# Mon Jul 28 16:20:05 2014  Paul E. Black
# update URL for Skienas Stony Brook Algorithm Respository IMPLs
# 
# Revision 1.5  2005/10/27 14:00:21  black
# Update John Morris' URL
#
# Revision 1.4  2004/12/17 17:28:04  black
# Make more XHTML compliant.
#
# Revision 1.3  2004/02/27 16:50:42  black
# Refer to Christofides algorithm.
#
# Revision 1.2  2003/12/18 20:12:17  black
# Separate XREFS into new, more precise fields.  Standard clean up.
#

# entry name
@NAME=Euler cycle
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=D
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=graph
# the definition
@DEFN=A {path} through a {graph} which starts and ends at the
same {vertex} and includes every {edge} exactly once.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=Eulerian path, K&ouml;nigsberg bridges problem
# other cross-listings solely for the web, such as word or spelling variants
@WEB=Euler tour, Koenigsberg bridges problem

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN={Christofides algorithm}
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={Hamiltonian cycle}, {Chinese postman problem}
# any notes.  these will not be printed in the final dictionary

@NOTES="Euler" is pronounced "oil-er".  A Hamiltonian cycle includes
each vertex once; an Euler cycle includes each edge once.
# any historical notes
@HISTORY=
Euler defined the cycle to solve the puzzle of finding a path across
every bridge of the German city of K&ouml;nigsberg exactly once.

# further explanation (pure HTML)
@LINKS=
# John Morris morris@ee.uwa.edu.au
<a
href="http://www.cs.auckland.ac.nz/software/AlgAnim/hard.html#euler">examples
and explanations</a>
# implementation(s) (pure HTML)
<a href="http://algorist.com/problems/Eulerian_Cycle_Chinese_Postman.html">(Java,
C++, and Mathematica)</a>
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/eulercycle.trm,v $
