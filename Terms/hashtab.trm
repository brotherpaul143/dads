# *created  "Wed Sep 16 08:51:36 1998" *by "Paul E. Black"
# *modified "Wed Sep 30 13:20:42 2009" *by "Paul E. Black"

# $Log: hashtab.trm,v $
# Revision 1.14  2009/09/30 17:20:43  black
# Update domain name of Raul Baeza's Handbook of Algorithms and Data Structures
#
# Revision 1.13  2008/11/17 17:50:28  black
# Remove kazlib and SparkNotes IMPLs - they've been gone for at least 3
# months.
#
# Revision 1.12  2007/12/03 22:18:59  black
# add a new variant: hashbelt
#
# Revision 1.11  2007/10/22 14:57:58  black
# Add Mark Nelson's tutorial and IMPL.
#
# Revision 1.10  2006/09/11 14:03:24  black
# Update tutorial IMPL URL
#
# Revision 1.9  2006/06/27 13:55:19  black
# XREF huge sparse array
#
# Revision 1.8  2005/10/27 14:00:33  black
# Update John Morris' URL
#
# Revision 1.7  2005/01/28 22:45:18  black
# Change DEFN to include hashing 2 or more functions.  Add 2-left and
# 2-choice hashing.  Add IMIN dictionary.
#
# Revision 1.6  2004/12/17 17:23:56  black
# Make more XHTML compliant.
#
# Revision 1.5  2004/12/02 14:26:38  black
# Specify what kind of chaining IMPLs are.
#
# Revision 1.4  2004/12/01 21:40:38  black
# Redo defn to use "collision resolution scheme", leave details for
# other entries, and mention perfect hashing.  Note that the table may
# be an array of buckets.  Add some history from Knuth.
#
# Revision 1.3  2004/09/28 17:38:59  black
# Define collision more precisely.  More XREFS into VARIANT, etc.  Be
# more precise about time complexity (Theta(1) if table is big enough).
#
# Revision 1.2  2004/05/14 16:44:39  black
# Refine XREFS into IMA, etc.  Refer to SparkNotes.
#

# entry name
@NAME=hash table
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, search, sort, graph, combin(atorial), etc.
@AREA=search
# the definition
@DEFN=A {dictionary} in which {keys} are mapped to 
{array} positions by {hash functions}.  Having the {keys} of more
than one item map to the same position is called a {collision}.
There are many {collision resolution schemes}, but they may be divided
into {open addressing}, {chaining}, and keeping one special overflow area.
{Perfect hashing} avoids collisions, but may be time-consuming to create.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=scatter storage
# scatter storage from Knuth98 3:514
# other cross-listings solely for the web, such as name or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT={perfect hashing}, {dynamic hashing}, {2-left hashing},
{cuckoo hashing}, {2-choice hashing}, {hashbelt}
# Aggregate parent: "I am a part of or used in ..."
@IMIN={dictionary}
# Aggregate child: "... is a part of or used in me."
@INME=
{load factor}, {hash table delete},
collision resolution: {coalesced chaining},
{linear probing}, {double hashing}, {quadratic probing}, {uniform
hashing}, {simple uniform hashing},
{separate chaining}, {direct chaining}, 
{clustering}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={Bloom filter}, {huge sparse array}

# any notes.  these will not be printed in the final dictionary
@NOTES=Complexity depends on the hash function and collision
resolution scheme, but may be constant
({$\Theta(1)$#$\Theta$}) if the table is big enough or grows.  
Some open addressing schemes suffer from
{clustering} more than others.
</p>

<p>
The table may be an array of {buckets}, to handle some numbers of
collisions easily, but some provision must still be made for bucket
overflow.

# any historical notes
@HISTORY="The idea of hashing appears to have been originated by
H. P. Luhn, who wrote an internal IBM memorandum in January 1953" 
<a href="../terms.html#Knuth98">[Knuth98, 3:547, Sect. 6.4]</a>.  He
continues with more than a page of history.

# further explanation (pure HTML)
@LINKS=
# John Morris morris@ee.uwa.edu.au
<a
href="http://www.cs.auckland.ac.nz/software/AlgAnim/hash_tables.html">explanation
and example of hashing and various collision resolution
techniques</a>.
# implementation(s) (pure HTML)
@IMPL=
direct chaining: <a href="http://burtleburtle.net/bob/hash/hashtab.html">(C)</a>.
Bro. David Carlson's
<a
href="http://cis.stvincent.edu/html/tutorials/swd/hash/hash.html">tutorial
and code (C++)</a>.
# These two implementations are okay - PEB 6 Apr 99
linear probing hashing: <a
href="http://www.dcc.chileedu.com/~rbaeza/handbook/algs/3/334.ins.c">insert
(C)</a>, <a
href="http://www.dcc.chileedu.com/~rbaeza/handbook/algs/3/334.srch.c">look
up (C)</a>.
Direct chaining: <a href="http://epaperpress.com/vbhash/">explanations,
diagrams, and code (Visual Basic)</a>.
Mark Nelson's tutorial to using
<a href="http://marknelson.us/2007/08/01/memoization/">C++ Hash Table
Memoization: [for] Simplifying Dynamic Programming (C++)</a>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/hashtab.trm,v $
