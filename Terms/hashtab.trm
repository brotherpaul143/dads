# *created  "Wed Sep 16 08:51:36 1998" *by "Paul E. Black"
# *modified "Thu Dec  2 08:59:31 2004" *by "Paul E. Black"

# $Log: hashtab.trm,v $
# Revision 1.5  2004/12/02 14:26:38  black
# Specify what kind of chaining IMPLs are.
#
# Revision 1.4  2004/12/01 21:40:38  black
# Redo defn to use "collision resolution scheme", leave details for
# other entries, and mention perfect hashing.  Note that the table may
# be an array of buckets.  Add some history from Knuth.
#
# Revision 1.3  2004/09/28 17:38:59  black
# Define collision more precisely.  More XREFS into VARIANT, etc.  Be
# more precise about time complexity (Theta(1) if table is big enough).
#
# Revision 1.2  2004/05/14 16:44:39  black
# Refine XREFS into IMA, etc.  Refer to SparkNotes.
#

# entry name
@NAME=hash table
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, search, sort, graph, combin(atorial), etc.
@AREA=search
# the definition
@DEFN=A {dictionary} in which {keys} are mapped to 
{array} positions by a {hash function}.  Having the {keys} of more
than one item map to the same position is called a {collision}.
There are many {collision resolution schemes}, but they may be divided
into {open addressing}, {chaining}, and keeping one special overflow area.
{Perfect hashing} avoids collisions, but may be time-consuming to create.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names or {cross refs} that this is Also Known As.
@AKA=scatter storage
# scatter storage from Knuth98 3:514
# other cross-listings solely for the web, such as name or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT={perfect hashing}, {dynamic hashing}, {cuckoo hashing}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
{load factor}, {hash table delete},
collision resolution: {coalesced chaining},
{linear probing}, {double hashing}, {quadratic probing}, {uniform
hashing}, {simple uniform hashing},
{separate chaining}, {direct chaining}, 
{clustering}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={Bloom filter}

# any notes.  these will not be printed in the final dictionary
@NOTES=Complexity depends on the hash function and collision
resolution scheme, but may be constant
({$\Theta(1)$#$\Theta$}) if the table is big enough or grows.  
Some open addressing schemes suffer from
{clustering} more than others.
</P>

<P>
The table may be an array of {buckets}, to handle some numbers of
collisions easily, but some provision must still be made for bucket
overflow.

# any historical notes
@HISTORY="The idea of hashing appears to have been originated by
H. P. Luhn, who wrote an internal IBM memorandum in January 1953" 
<A href="../terms.html#Knuth98">[Knuth98, 3:547, Sect. 6.4]</A>.  He
continues with more than a page of history.

# further explanation (pure HTML)
@LINKS=
# John Morris morris@ee.uwa.edu.au
<A
href="http://ciips.ee.uwa.edu.au/~morris/Year2/PLDS210/hash_tables.html">explanation
and example of hashing and various collision resolution
techniques</A>.
# implementation(s) (pure HTML)
@IMPL=
direct chaining: <A href="http://burtleburtle.net/bob/hash/hashtab.html">(C)</A>.
# These two implementations are okay - PEB 6 Apr 99
linear probing hashing: <A
href="http://www.dcc.uchile.cl/~rbaeza/handbook/algs/3/334.ins.c">insert
(C)</A>, <A
href="http://www.dcc.uchile.cl/~rbaeza/handbook/algs/3/334.srch.c">look
up (C)</A>, <A
href="http://users.footprints.net/~kaz/kazlib.html">Kazlib (C)</A>,
direct chaining: <A href="http://epaperpress.com/vbhash/">explanations,
diagrams, and code (Visual Basic)</A>.
Explanation and sample problems for <A
href="http://www.sparknotes.com/cs/searching/hashtables/section1.html">hashing
(C)</A> (some pages require free registration).
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/hashtab.trm,v $
