# *created  "Wed Sep 16 08:53:23 1998" *by "Paul E. Black"
# *modified "Mon Mar 15 13:39:11 2004" *by "Paul E. Black"

# $Log: insertionSort.trm,v $
# Revision 1.4  2004/03/15 18:39:32  black
# Add reference to new algo, gnome sort.
#
# Revision 1.3  2004/03/08 15:28:44  black
# Refine XREFS into IMA, etc.  Note that binary insertion sort is a
# variant of this.  Clarify note.
#
# Revision 1.2  2003/09/04 21:25:33  black
# Remove a site no longer found anywhere that I could find
#

# entry name
@NAME=insertion sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, search, sort, graph, combin(atorial), etc.
@AREA=sort
# the definition
@DEFN=Sort by repeatedly taking the next
item and inserting it into the final data structure in its proper
order with respect to items already inserted.  Run time is
{O(n<sup>2</sup>)#big-O notation} because of moves.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names or {cross refs} that this is Also Known As.
@AKA=linear insertion sort
# other cross-listings solely for the web, such as word or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={sort}
# Specialization: "... is a kind of me."
@VARIANT={binary insertion sort}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={gnome sort}

# any notes.  these will not be printed in the final dictionary
@NOTES=Sorting can be done {in place#in-place sort} by moving
the next item into place by
repeatedly swapping it with the preceding item until it is in place -
a {linear search} and move combined.
</P>

<P>
If comparing items is very expensive, use {binary search} to reduce
the number of comparisons needed to find where the item should be
inserted, then open a space by moving all later items down one.
However a binary search is likely to make this not a {stable} sort.
# further explanation (pure HTML)
@LINKS=<A href="http://cs.smith.edu/~thiebaut/java/sort/demo.html">demonstration</A>
of several sort algorithms, with particular emphasis on insertion
sort; more <A
href="http://www.cs.ubc.ca/spider/harrison/Java/sorting-demo.html">demonstrations</A>;
a
<A href="http://www.cosc.canterbury.ac.nz/people/mukundan/dsal/ISort.html">demonstration</A>
of insertion sort.
# implementation(s) (pure HTML)
@IMPL=<A href="http://www.cs.ubc.ca/spider/harrison/Java/InsertionSortAlgorithm.java">(Java)</A>.
Other implementations may be available through the <A
href="http://www.cs.sunysb.edu/~algorith/files/sorting.shtml">Stony
Brook Algorithm Repository, Sorting</A>;
<A href="http://www.math.grin.edu/~stone/events/scheme-workshop/insertion.html">(Scheme)</A>;
<A href="http://gams.nist.gov/serve.cgi/Module/TOMS/505/8547">(Fortran)</A>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/insertionSort.trm,v $
