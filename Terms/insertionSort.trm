# *created  "Wed Sep 16 08:53:23 1998" *by "Paul E. Black"
# *modified "Tue Feb 12 09:58:57 2019" *by "Paul E. Black"

# $Log: insertionSort.trm,v $
# Tue Feb 12 09:59:11 2019  Paul E. Black
# Update Flower Bracket IMPL URL
# 
# Fri Apr  6 11:17:17 2018  Paul E. Black
# Add Flower Brackets IMPL
# 
# Tue Nov  8 14:04:55 2016  Paul E. Black
# LINK to sort illustrated through dance.
# 
# Fri Mar 25 08:52:20 2016  Paul E. Black
# IMIN q sort
# 
# Mon Mar  2 15:59:00 2015  Paul E. Black
# Remove Stone (Grinnell) IMPL - Stones account is entirely gone.
# 
# Tue Sep  2 08:42:20 2014  Paul E. Black
# Change stonybrook.edu URL in IMPL
# 
# Mon Jul 28 16:21:47 2014  Paul E. Black
# update URL for Skienas Stony Brook Algorithm Respository IMPLs
# 
# Revision 1.15  2013/08/22 19:41:58  black
# update URL for Alex Lopez-Ortiz at U waterloo
#
# Revision 1.14  2011/12/12 15:16:05  black
# update Princeton IMPL URL
#
# Revision 1.13  2011/01/24 18:14:46  black
# Update Sedgewick and Wayne Princeton URL
#
# Revision 1.12  2009/08/24 14:03:05  black
# Update Harrison's sorting demo URL root
#
# Revision 1.11  2009/08/03 14:00:34  black
# update URL for IMPL at Simple Programming Tutorials, now Algorithms
# and Data Structures.
#
# Revision 1.10  2009/01/22 15:50:47  black
# Add Simple programming tutorials' IMPL.
#
# Revision 1.9  2007/04/23 13:20:33  black
# Update URL for Mukundan's Java demos and code
#
# Revision 1.8  2005/12/19 16:07:50  black
# Update Princeton URL
#
# Revision 1.7  2005/03/22 16:16:00  black
# Add Sedgewick & Wayne IMPL.
#
# Revision 1.6  2004/12/17 17:24:03  black
# Make more XHTML compliant.
#
# Revision 1.5  2004/12/01 14:00:38  black
# Add WEB and NOTE of implementation called shuttle sort.
#
# Revision 1.4  2004/03/15 18:39:32  black
# Add reference to new algo, gnome sort.
#
# Revision 1.3  2004/03/08 15:28:44  black
# Refine XREFS into IMA, etc.  Note that binary insertion sort is a
# variant of this.  Clarify note.
#
# Revision 1.2  2003/09/04 21:25:33  black
# Remove a site no longer found anywhere that I could find
#

# entry name
@NAME=insertion sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, search, sort, graph, combin(atorial), etc.
@AREA=sort
# the definition
@DEFN=Sort by repeatedly taking the next
item and inserting it into the final data structure in its proper
order with respect to items already inserted.  Run time is
{O(n<sup>2</sup>)#big-O notation} because of moves.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=linear insertion sort
# other cross-listings solely for the web, such as word or spelling variants
@WEB=shuttle sort

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={sort}
# Specialization: "... is a kind of me."
@VARIANT={binary insertion sort}
# Aggregate parent: "I am a part of or used in ..."
@IMIN={q sort}
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={gnome sort}

# any notes.  these will not be printed in the final dictionary
@NOTES=Sorting can be done {in place#in-place sort} by moving
the next item into place by
repeatedly swapping it with the preceding item until it is in place -
a {linear search} and move combined.  
This implementation is given in
<strong>C. J. Shaw and T. N. Trimble</strong>, <em>Algorithm 175
Shuttle Sort</em>, CACM, 6(6):312-313, June 1963.
</p>

<p>
If comparing items is very expensive, use {binary search} to reduce
the number of comparisons needed to find where the item should be
inserted, then open a space by moving all later items down one.
However a binary search is likely to make this not a {stable} sort.
# further explanation (pure HTML)

# implementation(s) (pure HTML)
@IMPL=<a href="http://people.cs.ubc.ca/~harrison/Java/InsertionSortAlgorithm.java">(Java)</a>.
An 
<a href="http://introcs.cs.princeton.edu/java/42sort/">implementation
(Java)</a> due to Sedgewick and Wayne (search for Insertion sort).
Algorithms and Data Structures'
<a
href="http://www.algolist.net/Algorithms/Sorting/Insertion_sort">explanation
and code (Java and C++)</a>.
Other implementations may be available through the <a
href="http://www3.cs.stonybrook.edu/~algorith/files/sorting.shtml">Stony
Brook Algorithm Repository, Sorting</a>.
<a href="http://gams.nist.gov/serve.cgi/Module/TOMS/505/8547">(Fortran)</a>.
Flower Brackets using
<a href="https://www.flowerbrackets.com/insertion-sort-java/">scanners,
objects, and recursion (Java)</a>. 


@LINKS=
<a href="http://cs.smith.edu/~thiebaut/java/sort/demo.html">demonstration</a>
of several sort algorithms, with particular emphasis on insertion
sort; more <a
href="http://people.cs.ubc.ca/~harrison/Java/sorting-demo.html">demonstrations</a>;
a
<a href="http://www.cosc.canterbury.ac.nz/mukundan/dsal/ISort.html">animation (Java)</a>
of insertion sort.

<br />

<br />
Insertion sort illustrated through a
<a href="https://www.youtube.com/watch?v=ROalU379l3U">Romanian folk
dance</a>. Created at Sapientia University.
<br />
<iframe src="https://www.youtube.com/embed/ROalU379l3U" frameborder="0" allowfullscreen></iframe>

# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/insertionSort.trm,v $
