# *created  "Fri Sep 18 12:00:00 1998" *by "Paul E. Black"
# *modified "Fri Dec 17 12:48:52 2004" *by "Paul E. Black"

# $Log: tree.trm,v $
# Revision 1.5  2004/12/17 17:49:22  black
# Make IMG more XHTML compliant.  Move VARIANTS from XREFS.
#
# Revision 1.2  2004/12/17 16:55:16  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#

# entry name
@NAME=tree
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, numeric, search, sort, graph, combin(atorial)
@AREA=tree
# the definition
@DEFN=(1) A data structure accessed beginning at the {root} node.  Each
{node} is either a {leaf} or an {internal node}.  An internal node
has one or more {child} nodes and is called
the {parent} of its child nodes.  All children of the same node are
{siblings}.
Contrary to a physical tree, the root is usually depicted at the top
of the structure, and the leaves are depicted at the bottom.
(2) A {connected#connected graph},
{undirected#undirected graph}, {acyclic graph}.  It is
{rooted#rooted tree} and {ordered#ordered tree} unless otherwise specified.
<br>
<img src="../Images/tree.gif" height="225" width="201">
# formal definition or {cross reference} to an entry
@FORML=(1) A tree is either
<ul>
<li>empty (no nodes), or
<li>a root and zero or more subtrees.
</ul>
The subtrees are ordered.
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT={heap}, {B-tree}, {binary tree}, {balanced tree},
{multiway tree}, {complete tree}, {search tree}, {digital tree}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=
other vocabulary: 
{descendant}, {ancestor},
{tree traversal},
{height}, {depth} (1),
technical terms: {ordered tree}, {rooted tree}, {free tree},
{arborescence}

# any notes.  these will not be printed in the final dictionary
@NOTES=
# Algorithms and Theory of Computation Handbook, pages 13-13 and 13-18
Appearing in the Dictionary of Computer Science, Engineering and
Technology, Copyright &copy; 2000 CRC Press LLC.
</p>

<p>
A tree in the data structure sense (1) is not the same as a
tree in the graph sense (2).  Consider possible {binary trees} with
two nodes.  There are two possible data structures: a root and a left
subtree or a root and a right subtree.  However there is only one
possible graph: a root and a subtree.  The graph definition doesn't
allow for "the subtree is the right subtree and the left subtree is
empty".  Also there is no "empty" graph tree.
# One way an empty graph tree causes problems is because |E| = |V| - 1.
</p>

<p>
Thanks to Sharat Chandran (sharat@cs.umd.edu) for clarifying the
difference between these two senses.
</p>

<p>
The formal definition is after 
<a href="../terms.html#CLR90">[CLR90, page 94]</a>.
# author's initials
@AUTHOR=PEB, CRC-A
# end $Source: /home/black/Workspace/dads/Terms/RCS/tree.trm,v $
