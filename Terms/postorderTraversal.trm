# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Fri Feb 10 12:35:24 2017" *by "Paul E. Black"

# $Log: postorderTraversal.trm,v $
# Fri Feb 10 13:35:22 2017  Paul E. Black,,,
# XREF Cupif-Giannini tree traversal, too.
# 
# Revision 1.6  2008/08/14 16:15:16  black
# Update HTML line break (br) tags to be XML/XHMTL compatible
#
# Revision 1.5  2007/11/02 18:18:17  black
# IMA depth-first search
#
# Revision 1.4  2007/04/23 13:21:00  black
# Update URL for Mukundan's Java demos and code
#
# Revision 1.3  2004/12/17 17:24:29  black
# Make more XHTML compliant.
#
# Revision 1.2  2004/08/25 13:23:52  black
# Refine XREFS into IMA, etc. and note IMA tree traversal.  Add RCS
# keywords.  Change file name to postorderTraversal.
#

# entry name
@NAME=postorder traversal
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=tree
# the definition
@DEFN=Process all {nodes} of a {tree} by {recursively#recursion}
processing all subtrees, then finally processing the {root}.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=postfix traversal
# other cross-listings solely for the web, such as word or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={tree traversal}, {depth-first search}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={in-order traversal}, {preorder traversal}, 
{level-order traversal}, {Cupif-Giannini tree traversal}

# any notes.  these will not be printed in the final dictionary
@NOTES=For instance, if the "processing" is just printing, a tree is
printed as "(first subtree) (second subtree) ... (last subtree) root."
Here is pseudocode for a {binary tree}:
<pre>
postorder(tree)<br />
begin<br />
    if tree is null, return;<br /><br />
    postorder(tree.left_subtree);<br />
    postorder(tree.right_subtree);<br />
    print(tree.root);<br />
end
</pre>
# further explanation (pure HTML)
@LINKS=<a
href="http://www.cosc.canterbury.ac.nz/mukundan/dsal/BTree.html">animation (Java)</a>
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/postorderTraversal.trm,v $
