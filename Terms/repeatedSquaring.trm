# *created  "Mon Jun 14 09:53:49 2004" *by "Paul E. Black"
# *modified "Mon Nov 22 06:14:06 2021" *by "Paul E. Black"

# $Log: repeatedSquaring.trm,v $
# Mon Nov 22 06:16:00 2021  Paul E. Black
# Remove UCSD IMPL - not responding.
# 
# Mon Jul 26 11:47:45 2021  Paul E. Black
# Remove Rounds LINK about using a calculator.
# 
# Revision 1.9  2013/06/12 14:17:28  black
# add LINK to interesting article on computing powers mod n using
# repeated squaring.
#
# Revision 1.8  2009/08/03 14:33:48  black
# update URL for UCSD IMPL
#
# Revision 1.7  2008/08/14 16:15:30  black
# Update HTML line break (br) tags to be XML/XHMTL compatible
#
# Revision 1.6  2008/07/28 20:01:16  black
# Remove exponents modulo some number NOTE - server DNS is still not available.
#
# Revision 1.5  2006/12/28 14:36:29  black
# Improve presentation of example: put steps to do between rows for state.
#
# Revision 1.4  2004/12/17 19:47:51  black
# Make more XHTML compliant.
#
# Revision 1.3  2004/12/17 17:28:38  black
# Make more XHTML compliant.
#
# Revision 1.2  2004/06/16 16:05:38  black
# Use 13 as an example rather than 10 (because it looks like the last
# two digits in the binary representation).  Refer to Theta in number of
# steps.  Use a table instead of typewriter graphics and <pre></pre>.
# Improve some wording.

# entry name
@NAME=repeated squaring
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=numeric
# the definition
@DEFN=Compute the $n<sup>th</sup>$ power of an expression in 
{$\Theta(\log n)$#\Theta}
steps by repeatedly squaring an intermediate result and multiplying an
accumulating value by the intermediate result when appropriate.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as name or spelling variants
@WEB=exponentiation by repeated squaring

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
#<strong>Paul E. Black</strong>, <em>Hypothetical Intelligence</em>,
#Proc. Everything XV, Provo, Utah, USA, 2(7):30-32, February 1997.

# any notes.  these are not printed in the final dictionary
@NOTES=To find $x<sup>13</sup>$ one could multiple 13 x's together.
This is slow if multiplication is time consuming 
(e.g., matrix multiplication) or the
exponent is very large.
</p>

<p>
Instead, write the exponent in binary notation.
<pre>
    13 = 1101
</pre>
Start with a "squares" value (s) equal x and an "accumulated" value
(a) equal 1.  Reading from least significant bit to most significant,
when there is a 1 in the binary notation, multiply a by s.  Keep
squaring s.
<table>
<tr align="center">
    <th>&nbsp;&nbsp;s&nbsp;&nbsp;</th><th>&nbsp;&nbsp;a&nbsp;&nbsp;</th>
    <th></th>
</tr>
<tr align="center" valign="bottom">
    <td>x<sup>1</sup></td>  <td>1</td>
    <td></td>
</tr>
<tr align="center" valign="bottom">
    <td></td>  <td></td>
    <td align="left">Least significant bit of exponent is 1, so multiply a = a * s</td>
</tr>
<tr align="center" valign="bottom">
    <td>x<sup>1</sup></td>  <td>x<sup>1</sup></td>
    <td></td>
</tr>
<tr align="center" valign="bottom">
    <td></td>  <td></td>
    <td align="left">Square s</td>
</tr>
<tr align="center" valign="bottom">
    <td>x<sup>2</sup></td>  <td>x<sup>1</sup></td>
    <td></td>
</tr>
<tr align="center" valign="bottom">
    <td></td>  <td></td>
    <td align="left">Next bit is 0, so don't multiply</td>
</tr>
<tr align="center" valign="bottom">
    <td>x<sup>2</sup></td>  <td>x<sup>1</sup></td>
    <td></td>
</tr>
<tr align="center" valign="bottom">
    <td></td>  <td></td>
    <td align="left">Square s</td>
</tr>
<tr align="center" valign="bottom">
    <td>x<sup>4</sup></td>  <td>x<sup>1</sup></td>
    <td></td>
</tr>
<tr align="center" valign="bottom">
    <td></td>  <td></td>
    <td align="left">Next bit is 1, so multiply</td>
</tr>
<tr align="center" valign="bottom">
    <td>x<sup>4</sup></td>  <td>x<sup>5</sup></td>
    <td></td>
</tr>
<tr align="center" valign="bottom">
    <td></td>  <td></td>
    <td align="left">Square s</td>
</tr>
<tr align="center" valign="bottom">
    <td>x<sup>8</sup></td>  <td>x<sup>5</sup></td>
    <td></td>
</tr>
<tr align="center" valign="bottom">
    <td></td>  <td></td>
    <td align="left">Highest bit is 1, so multiply</td>
</tr>
<tr align="center" valign="bottom">
    <td>x<sup>8</sup></td>  <td>x<sup>13</sup></td>
    <td></td>
</tr>
</table>
</p>

<p>
Why does this work?  Consider the exponent decomposed into binary notation.
<pre>
    $x<sup>13</sup> = x<sup>1101</sup>$			<br />
						<br />
    $    = x<sup>(1*2^3 + 1*2^2 + 0*2^1 + 1*2^0)</sup>$		<br />
						<br />
    $    = x<sup>1*2^3</sup>* x<sup>1*2^2</sup>* x<sup>0*2^1</sup>* x<sup>1*2^0</sup>$		<br />
						<br />
    $    = x<sup>2^3</sup>  * x<sup>2^2</sup>  *  1    * x<sup>2^0</sup>$ <br />
						<br />
    $    = x<sup>8</sup>    * x<sup>4</sup>            * x<sup>1</sup>$ <br />
</pre>
The values to be multiplied are successive squares (variable s above).  
By multiplying appropriate powers, we can compute
an integral power in logarithmic time.
</p>

<p>
There are many variations.  For instance, to find 
$a<sup>n</sup> \bmod m$ for very large n, reduce modulo m along the
way.
{Fibonacci numbers} can be computed quickly by repeated squaring of a
suitable expression.
If addition and doubling were much faster than multiplication, one 
could multiply by repeatedly doubling and summing.


# any historical notes
@HISTORY=

# implementation(s) (pure HTML)
@IMPL=

# further explanation (pure HTML)
@LINKS=
To work out 
<a href="http://www.tricki.org/article/To_work_out_powers_mod_n_use_repeated_squaring">powers mod n</a>, use repeated squaring.
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/repeatedSquaring.trm,v $
