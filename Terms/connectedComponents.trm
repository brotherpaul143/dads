# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Tue Sep  2 08:37:42 2014" *by "Paul E. Black"

# $Log: connectedComponents.trm,v $
# Tue Sep  2 08:37:48 2014  Paul E. Black
# Change stonybrook.edu URL in IMPL
# 
# Mon Jul 28 16:19:23 2014  Paul E. Black
# update URL for Skienas Stony Brook Algorithm Respository IMPLs
# 
# Revision 1.5  2007/10/18 20:18:27  black
# cross reference "partition"
#
# Revision 1.4  2004/12/17 17:23:28  black
# Make more XHTML compliant.
#
# Revision 1.3  2004/12/13 18:13:55  black
# NOTE that "component" may be used with "connected" understood.
#
# Revision 1.2  2004/09/29 15:20:19  black
# Remove blank lines at the end.  Refine XREFS into IMA, etc. and add
# that IMA partition.  Add RCS keywords.
#

# entry name
@NAME=connected components
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=D
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=graph
# the definition
@DEFN=The {set} of {maximally connected components} of an {undirected graph}.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={partition}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={connected graph}, {biconnected component}, {undirected graph},
{subgraph}, {clique}, {strongly connected components}

# any notes.  these will not be printed in the final dictionary
@NOTES=If a graph is {connected#connected graph}, it has only one
connected component.
Often the term "component" is used, with the "connected" property understood.
</p>

<p>
Let $G=(V, E)$ be a graph and
$G<sub>1</sub>=(V<sub>1</sub>, E<sub>1</sub>)\ldots, 
G<sub>m</sub>=(V<sub>m</sub>, E<sub>m</sub>)$ 
be its connected components.  Every vertex is in exactly in one
connected component, that is, the components {partition}(1) V.
Formally, for all $i \neq j, V<sub>i</sub>\cap V<sub>j</sub>=\emptyset$.
Further, $V=V<sub>1</sub>\cup\ldots\cup V<sub>m</sub>$ and 
$E=E<sub>1</sub>\cup\ldots\cup E<sub>m</sub>$.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=<a
href="http://www3.cs.stonybrook.edu/~algorith/files/dfs-bfs.shtml">(C++, C,
Pascal, Mathematica, and Fortran)</a>
# author's initials
@AUTHOR=AL
# end $Source: /home/black/Workspace/dads/Terms/RCS/connectedComponents.trm,v $
