# *created  "Fri Jan 18 13:42:15 2002" *by "Paul E. Black"
# *modified "Fri Jan 18 14:16:24 2002" *by "Paul E. Black"

# entry name
@NAME=active data structure
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=basic
# the definition
@DEFN=A {data structure} with an associated thread or process that
performs internal operations to give the external behavior of
another, usually more general, data structure.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names or {cross refs} that this is Also Known As.
@AKA=functional data structure
# other cross-listings solely for the web, such as word or spelling variants
@WEB=
# comma-separated list of {cross references}.  printed as "See also ..."
@XREFS={passive data structure}
# bib refs, eg, to defining article (pure HTML).  printed within <P>..</P>
@BIB=
# any notes.  these are not printed in the final dictionary
@NOTES=For example, a {queue} is usually considered to be unbounded.
However, actual queues provided by the hardware or operating system
may be significantly limited.  Changing the writing and reading
processes to use a bounded queue makes those applications more
complicated.  However, an active queue can accept input from the
writer through a system queue, and save items in memory or on disk if
the other system queue for the reader is full.  When the reader's
queue has space, items can be retrieved and put back in the queue.
Although there are now three components, rather than just the writer
and reader, the high level abstraction is very simple and clear.
# implementation(s) (pure HTML)
@IMPL=
# further explanation (pure HTML)
@LINKS=
# author's initials (see authors.data)
@AUTHOR=PEB
# end
