# *created  "Mon Dec 14 15:34:21 1998" *by "Paul E. Black"
# *modified "Tue Jan 22 11:55:46 2002" *by "Paul E. Black"

# entry name
@NAME=all pairs shortest path
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=P
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=graph
# the definition
@DEFN=Find the weight (or length) of the {shortest paths}
between all pairs of {vertices#vertex} in a {weighted, directed
graph}.
# comma-separated list of {cross references}, i.e., See also ...
@XREFS={Floyd-Warshall algorithm}, {Johnson's algorithm}
{Dijkstra's algorithm}, {Bellman-Ford algorithm},
similar problems: {minimum spanning tree}, {traveling salesman}
# any notes.  these will not be printed in the final dictionary
@NOTES=The problem is to find the weights of the shortest paths
between all pairs of vertices.  For a map, it is to produce the
(shortest) road distances between all cities, not which roads to take
to get from one city to another.
</P>

<P>
A modification to most algorithms finds the shortest path, too.  In
<tt>predecessor[i][j]</tt> save the immediate predecessor of the
shortest path from i to j.  Suppose predecessor[i][j] is k; then the
shortest path ends with $\ldots \rightarrow k \rightarrow j$.  If
predecessor[i][k] is p, the shortest path ends with $\ldots
\rightarrow p \rightarrow k \rightarrow j$.  Continue working
backwards until you reach i.
</P>

<P>
After LK.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end
