# *created  "Tue Sep 15 09:19:57 1998" *by "Paul E. Black"
# *modified "Mon May 23 09:23:54 2011" *by "Paul E. Black"

# $Log: queue.trm,v $
# Revision 1.14  2011/05/23 13:24:00  black
# update URL for Maksim Goleta's C# Collections
#
# Revision 1.13  2011/02/22 22:11:58  black
# Darius Bacon IMPL gone - remove link to it.
#
# Revision 1.12  2010/07/26 19:34:27  black
# www.octavian.org/cs IMPL gone.
#
# Revision 1.11  2007/04/23 13:21:24  black
# Update URL for Mukundan's Java demos and code
#
# Revision 1.10  2006/09/11 14:04:30  black
# Update tutorial IMPL URL
#
# Revision 1.9  2006/05/31 12:51:52  black
# Improve attribution: change Goletas' to Maksim Goleta's
#
# Revision 1.8  2006/05/31 12:43:33  black
# Add Goletas' C# IMPL
#
# Revision 1.7  2005/01/04 14:48:12  black
# Remove URL for Campbell-no longer found.
#
# Revision 1.6  2004/12/17 17:24:31  black
# Make more XHTML compliant.
#
# Revision 1.5  2004/06/22 15:47:47  black
# Use "collection" instead of "set" to minimize chance of confusion and
# to follow def'n of stack.
#
# Revision 1.4  2004/03/22 17:34:45  black
# Reference the new entry axiomatic semantics.
#
# Revision 1.3  2004/01/12 15:15:05  black
# Add RCS Log.  Refine XREFS to IMA, etc.  Add Darius Bacon's implementation.
#
# Revision 1.2  2003/09/04 21:25:33  black
# Remove a site no longer found anywhere that I could find
#

# entry name
@NAME=queue
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, search, sort, graph, combin(atorial)
@AREA=basic
# the definition
@DEFN=A collection of items in which only the earliest added item may be
accessed.  Basic operations are add (to the {tail}) or enqueue and
delete (from the {head}) or dequeue.  Delete returns the item
removed.  Also known as "first-in, first-out" or FIFO.
# formal definition or {cross reference} to an entry
@FORML=It is convenient to define delete or dequeue in terms of remove
and a new operation, front.  
The operations new(), add(v, Q), front(Q), and remove(Q)
may be defined with {axiomatic semantics} as follows.
<ol>
<li>new() returns a queue
<li>front(add(v, new())) = v
<li>remove(add(v, new())) = new()
<li>front(add(v, add(w, Q))) = front(add(w, Q))
<li>remove(add(v, add(w, Q))) = add(v, remove(add(w, Q)))
</ol>
where Q is a queue and v and w are values.
# comma-sep list of pure names that this is Also Known As.
@AKA=FIFO
# other cross-listings solely for the web, such as word or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={abstract data type}
# Specialization: "... is a kind of me."
@VARIANT={bounded queue}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={deque},{stack},
{priority queue}, {first come, first served}

# any notes.  these will not be printed in the final dictionary
@NOTES=
# further explanation (pure HTML)
@LINKS=
Demonstrations with <a
href="http://www.cosc.canterbury.ac.nz/mukundan/dsal/QueueAppl.html">dynamic
array</a>, <a
href="http://www.cosc.canterbury.ac.nz/mukundan/dsal/CQueueAppl.html">fixed
array</a>, and <a
href="http://www.cosc.canterbury.ac.nz/mukundan/dsal/LinkQueueAppl.html">linked list</a>
implementations.
# implementation(s) (pure HTML)
@IMPL=
Maksim Goleta's
<a href="http://goletas.com/csharp-collections/">Collections
(C#)</a> implementing singly- and doubly-linked lists, binary search
trees, and AVL trees.
Bro. David Carlson's
<a
href="http://cis.stvincent.edu/html/tutorials/swd/queues/queues.html">tutorial
and code (C++)</a> using linked list.

# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/queue.trm,v $
