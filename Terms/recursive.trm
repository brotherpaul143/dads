# *created  "Mon Jun 21 10:06:32 1999" *by "Paul E. Black"
# *modified "Fri Dec 17 12:07:06 2004" *by "Paul E. Black"

# $Log: recursive.trm,v $
# Revision 1.2  2004/12/17 17:07:06  black
# Refine XREFS into IMA, etc.  Add RCS keywords.
#

# entry name
@NAME=recursive
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=basic
# the definition
@DEFN=(1) A data structure that is partially composed of other
instances of the data structure.  For instance, a {tree} is composed
of smaller trees ({subtrees}) and {leaf} {nodes}, and a
{list} may 
have other lists as elements.  (2) An {algorithm} in which
functions might call themselves.  For instance, {quicksort} or {heapify}.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={recursion}

# any notes.  these will not be printed in the final dictionary
@NOTES=Infinite data structures may be represented by having a tree
include (point back to) itself recursively, a list include itself,
etc.  Recursive data structures are often best handled with a
recursive algorithm, or an algorithm using {recursion}.
# further explanation (pure HTML)
@LINKS=See the entry at recursion for links, explanations, exercises,
cross references, etc.
# implementation(s) (pure HTML)
@IMPL=
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/recursive.trm,v $
