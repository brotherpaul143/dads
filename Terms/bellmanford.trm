# *created  "Tue Dec  1 12:24:14 1998" *by "Paul E. Black"
# *modified "Mon Feb 11 17:07:47 2019" *by "Paul E. Black"

# $Log: bellmanford.trm,v $
# Mon Feb 11 17:07:52 2019  Paul E. Black
# use https to access Wikipedia
# 
# Revision 1.8  2005/03/04 18:03:23  black
# Add Wikipedia IMPL
#
# Revision 1.7  2005/02/01 20:42:03  black
# Remove IMA APSP algo -- it solves SSSP, and it messes up ontology.
# Add XREFS to Dijkstra's.  Shorten DEFN with href to SSSP.
#
# Revision 1.6  2004/12/17 17:27:44  black
# Make more XHTML compliant.
#
# Revision 1.5  2004/07/06 13:45:00  black
# Remove dead IMPL link.
#
# Revision 1.4  2004/04/19 18:33:59  black
# Use the standard English plural of vertex
#
# Revision 1.3  2004/01/30 18:11:55  black
# Refine XREFS into IMA, etc.  Add RCS Log.
#
# Revision 1.2  2003/10/16 17:04:30  black
# Use a more regular plural of vertex
#

# entry name
@NAME=Bellman-Ford algorithm
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=graph
# the definition
@DEFN=An efficient algorithm to solve the
{single-source shortest-path problem}.
Weights may be negative.  
The algorithm initializes the distance to
the {source} vertex to 0 and all other vertices to $\infty$.  It then
does $V-1$ passes (V is the number of vertices) over all {edges}
relaxing, or updating, the distance to the destination of each edge.
Finally it checks each edge again to detect negative weight {cycles},
in which case it returns false.  The time complexity is {O(VE)#big-O
notation}, where E is the number of edges.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=Ford-Bellman
# other cross-listings solely for the web, such as word or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN={Johnson's algorithm}
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={Dijkstra's algorithm}

# any notes.  these will not be printed in the final dictionary
@NOTES=
After <a href="../terms.html#CLR90">[CLR90, page 532]</a>
# implementation(s) (pure HTML)
@IMPL=
The entry in
<a href="https://en.wikipedia.org/wiki/Bellman-Ford_algorithm">Wikipedia
(C, Assembly, and pseudocode)</a> has a proof, too.
# further explanation (pure HTML)
@LINKS=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/bellmanford.trm,v $
