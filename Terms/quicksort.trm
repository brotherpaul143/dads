# *created  "Wed Sep 16 08:54:42 1998" *by "Paul E. Black"
# *modified "Wed Dec 15 13:11:10 2004" *by "Paul E. Black"

# $Log: quicksort.trm,v $
# Revision 1.10  2004/12/15 18:57:36  black
# Improve wording of def'n.  XREF external quicksort.  Make more XHTML
# compliant.
#
# Revision 1.9  2004/06/17 16:33:54  black
# Refer to article comparing sort routines.
#
# Revision 1.8  2004/05/11 16:54:23  black
# Add Wikipedia IMPL.  Separate entries with periods (.), not semi-colons.
#
# Revision 1.7  2004/03/15 21:58:02  black
# Qualify "Betley-McIlroy is optimal" a little: it still goes quadratic
# for files (nearly) in order.
#
# Revision 1.6  2004/01/27 14:47:23  black
# Add that sublinear time algorithm is used INME.
#
# Revision 1.5  2003/12/18 20:11:22  black
# Separate XREFS into new, more precise fieds.
#
# Revision 1.4  2003/09/29 16:37:08  black
# Add note about antiquicksort - a program to generate an "adversary",
# i.e., worst case for any quicksort-like program.
#

# entry name
@NAME=quicksort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, search, sort, graph, combin(atorial), etc.
@AREA=sort
# the definition
@DEFN=Pick an element from the array (the pivot), {partition} the
remaining elements into those greater than and less
than this pivot, and {recursively#recursion} sort the partitions.
There are many variants of the basic scheme above: to select the pivot,
to partition the array, to stop the recursion on small partitions, etc.
# other cross-listings solely for the web, such as word or spelling variants
@WEB=quick sort

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={in-place sort}
# Specialization: "... is a kind of me."
@VARIANT={balanced quicksort}, {three-way radix quicksort}, 
{introspective sort}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME={partition}, {divide and conquer}, {recursion}, {Select},
{sublinear time algorithm}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={external quicksort}

# any notes.  these will not be printed in the final dictionary
@NOTES=Quicksort has running time 
{$\Theta(n<sup>2</sup>)$#\Theta} in the {worst case}, but it is typically 
{$O(n \log n)$#big-O notation}.  In practical situations, a finely
tuned implementation of quicksort beats most sort algorithms,
including sort algorithms whose theoretical complexity is 
$O(n \log n)$ in the worst case.
</p>

<p>
{Select} can be used to always pick good pivots, thus giving a
variant with {$O(n \log n)$#big-O notation} worst-case running time.

# M. Douglas McIlroy
# A Killer Adversary for Quicksort
# Software-Practice and Experience 29 (1999) 341-344
# http://www.cs.dartmouth.edu/~doug/mdmspe.pdf accessed 29 Sept 2003
#	A program that "watches" the choices any quicksort-like
# program makes and chooses the pessimal values, i.e., the values to
# force quadratic run time.  If the sort program only moves pointers
# and the adversary only changes values, the original input can be
# easily recovered.
#	The algorithm is called "antiquicksort"
# http://www.cs.dartmouth.edu/~doug/aqsort.c

# implementation(s) (pure HTML)
@IMPL=<a href="http://www.cs.princeton.edu/~rs/">Robert
Sedgewick's</a> talk showing that with Bentley-McIlroy 3-way
partitioning <a
href="http://www.cs.princeton.edu/~rs/talks/QuicksortIsOptimal.pdf">Quicksort
Is Optimal (C)</a> (pdf format) for random files possibly with
duplicate keys; includes discussion and proof.
<a
href="http://java.sun.com/applets/jdk/1.0/demo/SortDemo/example1.html">Animation
and code (Java)</a>.
<a href="http://en.wikipedia.org/wiki/Quicksort">Wikipedia entry with
extended discussion and alternatives (C, Python, Haskell, pseudocode)</a>.
Demos and code for <a
href="http://www.cs.ubc.ca/spider/harrison/Java/sorting-demo.html">enhanced,
fast, quicksort, and quicksort with bubble sort (Java)</a>.
<a
href="http://www.cs.ubc.ca/spider/harrison/Java/QSortAlgorithm.java">(Java)</a>.
<a
href="http://www.math.grin.edu/~stone/events/scheme-workshop/quicksort.html">(Scheme)</a>.
<a
href="http://www.markcrocker.com/rexxtipsntricks/rxtt28.2.0470.html">In-line
compare (Rexx)</a>, 
<a
href="http://www.markcrocker.com/rexxtipsntricks/rxtt28.2.0471.html">compare
function (Rexx)</a>.
# further explanation (pure HTML)
@LINKS=
Java applet 
<a href="http://www.cosc.canterbury.ac.nz/people/mukundan/dsal/QSort.html">demonstration</a>.
<a href="http://www.azillionmonkeys.com/qed/sort.html">Comparison of
quicksort, heapsort, and merge sort</a> on modern processors.
# author's initials
@AUTHOR=CM
# end $Source: /home/black/Workspace/dads/Terms/RCS/quicksort.trm,v $
