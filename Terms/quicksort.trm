# *created  "Wed Sep 16 08:54:42 1998" *by "Paul E. Black"
# *modified "Mon Jun 21 09:10:34 2021" *by "Paul E. Black"

# $Log: quicksort.trm,v $
# Tue Sep  3 09:03:03 2019  Paul E. Black
# Update Robert Sedgewick IMPL and NOTE URL to use https
# 
# Mon Apr 22 12:15:17 2019  Paul E. Black
# Remove LINK to Mukundans animation: no longer available.
# 
# Mon Mar 25 12:07:34 2019  Paul E. Black
# Fix Flower Bracket IMPL URL
# 
# Mon Mar 25 11:59:36 2019  Paul E. Black
# Remove link to Harrisons demo and code - gone.
# 
# Mon Mar  4 10:26:24 2019  Paul E. Black
# Remove Mark Crocker Rexx IMPL - pages are gone
# 
# Mon Mar  4 09:23:59 2019  Paul E. Black
# Add IMA Las Vegas algorithm when the pivot is picked randomly
# 
# Tue Feb 12 10:08:21 2019  Paul E. Black
# Update Flower Brackets and Mark Crocker IMPL URL
# OUpdateDIFF:  @@ -2 +2 @@
# 
# Mon Feb 11 17:11:22 2019  Paul E. Black
# use https to access Wikipedia
# 
# Fri Apr  6 11:16:40 2018  Paul E. Black
# Add Flower Brackets IMPL
# 
# Tue Nov  8 14:05:27 2016  Paul E. Black
# LINK to sort illustrated through dance.
# 
# Fri Mar 25 08:54:18 2016  Paul E. Black
# IMIN q sort
# 
# Mon Mar  2 15:59:48 2015  Paul E. Black
# Remove John David Stones (Grinnell) IMPL - Stones account is entirely gone.
# 
# Revision 1.17  2013/08/22 19:42:02  black
# update URL for Alex Lopez-Ortiz at U waterloo
#
# Revision 1.16  2009/08/24 14:03:10  black
# Update Harrison's sorting demo URL root
#
# Revision 1.15  2009/08/03 14:28:42  black
# update URL for IMPL at Simple Programming Tutorials, now Algorithms
# and Data Structures
#
# Revision 1.14  2009/01/22 14:16:29  black
# Add Simple Programming Tutorials IMPL
#
# Revision 1.13  2007/12/17 15:42:12  black
# Remove java.sun.com IMPL - page is gone.
#
# Revision 1.12  2007/04/23 13:21:28  black
# Update URL for Mukundan's Java demos and code
#
# Revision 1.11  2005/12/14 14:59:54  black
# rename 3-way radix quicksort to multikey Quicksort, the authors' term
#
# Revision 1.10  2004/12/15 18:57:36  black
# Improve wording of def'n.  XREF external quicksort.  Make more XHTML
# compliant.
#
# Revision 1.9  2004/06/17 16:33:54  black
# Refer to article comparing sort routines.
#
# Revision 1.8  2004/05/11 16:54:23  black
# Add Wikipedia IMPL.  Separate entries with periods (.), not semi-colons.
#
# Revision 1.7  2004/03/15 21:58:02  black
# Qualify "Betley-McIlroy is optimal" a little: it still goes quadratic
# for files (nearly) in order.
#
# Revision 1.6  2004/01/27 14:47:23  black
# Add that sublinear time algorithm is used INME.
#
# Revision 1.5  2003/12/18 20:11:22  black
# Separate XREFS into new, more precise fieds.
#
# Revision 1.4  2003/09/29 16:37:08  black
# Add note about antiquicksort - a program to generate an "adversary",
# i.e., worst case for any quicksort-like program.
#

# entry name
@NAME=quicksort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, search, sort, graph, combin(atorial), etc.
@AREA=sort
# the definition
@DEFN=Pick an element from the array (the pivot), {partition} the
remaining elements into those greater than and less
than this pivot, and {recursively#recursion} sort the partitions.
There are many variants of the basic scheme above: to select the pivot,
to partition the array, to stop the recursion or switch to another
algorithm for small partitions, etc.
# other cross-listings solely for the web, such as word or spelling variants
@WEB=quick sort

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={in-place sort}, {Las Vegas algorithm} when the pivot is picked randomly
# Specialization: "... is a kind of me."
@VARIANT={balanced quicksort}, {multikey Quicksort}, 
{introspective sort}
# Aggregate parent: "I am a part of or used in ..."
@IMIN={q sort}
# Aggregate child: "... is a part of or used in me."
@INME={partition}, {divide and conquer}, {recursion}, {Select},
{sublinear time algorithm}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={external quicksort}, {dual-pivot quicksort}

# any notes.  these will not be printed in the final dictionary
@NOTES=Quicksort has running time 
{$\Theta(n<sup>2</sup>)$#\Theta} in the {worst case}, but it is typically 
{$O(n \log n)$#big-O notation}.  In practical situations, a finely
tuned implementation of quicksort beats most sort algorithms,
including sort algorithms whose theoretical complexity is 
$O(n \log n)$ in the worst case.
</p>

<p>
{Select} can be used to always pick good pivots, thus giving a
variant with {$O(n \log n)$#big-O notation} worst-case running time.
</p>

<p>
Newer variants, such as {dual-pivot quicksort}, are faster because
they access less memory.

# M. Douglas McIlroy
# A Killer Adversary for Quicksort
# Software-Practice and Experience 29 (1999) 341-344
# http://www.cs.dartmouth.edu/~doug/mdmspe.pdf accessed 29 Sept 2003
#	A program that "watches" the choices any quicksort-like
# program makes and chooses the pessimal values, i.e., the values to
# force quadratic run time.  If the sort program only moves pointers
# and the adversary only changes values, the original input can be
# easily recovered.
#	The algorithm is called "antiquicksort"
# http://www.cs.dartmouth.edu/~doug/aqsort.c

# implementation(s) (pure HTML)
@IMPL=<a href="https://www.cs.princeton.edu/~rs/">Robert
Sedgewick's</a> talk showing that with Bentley-McIlroy 3-way
partitioning <a
href="https://www.cs.princeton.edu/~rs/talks/QuicksortIsOptimal.pdf">Quicksort
Is Optimal (C)</a> (pdf format) for random files possibly with
duplicate keys; includes discussion and proof.
<a href="https://en.wikipedia.org/wiki/Quicksort">Wikipedia entry with
extended discussion and alternatives (C, Python, Haskell, pseudocode)</a>.
<a
href="https://www.algolist.net/Algorithms/Sorting/Quicksort">explanation
(Java and C++)</a>.
Flower Brackets
<a href="https://www.flowerbrackets.com/quicksort-java/">explanation,
including code and complexity (Java)</a>. 
# further explanation (pure HTML)
@LINKS=
<a href="http://www.azillionmonkeys.com/qed/sort.html">Comparison of
quicksort, heapsort, and merge sort</a> on modern processors.

<br />

<br />
Quicksort illustrated through a
<a href="https://www.youtube.com/watch?v=ywWBy6J5gz8">Hungarian folk
dance: K&uuml;k&uuml;ll&#337;menti leg&eacute;nyes</a>.  
Created at Sapientia University.
<br />
<iframe src="https://www.youtube.com/embed/ywWBy6J5gz8" frameborder="0" allowfullscreen></iframe>
# author's initials
@AUTHOR=CM
# end $Source: /home/black/Workspace/dads/Terms/RCS/quicksort.trm,v $
