# *created  "Fri Dec 18 14:19:17 1998" *by "Paul E. Black"
# *modified "Tue Sep 10 09:28:58 2013" *by "Paul E. Black"

# $Log: binaryheap.trm,v $
# Revision 1.12  2013/09/10 13:29:54  black
# update URL for Fortran IMPL
#
# Revision 1.11  2011/05/26 19:57:04  black
# Reference the new entry, level
#
# Revision 1.10  2010/12/14 15:38:29  black
# NOTE that the traditional implementation is inefficient with virtual
# memory and refer to a VM efficient implementation: B-heap.
#
# Revision 1.9  2009/11/16 14:52:04  black
# Update domain name of Ricardo Baeza-Yates' Handbook of Algorithms and Data Structures
#
# Revision 1.8  2009/09/30 17:19:52  black
# Update domain name of Raul Baeza's Handbook of Algorithms and Data Structures
#
# Revision 1.7  2005/10/27 13:59:55  black
# Update John Morris' URL
#
# Revision 1.6  2005/04/25 14:13:59  black
# XREF Fibonacci heap, too.  NOTE that they can be merged in constant time.
#
# Revision 1.5  2005/01/12 14:46:14  black
# Put IMPL language in parens and separate with a period.
#
# Revision 1.4  2004/12/17 17:27:47  black
# Make more XHTML compliant.
#
# Revision 1.3  2004/03/18 16:12:55  black
# Note that we use 1-based indexing.
#
# Revision 1.2  2004/01/07 18:11:06  black
# Refine cross references into IMA, IMIN, etc.  Move much of the xrefs,
# notes, implementations, etc. at "heap" here since they really refers
# to binary heaps.
#

# entry name
@NAME=binary heap
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=tree
# the definition
@DEFN=A {complete binary tree} where every {node} has a {key}
more extreme (greater or less) than or equal to the key of its 
{parent}.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={complete binary tree}, {heap}, {k-ary heap} with k=2
# Specialization: "... is a kind of me."
@VARIANT={treap}
# Aggregate parent: "I am a part of or used in ..."
@IMIN={build-heap}, {heapify}, {heapsort}, {priority queue}
# Aggregate child: "... is a part of or used in me."
@INME={array}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={Fibonacci heap}, {binomial heap}

# any notes.  these will not be printed in the final dictionary
@NOTES=Insertion is {O($\log<sub>2</sub> n$)#big-O notation} where $n$ is
the number of nodes.
A binary heap can be efficiently implemented as an {array}, where a
node at index $i$ has children at indexes $2i$ and $2i+1$ and a
parent at index $i/2$, with {one-based indexing}.  
If a child index is greater than the number
of nodes, the child does not exist.
</p>

<p>
The above implementation is inefficient with virtual memories because
(almost) every {level} is in a different page.
<a href="http://en.wikipedia.org/wiki/B-heap">B-heaps</a> allocate
subtrees to a single page for better virtual memory performance.
</p>

<p>
Merging two binary heaps is {O(n)#big-O notation}: the best you can do
is just concatenate two heap arrays and make a heap of the result.
Two {binomial heaps} can be merged in O(ln n).  
Two {Fibonacci heaps} can be merged in $\Theta(1)$.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=<a
href="http://www.dcc.uchile.cl/~rbaeza/handbook/algs/5/513.del.c">delete
(C)</a> and <a
href="http://www.dcc.uchile.cl/~rbaeza/handbook/algs/5/513.ins.c">insert
(C and Pascal)</a> both of which use the auxiliary function <a
href="http://www.dcc.uchile.cl/~rbaeza/handbook/algs/5/513.sift.c">siftup
(C and Pascal)</a>,
# John Morris morris@ee.uwa.edu.au
<a
href="http://www.cs.auckland.ac.nz/software/AlgAnim/heaps.html">explanation,
examples, and code (C)</a>.
<a href="http://www.netlib.org/toms/561">(Fortran)</a>.
# author's initials
@AUTHOR=CLK
# end $Source: /home/black/DADS/Terms/RCS/binaryheap.trm,v $
