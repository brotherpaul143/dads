# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Fri Jan  7 09:40:41 2005" *by "Paul E. Black"

# $Log: diminishingIncSort.trm,v $
# Revision 1.7  2005/01/07 14:40:49  black
# Change DEFN to include Shell and comb sort and move IMPL, NOTES,
# etc. accordingly.  Contrast Shell and comb sort.
#
# Revision 1.6  2005/01/06 19:20:20  black
# Correction: comb sort is a different (but similar) algorithm.  Fix
# text in harrison URL.
#
# Revision 1.5  2004/12/17 17:28:00  black
# Make more XHTML compliant.
#
# Revision 1.4  2004/03/11 18:51:21  black
# Link to comsort.htm: "An Improved Comb Sort with Pre-Defined Gap Table"
#
# Revision 1.3  2003/12/18 20:10:21  black
# Separate XREFS into new, more precise fieds.
#

# entry name
@NAME=diminishing increment sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=sort
# the definition
@DEFN=An {in-place sort} algorithm that repeatedly reorders
different, small subsets
of the input until the entire array is ordered.
On each pass it handles $i$ sets of $n/i$ items, where $n$ is the
total number of items.  Each set is every
$i<sup>th</sup>$ item, e.g. set 1 is item 1, 1+i, 1+2i, etc.,
set 2 is item 2, 2+i, etc.  On each succeeding pass, the increment or
gap,
$i$, is reduced until it is 1 for the last pass.
# comma-separated list of pure names
@AKA=
# other cross-listings solely for the web, such as name or spelling variants
@WEB=decreasing increment sort


#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={in-place sort}
# Specialization: "... is a kind of me."
@VARIANT={Shell sort}, {comb sort}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=

# bib refs, eg, to defining articles (pure HTML).  printed within <p>..</p>.
@BIB=

# any notes.  these will not be printed in the final dictionary
@NOTES=Since items may move large distances at first, this method is
quite efficient.  
{Comb sort} does a single "bubbling" pass (ala {bubble sort}) over
each set for each gap or increment, whereas {Shell sort} completely
sorts each set.
</p>

<p>
Shell had the first increment be half the number of items to be sorted,
i.e., $\lfloor n/2\rfloor$, and each succeeding increment half the
preceding increment.  This lowers efficiency since the same items are
compared over and over.  Relatively prime increments are better.
</p>

<p>
Since one of the sets can be visualized as those items where
the teeth of a comb touch, this is sometimes called a comb sort.  Using
this analogy, the teeth get closer on each pass.
However, the term "comb sort" is used for a specific algorithm.  Knuth
uses "diminishing increment sort" as a synonym of "Shell sort", but we
include comb sort.

# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB,ASK
# end $Source: /home/black/DADS/Terms/RCS/diminishingIncSort.trm,v $
