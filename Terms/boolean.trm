# *created  "Tue Feb 29 08:40:58 2000" *by "Paul E. Black"
# *modified "Mon Mar 23 16:29:18 2009" *by "Paul E. Black"

# $Log: boolean.trm,v $
# Revision 1.3  2009/03/23 20:29:45  black
# Remove LINK to csusb - no longer found.
#
# Revision 1.2  2004/12/17 16:48:38  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#

# entry name
@NAME=boolean
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=D
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=basic
# the definition
@DEFN=(1) In computer science, entities having just two values: 1 or
0, true or false, on or off, etc. along with the operations {and},
{or}, and {not}.
(2) In mathematics, entities from an algebra equivalent to
{intersection}, {union}, and {complement} over {subsets} of a given {set}.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={boolean expression}, {boolean function}

# any notes.  these will not be printed in the final dictionary
@NOTES=A mathematical boolean algebra based on a set of size $n$
has $2<sup>n</sup>$ values.  The operations, intersection and union
(or <em>and</em> and <em>or</em>), are {commutative} and
{associative}, and each distributes over the other.  Each operation
has an identity, and complement produces the inverse.  Binary logic is
the boolean algebra which two values.
# further explanation (pure HTML)
@LINKS=

# implementation(s) (pure HTML)
@IMPL=
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/boolean.trm,v $
