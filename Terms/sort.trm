# *created  "Fri Sep 18 10:17:13 1998" *by "Paul E. Black"
# *modified "Tue Nov 30 10:06:52 2004" *by "Paul E. Black"

# $Log: sort.trm,v $
# Revision 1.6  2004/11/30 15:15:19  black
# Add treesort (1).
#
# Revision 1.5  2004/10/04 18:25:24  black
# LINK to Jim Gray's Sort Benchmark page.
#
# Revision 1.4  2004/07/30 16:54:23  black
# Move XREF permutation to IMA permutation.
#
# Revision 1.3  2004/03/15 18:41:53  black
# Add reference to a sort I just found: gnome sort.
#
# Revision 1.2  2004/01/23 14:23:22  black
# Give a formal definition.  Refine XREFS in VARIANT, etc.
#

# entry name
@NAME=sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, numeric, search, sort, graph, combin(atorial)
@AREA=sort
# the definition
@DEFN=Arrange items in a predetermined order.  There are dozens of
algorithms, the choice of which depends on factors such as the number
of items relative to working memory, knowledge of the orderliness of
the items or the range of the {keys}, the cost of comparing keys vs. the
cost of moving items, etc.  Most algorithms can be implemented as an
{in-place sort}, and many can be implemented so they are {stable}, too.
# formal definition or {cross reference} to an entry
@FORML=The sort operation may be defined in terms of an initial array,
$S$, of $N$ items and a final array, $S\prime$, as follows.
<ol>
<li>$S\prime<sub>i</sub> \leq S\prime<sub>i+1</sub>, 0 &lt; i &lt; N$
<br> (the items are in order) and
<li>$S\prime$ is a {permutation} of $S$.
</ol>
# comma-sep list of pure names or {cross refs} that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=sorting algorithm

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={permutation}
# Specialization: "... is a kind of me."
@VARIANT={quicksort}, {heapsort}, {Shell sort},
{radix sort}, {bucket sort}, {insertion sort}, 
{selection sort}, {merge sort}, {counting sort},
{histogram sort}, {strand sort}, {J sort}, {shuffle sort}, 
{American flag sort}, {bubble sort}, {gnome sort},
{bidirectional bubble sort}, {treesort (1)},
{adaptive heap sort}, {three-way radix quicksort}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={external sort}, {internal sort}, {comparison sort}, 
{distribution sort}, {derangement}

# any notes.  these will not be printed in the final dictionary
@NOTES=Any sorting algorithm can be made stable by
appending the original position to the {key}.  When otherwise-equal
keys are compared, the positions "break the tie" and the original
order is maintained.
</P>

<P>
Knuth notes <A href="../terms.html#Knuth98">[Knuth98, 3:1, Chap. 5]</A>
that this operation might be called "order".  In standard English, 
"to sort" means to arrange by kind or to classify.  The term "sort"
came to be used in Computer Science because the earliest automated
ordering procedures used punched card machines, which classified cards
by their holes, to implement {radix sort}.
# further explanation (pure HTML)
@LINKS=Demonstrations of <A
href="http://www.cs.ubc.ca/spider/harrison/Java/sorting-demo.html">various
sorting algorithms</A>;
Links to <A href="http://www.cs.hope.edu/~alganim/ccaa/sorting.html">different sorting algorithms</A>.
Jim Gray's latest records of
<A href="http://research.microsoft.com/barc/SortBenchmark/">items
sorted per penny, items sorted in a minute, and time to sort a
terabyte</A>.
# implementation(s) (pure HTML)
@IMPL=Specific implementations can be found under the specific sort
routines or at <A
href="http://www.cs.sunysb.edu/~algorith/files/sorting.shtml">(Pascal,
C++, Fortran, and Mathematica)</A>;
Explanation, <A href="http://www.cs.brockport.edu/cs/java/apps/sorters/simplesort.html">demo and code (Java)</A>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/sort.trm,v $
