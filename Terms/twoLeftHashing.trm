# *created  "Fri Jan 28 16:57:11 2005" *by "Paul E. Black"
# *modified "Wed Dec 19 16:09:31 2012" *by "Paul E. Black"

# $Log: twoLeftHashing.trm,v $
# Revision 1.3  2012/12/19 21:10:36  black
# fix minor grammatical/typo error
#
# Revision 1.2  2008/08/14 16:16:48  black
# Update HTML line break (br) tags to be XML/XHMTL compatible
#
# Revision 1.1  2005/01/31 17:42:09  black
# Initial revision
#

# entry name
@NAME=2-left hashing
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=search
# the definition
@DEFN=A {dictionary} implemented with two {hash tables} of equal size,
$T<sub>1</sub>$ and $T<sub>2</sub>$, and two different {hash functions},
$h<sub>1</sub>$ and $h<sub>2</sub>$. A new {key} is put in table 2
only if there are fewer (colliding) keys at
$T<sub>2</sub>[h<sub>2</sub>(key)]$ than at
$T<sub>1</sub>[h<sub>1</sub>(key)]$, otherwise it is put in table 1.
With $n$ keys and two tables of size $n/2$, the most collisions is
$0.69... \log<sub>2</sub> \ln n +  {O#big-O notation}(1)$ with high
probability. 
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as name or spelling variants
@WEB=always-go-left hashing, 2-left scheme

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={hash table}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN={dictionary}
# Aggregate child: "... is a part of or used in me."
@INME={array}, {hash function}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={cuckoo hashing}, {2-choice hashing}

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
<strong>Berthold V&ouml;cking</strong>, <em>How Asymmetry Helps Load
Balancing</em>, Journal of the ACM, 50(4):568-589, July 2003.<br />
A preliminary version appeared in FOCS 1999.

# any notes.  these are not printed in the final dictionary
@NOTES=The name comes from the notion of dividing a single hash table
in two, left and right halves of equal sizes, and always putting the
key in the left half on ties.<br />
Although the average lookup time is similar to a table with a single
hash function, the maximum number of collisions is exponentially
smaller.  This makes using buckets or use in real-time systems far more
practical.  Additional hash functions only decrease the maximum by a
constant factor.<br />
Buckets or lists can be searched in parallel.
</p>

<p>
Why would breaking a single hash table into two pieces and
asymmetrically resolving ties keep the maximum number of collisions
lower than the single table of {2-choice hashing}?  Michael
Mitzenmacher, who extensively studied and analyzed 2-left and 2-choice
hashing, provides the intuition that no location increases the maximum
number of collisions until both of the pair has the same number.  But
always-go-left keeps one half more loaded.

# any historical notes
@HISTORY=

# implementation(s) (pure HTML)
@IMPL=
# further explanation (pure HTML)
@LINKS=
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/twoLeftHashing.trm,v $
