# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Wed Nov  3 12:00:29 2010" *by "Paul E. Black"

# $Log: orthogonalLists.trm,v $
# Revision 1.5  2010/11/03 16:16:00  black
# remove orphan HTML end-anchor.
#
# Revision 1.4  2009/12/18 22:35:46  black
# Remove LINK to Sonnack's graphic of orthogonal lists implementing a
# sparse matrix.
#
# Revision 1.3  2009/01/22 15:43:58  black
# Initial DEFN (from original notes).  Add links and more notes.
#
# Revision 1.2  2004/12/17 17:06:10  black
# Refine XREFS into IMA, etc.  Add RCS keywords.
#

# entry name
@NAME=orthogonal lists
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=search
# the definition
@DEFN={Lists#list} that share items, but are structurally independent.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN={sparse matrix}
# Aggregate child: "... is a part of or used in me."
@INME={list}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=

# any notes.  these will not be printed in the final dictionary
@NOTES=The lists are interweaved through items.  For instance, we may
keep people on three orthogonal lists by hair color, gender, and
country of residence or data values in a {sparse matrix} on two
orthogonal lists by row and column.  Inserting an item means inserting
it into each list as appropriate.
# further explanation (pure HTML)
@LINKS=
A <a 
href="http://cs.saddleback.edu/rwatkins/CS2B/Lab Exercises/Orthogal Lists Lab.pdf">lab 
exercise with four attributes</a>.
<a
href="http://www.cise.ufl.edu/~sahni/cop3530/powerpoint/lec11.ppt">PowerPoint</a>
lecture notes of using orthogonal lists to implement a sparse matrix.
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/DADS/Terms/RCS/orthogonalLists.trm,v $
