# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Fri Dec 17 09:28:22 2004" *by "Paul E. Black"

# $Log: countingsort.trm,v $
# Revision 1.2  2004/12/17 14:31:53  black
# Put IMPL of Single Buffered Count Sort here from histogram sort.
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML
# compliant.
#

# entry name
@NAME=counting sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=sort
# the definition
@DEFN=A 2-pass {sort} algorithm that is efficient when the range
of {keys} is small and there many duplicate keys.  The first
pass counts the occurrences of each key in an auxiliary {array}, and
then makes a running total so each auxiliary entry is the number of
preceding keys.  The second pass puts each item in its final place
according to the auxiliary entry for that key.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={distribution sort}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={histogram sort}, {American flag sort}, {bucket sort}, 
{bingo sort}

# any notes.  these will not be printed in the final dictionary
@NOTES=
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=Marion McCoskey's
<a href="http://www.mcky.net/hsrto.htm">Single Buffered
Count Sort (C++)</a>.
# author's initials
@AUTHOR=ASK
# end $Source: /home/black/Workspace/dads/Terms/RCS/countingsort.trm,v $
