# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Thu Apr 21 14:48:54 2022" *by "Paul E. Black"

# $Log: countingsort.trm,v $
# Thu Apr 21 14:21:41 2022  Paul E. Black
# Add Python IMPL
# 
# Wed Nov 27 08:39:55 2019  Paul E. Black
# Remove Preiss IMPL. The page is gone.
# 
# Mon Mar  4 09:14:12 2019  Paul E. Black
# Remove McCoskeys IMPL: DNS and email are invalid; no other location found.
# 
# Fri Nov 28 14:53:12 2014  Paul E. Black
# Generalize/clarify when counting sort is efficient
# 
# Revision 1.5  2006/06/02 18:33:25  black
# Counting sort is not a simplistic radix sort - there are many subtle
# approximations.  XREF pigeonhole sort and NOTE the contrast with it.
#
# Revision 1.4  2005/04/19 19:21:16  black
# NOTE that this may be seen as a variant of radix sort.  Add Preiss IMPL.
#
# Revision 1.3  2004/12/17 14:50:16  black
# NOTE the contrast between bucket, histogram, and counting sorts.
#
# Revision 1.2  2004/12/17 14:31:53  black
# Put IMPL of Single Buffered Count Sort here from histogram sort.
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML
# compliant.
#

# entry name
@NAME=counting sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=sort
# the definition
@DEFN=A 2-pass {sort} algorithm that is efficient when the number of
distinct {keys} is small compared to the number of items.  The first
pass counts the occurrences of each key in an auxiliary {array}, and
then makes a running total so each auxiliary entry is the number of
preceding keys.  The second pass puts each item in its final place
according to the auxiliary entry for that key.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={histogram sort}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={American flag sort},
{bingo sort}, {pigeonhole sort}

# any notes.  these will not be printed in the final dictionary
@NOTES=A bucket sort uses fixed-size buckets.  A histogram sort
sets up buckets of exactly the right size in a first pass.  A
counting sort is a histogram sort with one bucket per possible key
value.  A pigeonhole sort is a counting sort that moves items to the
auxiliary array instead of counting them.

# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
<a href="https://www.geeksforgeeks.org/python-program-for-counting-sort/">(Python)</a>.

# author's initials
@AUTHOR=ASK
# end $Source: /home/black/Workspace/dads/Terms/RCS/countingsort.trm,v $
