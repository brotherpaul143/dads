# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Mon Sep 27 13:02:21 2010" *by "Paul E. Black"

# $Log: recursion.trm,v $
# Revision 1.10  2010/09/27 17:02:23  black
# Update DADS URLs
#
# Revision 1.9  2009/02/04 16:08:21  black
# Update DADS URL root
#
# Revision 1.8  2007/01/03 17:05:18  black
# Remove Erwin's Programming with Recursion tutorial - erwin's site is
# completely gone, and I can't find a new location.
#
# Revision 1.7  2006/09/11 14:04:21  black
# Update tutorial IMPL URL
#
# Revision 1.6  2005/10/27 14:02:04  black
# Update John Morris' URL
#
# Revision 1.5  2005/10/26 20:45:19  black
# improve tutorials a little
#
# Revision 1.4  2004/12/17 17:24:34  black
# Make more XHTML compliant.
#
# Revision 1.3  2004/09/28 20:41:11  black
# Refer to the entry repeated squaring.
#
# Revision 1.2  2004/01/20 21:35:43  black
# Refine XREFS into IMA, etc. and add reference to recurrence relation,
# in case someone is looking for it.  Clarify bits in Note.  Add RCS Log
# and Source.
#

# entry name
@NAME=recursion
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=T
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=basic
# the definition
@DEFN=An algorithmic technique where a function, in order to
accomplish a task, calls itself with some part of the task.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT={tail recursion}, {collective recursion}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={iteration}, {divide and conquer}, 
{divide and marriage before conquest}, {recursive},
{recurrence relation}

# any notes.  these will not be printed in the final dictionary
@NOTES=Every recursive solution involves two major parts or cases, the
second part having three components.
<ul>
<li><strong>base case(s)</strong>, in which the problem is simple enough to be
solved directly, and 
<li><strong>recursive case(s)</strong>.  A recursive case has three components: 

<ol>
<li><strong>divide</strong> the problem into one or more simpler or smaller
parts of the problem, 
<li><strong>call</strong> the function (recursively) on each part, and 
<li><strong>combine</strong> the solutions of the parts into a solution for
the problem.
</ol>

</ul>
Depending on the problem, any of these may be trivial or complex.
</p>

<p>
Here are some exercises to help you learn recursion.  Although
recursion may not be the best way to write some of these functions,
it is good practice.
<ol>
<li>Write a function to compute the sum of all numbers from 1 to n.

<li>Write a function to compute 2 to the
power of a non-negative integer.

<li>Write a function to compute any number 
to the power of a non-negative integer.

<li>Write a function to compute the nth {Fibonacci number}.

<li>Write a function to compute the greatest common divisor (GCD) of
two positive integers with {Euclid's algorithm}.

<li>Write a function to compute GCD based on
the following relations
<ul>
<li>GCD(2m, 2n) = 2 * GCD(m, n)
<li>GCD(2m, 2n+1) = GCD(m, 2n+1)
<li>GCD(2m+1, 2n+1) = GCD(n-m, 2m+1)  if m &lt; n
<li>GCD(m, m) = m
</ul>
(after "ML for the Working Programmer", page 49).

<li>Write a function to compute any number to the power of a non-negative
integer using {repeated squaring}, that is,
$x<sup>2n</sup> = (x<sup>n</sup>)<sup>2</sup>$ and
$x<sup>2n+1</sup> = x \times x<sup>2n</sup>$.
(after "ML for the Working Programmer", pages 45 and 46).

<li>Write a function to compute the integer square root of a
non-negative integer using square_root(4x) = 2*square_root(x).
(after "ML for the Working Programmer", pages 48 and 49).

</ol>

# further explanation (pure HTML)
@LINKS=
# John Morris morris@ee.uwa.edu.au
See <a
href="http://www.cs.auckland.ac.nz/software/AlgAnim/dynamic.html#fibonacci">dynamic
algorithms</a> for an example of one trade-off between speed and
clarity for a recursive vs. an iterative implementation.  
See the notes for the 
<a href="http://xw2k.nist.gov/dads/HTML/towersOfHanoi.html">towers of
Hanoi</a> puzzle for another recursive and iterative solution.
Bro. David Carlson's
<a
href="http://cis.stvincent.edu/html/tutorials/swd/recur/recur.html">tutorial
and code (C++)</a> with examples for factorial, Fibonacci, quicksort,
and merge sort.
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB, PR
# end $Source: /home/black/Workspace/dads/Terms/RCS/recursion.trm,v $
