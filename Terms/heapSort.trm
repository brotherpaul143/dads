# *created  "Wed Sep 16 08:52:18 1998" *by "Paul E. Black"
# *modified "Fri Dec 17 12:23:57 2004" *by "Paul E. Black"

# $Log: heapSort.trm,v $
# Revision 1.9  2004/12/17 17:23:57  black
# Make more XHTML compliant.
#
# Revision 1.8  2004/11/30 15:14:44  black
# Note similarity between heapsort and selection sort.
#
# Revision 1.7  2004/11/29 21:10:36  black
# Add Floyd's Treesort 3 to the BIB and explain the difference.
#
# Revision 1.6  2004/09/29 15:10:29  black
# Remove blank line at the end.
#
# Revision 1.5  2004/07/27 17:50:03  black
# Link to Lang's Heapsort analysis, explanation, and impl. page.
#
# Revision 1.4  2004/06/17 16:33:11  black
# Refine XREFS into IMA, etc.  Refer to article comparing sort routines.
#
# Revision 1.3  2004/04/06 18:46:10  black
# Improve bib reference.  Improve grammar.  Add RCS keywords.
#

# entry name
@NAME=heapsort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, search, sort, graph, combin(atorial), etc.
@AREA=sort
# the definition
@DEFN=A {sort} algorithm that builds a {heap}, then
repeatedly extracts the maximum item.  Run time is 
{O(n log n)#big-O notation}.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=heap sort

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={in-place sort}
# Specialization: "... is a kind of me."
@VARIANT={adaptive heap sort}, {smoothsort}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME={heap}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={selection sort}

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
<strong>Robert W. Floyd</strong>, <em>Algorithm 245 Treesort 3</em>,
CACM, 7(12):701, December 1964.<br>
<strong>J. W. J. Williams</strong>, <em>Algorithm 232 Heapsort</em>,
CACM, 7(6):378-348, June 1964.<br>
Although Williams clearly stated the idea of heapsort, Floyd gave a
complete, efficient implementation nearly identical to what we use
today.

# any notes.  these will not be printed in the final dictionary
@NOTES=Heapsort can be seen as a variant of {selection sort} in which
sorted items are arranged (in a {heap}) to quickly find the next item.

# further explanation (pure HTML)
@LINKS=<a
href="http://www.cs.ubc.ca/spider/harrison/Java/sorting-demo.html">demonstration</a>.
<a href="http://www.azillionmonkeys.com/qed/sort.html">Comparison of
quicksort, heapsort, and merge sort</a> on modern processors.

# implementation(s) (pure HTML)
@IMPL=
Lang's <a
href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/heap/heapen.htm">definitions,
explanations, diagrams, Java applet, and pseudo-code (C)</a>,
<a
href="http://www.cs.ubc.ca/spider/harrison/Java/HeapSortAlgorithm.java">(Java)</a>,
<a href="http://www2.hawaii.edu/~copley/665/HSMain.html">(Java)</a>,
Worst-case behavior <a
href="http://www.auto.tuwien.ac.at/~blieb/woop/heapsort.html">annotated
for real time (WOOP/ADA)</a>, including bibliography,
<a href="http://www.markcrocker.com/rexxtipsntricks/rxtt28.2.0472.html">(Rexx)</a>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/heapSort.trm,v $
