# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Mon Nov  2 12:26:53 2020" *by "Paul E. Black"

# $Log: stringMatching.trm,v $
# Mon Nov  2 12:26:58 2020  Paul E. Black
# Update IMPL URL for Algorist.com to use https
# 
# Mon Jun 24 15:08:39 2019  Paul E. Black
# Update Strmat URL
# 
# Fri Jul 20 16:37:49 2018  Paul E. Black
# Add strsrch as a VARIANT
# 
# Thu Jun  9 09:51:35 2016  Paul E. Black
# IMA search
# 
# Tue Sep  2 08:47:35 2014  Paul E. Black
# Change stonybrook.edu URL in IMPL
# 
# Mon Jul 28 16:25:08 2014  Paul E. Black
# update URL for Skienas Stony Brook Algorithm Respository IMPLs
# 
# Revision 1.7  2005/05/05 13:35:49  black
# grammatical improvement
#
# Revision 1.6  2005/05/05 13:35:12  black
# Add Aho-Corasick.
#
# Revision 1.5  2004/12/17 17:28:47  black
# Make more XHTML compliant.
#
# Revision 1.4  2004/05/03 16:21:21  black
# Move Ratcliff/Obershelp to string matching with errors.
#
# Revision 1.3  2004/04/16 12:38:39  black
# Change phonetic matching to phonetic coding.
#
# Revision 1.2  2004/04/09 20:19:27  black
# Refine XREFS into IMA, etc.  Refer to phonetic matching.

# entry name
@NAME=string matching
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=P
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=search
# the definition
@DEFN=The problem of finding occurrence(s) of a {pattern} string 
within another
{string} or body of text.  There are many different {algorithms} for
efficient searching.
# comma-sep list of pure names that this is Also Known As.
@AKA=exact string matching, string searching, text searching
# other cross-listings solely for the web, such as word or spelling variants
@WEB=string search, text match

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={search}
# Specialization: "... is a kind of me."
@VARIANT={brute force string search}, {Knuth-Morris-Pratt algorithm}, 
{Boyer-Moore}, {Zhu-Takaoka}, {quick search}, 
{deterministic finite automata string search}, 
{Karp-Rabin}, {Shift-Or}, {Aho-Corasick}, {Smith algorithm},
{strsrch}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={string matching with errors}, 
{optimal mismatch}, {phonetic coding},
{string matching on ordered alphabets},
{suffix tree}, {inverted index}

# any notes.  these will not be printed in the final dictionary
@NOTES=For large collections that are searched often, it may be far
faster, though more complicated, to start with an {inverted index}.
The name ``exact string matching'' is in contrast to {string matching
with errors}.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
Christian Charras' and Thierry Lecroq's <a
href="http://www-igm.univ-mlv.fr/~lecroq/string/">Exact String
Matching Algorithms (C)</a>,
<a
href="https://algorist.com/problems/String_Matching.html">(C++
and Pascal)</a>,
<a href="https://web.cs.ucdavis.edu/~gusfield/strmat.html">Strmat
(C)</a> - a collection of string matching and pattern discovery
programs,
<a
href="http://gams.nist.gov/serve.cgi/Module/IMSLM/IIDEX/4039">(Fortran)</a>,
<a
href="http://gams.nist.gov/serve.cgi/Module/IMSLS/IIDEX/4736">(Fortran)</a>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/stringMatching.trm,v $
