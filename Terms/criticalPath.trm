# *created  "Thu Sep 30 10:39:36 1999" *by "Paul E. Black"
# *modified "Mon Apr 19 14:36:23 2004" *by "Paul E. Black"

# $Log: criticalPath.trm,v $
# Revision 1.3  2004/04/19 18:36:29  black
# Use the standard English plural of vertex
#
# Revision 1.2  2003/10/16 17:01:42  black
# Use a more regular plural of vertex
#

# entry name
@NAME=critical path problem
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=P
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=graph
# the definition
@DEFN=Find the longest {path} from any {source} to any {sinks} in a
{directed acyclic graph} which has weights, or numeric values, on
{vertices#vertex}.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=

# any notes.  these will not be printed in the final dictionary
@NOTES=This can be solved with a variant of the {DAG shortest paths}
algorithm by assigning an initial distance of negative infinity
($-\infty$), updating the distance and predecessor if $dist(v) +
weight(u) &gt; dist(u)$, and recording the greatest distance found so
far.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /export/home/black/DADS/Terms/RCS/criticalPath.trm,v $
