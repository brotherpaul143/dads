# *created  "Tue Sep 22 17:06:56 1998" *by "Paul E. Black"
# *modified "Mon Aug  9 13:25:22 2004" *by "Paul E. Black"

# $Log: haltingProblem.trm,v $
# Revision 1.2  2004/08/09 17:30:48  black
# Add BIB entry, a few notes, and a LINK to Wikipedia's much longer
# entry.  Add RCS keywords.
#

# entry name
@NAME=halting problem
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=P
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=theory
# the definition
@DEFN=No program can ever be written to determine whether any
arbitrary program will halt.  Since many questions can be recast to
this problem, we can conclude that some programs are absolutely
impossible, although
{heuristic} or partial solutions are possible.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={undecidable problem}, {uncomputable problem}, {algorithm},
{Turing machine}

# bib refs, eg, to defining article (pure HTML).  printed within <P>..</P>
@BIB=
<strong>Alan Turing</strong>, <em>On computable numbers, with an
application to the Entscheidungsproblem</em>, Proceedings of the
London Mathematical Society, Series 2, vol 42 (1936-37) pages 230-265.

# any notes.  these will not be printed in the final dictionary
@NOTES=This is an informal wording of Turing's proof.  Please do not
refer to this page if you claim to refute his proof.
# further explanation (pure HTML)
@LINKS=Wikipedia's 
<A href="http://en.wikipedia.org/wiki/Halting_problem">extensive
entry</A> including related problems and a link to Turing's original
paper.
# implementation(s) (pure HTML)
@IMPL=
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/haltingProblem.trm,v $
