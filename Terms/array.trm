# *created  "Fri Sep 18 09:53:42 1998" *by "Paul E. Black"
# *modified "Mon Aug 21 09:26:54 2006" *by "Paul E. Black"

# $Log: array.trm,v $
# Revision 1.9  2006/09/11 14:04:00  black
# Update tutorial IMPL URL
#
# Revision 1.8  2005/11/03 15:34:01  black
# XREF matrix
#
# Revision 1.7  2005/10/27 13:59:04  black
# Update John Morris' URL
#
# Revision 1.6  2005/01/13 20:02:22  black
# NOTE Knuth's algorithm on fast array access and LINK to Elaan write-up.
#
# Revision 1.5  2005/01/12 14:21:45  black
# Separate IMPLs with a period.
#
# Revision 1.4  2004/12/17 17:27:42  black
# Make more XHTML compliant.
#
# Revision 1.3  2004/03/18 15:53:24  black
# Reference 1- and 0-based indexing
#
# Revision 1.2  2004/03/08 15:29:18  black
# Refine XREFS into IMA, etc.  Add reference to sorted array.
#

# entry name
@NAME=array
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, numeric, search, sort, graph, combin(atorial)
@AREA=basic
# the definition
@DEFN=A set of items which are randomly accessible by numeric index.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT={dynamic array}, {sorted array}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME={array index}, {one-based indexing}, {0-based indexing}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={associative array}, {matrix}

# any notes.  these will not be printed in the final dictionary
@NOTES=An unordered array must be searched with a {linear search}.
Average search time may be improved using a {move-to-front heuristic}
in some cases.
An {external index}, such as a {hash table} or {inverted index} may
help make an {array search} quicker and speed overall processing if
the array is not changed often.
If the array is kept sorted, a {binary search} or {interpolation
search} is faster.
</p>

<p>
Inserting into an array takes ${\Theta}(n)$ time.  If that's too slow,
use a {balanced tree} or a {linked list}.  
Knuth use a balanced tree with a RANK field which supports 
${\Theta}(\log n)$ access by index and ${\Theta}(\log n)$ insert and
delete.
<a href="../terms.html#Knuth98">[Knuth98, 3:471, Sect. 6.2.3]</a>

# further explanation (pure HTML)
@LINKS=
Jennifer E. Elaan's
<a href="http://caladan.nanosoft.ca/fastarray.php">fast array
algorithm</a>, equivalent to Knuth's.
# implementation(s) (pure HTML)
@IMPL=
# John Morris morris@ee.uwa.edu.au
<a
href="http://www.cs.auckland.ac.nz/software/AlgAnim/arrays.html#arrays">(C)</a>.
Bro. David Carlson's
<a
href="http://cis.stvincent.edu/html/tutorials/swd/arrays/arrays.html">search,
access, complexity, etc. tutorial and code (C++)</a>.
<a href="http://gams.nist.gov/serve.cgi/Class/N1">Read and write
different arrays (Fortran, C++)</a>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/array.trm,v $
