# *created  "Tue Sep 15 16:57:11 1998" *by "Paul E. Black"
# *modified "Fri Aug 30 14:14:12 2002" *by "Paul E. Black"

# entry name
@NAME=Byzantine generals
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=P
# basic, search, sort, graph, combin(atorial), etc.
@AREA=basic
# the definition
@DEFN=The problem of reaching a consensus among distributed units if
some of them give misleading answers.  The original problem concerns
generals plotting a coup.  Some generals lie about whether they
will support a particular plan and what other generals told them.
What percentage of liars can a decision making {algorithm} tolerate
and still correctly determine a consensus?
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names or {cross refs} that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=Byzantine Agreement Problem, Byzantine generals problem
# comma-separated list of cross references, i.e., See also ...
@XREFS=
# bib refs, eg, to defining article (pure HTML).  printed within <P>..</P>
@BIB=
<strong>Leslie Lamport, Robert Shostak and Marshall Pease</strong>, 
<em>The Byzantine Generals Problem</em>,
ACM Transactions on Programming Languages and Systems, 4(3):382-401,
July 1982.
# any notes.  these will not be printed in the final dictionary
@NOTES=One
variant is: suppose two separated generals will win if both attack at
the same time and lose if either attacks alone, but messengers may be
captured.  If one decides to 
attack, how can that general be sure that the message has reached the
other general and the other general will attack, too?
# further explanation (pure HTML)
@LINKS=Summary of <A
href="http://www.cs.wisc.edu/~sschang/OS-Qual/reliability/byzantine.htm">article
by Lamport, Shostak, and Pease</A>.
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end
