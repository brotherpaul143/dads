# *created  "Fri Sep 18 12:52:42 1998" *by "Paul E. Black"
# *modified "Mon Jan 12 10:06:27 2004" *by "Paul E. Black"

# $Log: priorityque.trm,v $
# Revision 1.3  2004/01/12 15:15:43  black
# Refine XREFS to IMA, etc.  Add Darius Bacon's implementation.
#
# Revision 1.2  2003/10/14 17:00:22  black
# Update links since Lee Killough's site is running well.  Add RCS keyword.
#

# entry name
@NAME=priority queue
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=basic
# the definition
@DEFN=An {abstract data type} to efficiently support finding
the item with the highest priority across a series of
operations.  The basic operations are: insert, find-minimum (or
maximum), and delete-minimum (or maximum).  Some implementations also
efficiently
support join two priority queues ({meld}), delete an arbitrary item,
and increase the priority of a item (decrease-key).

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={abstract data type}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN={best-first search}
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={discrete interval encoding tree}, {heap},
{hash heap}, {Fibonnaci heap}, {calendar queue}, {queue}

# any notes.  these will not be printed in the final dictionary
@NOTES=It can be implemented efficiently with a {heap}.
After LK.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
Links to <A href="http://www.leekillough.com/heaps/">implementations,
dozens of papers, introductory material, etc.</A>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/priorityque.trm,v $
