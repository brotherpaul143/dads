# *created  "Fri Sep 18 12:52:42 1998" *by "Paul E. Black"
# *modified "Fri Dec 17 12:24:30 2004" *by "Paul E. Black"

# $Log: priorityque.trm,v $
# Revision 1.7  2004/12/17 17:24:30  black
# Make more XHTML compliant.
#
# Revision 1.6  2004/09/22 12:57:38  black
# Correct spelling of Fibonacci
#
# Revision 1.5  2004/04/06 18:47:26  black
# Add formal definition, adapted from queue.
#
# Revision 1.4  2004/02/19 18:08:00  black
# Add IMIN Dijkstra's algo and move heap and Fib heap to INME.
#
# Revision 1.3  2004/01/12 15:15:43  black
# Refine XREFS to IMA, etc.  Add Darius Bacon's implementation.
#
# Revision 1.2  2003/10/14 17:00:22  black
# Update links since Lee Killough's site is running well.  Add RCS keyword.
#

# entry name
@NAME=priority queue
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=basic
# the definition
@DEFN=An {abstract data type} to efficiently support finding
the item with the highest priority across a series of
operations.  The basic operations are: insert, find-minimum (or
maximum), and delete-minimum (or maximum).  Some implementations also
efficiently
support join two priority queues ({meld}), delete an arbitrary item,
and increase the priority of a item (decrease-key).
# formal definition or {cross reference} to an entry
@FORML=The operations new(), insert(v, PQ), find-minimum or min(PQ),
and delete-minimum or dm(PQ)
may be defined with {axiomatic semantics} as follows.
<ol>
<li>new() returns a priority queue
<li>min(insert(v, new())) = v
<li>dm(insert(v, new())) = new()
<li>min(insert(v, insert(w, PQ))) = if priority(v) &lt;
	priority(min(insert(w, PQ))) then v else 
	min(insert(w, PQ))
<li>dm(insert(v, insert(w, PQ))) = if priority(v) &lt;
	priority(min(insert(w, PQ))) then insert(w, PQ)
	else insert(v, dm(insert(w, PQ)))
</ol>
where PQ is a priority queue, v and w are items, and priority(v) is
the priority of item v.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={abstract data type}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN={best-first search}, {Dijkstra's algorithm}
# Aggregate child: "... is a part of or used in me."
@INME={heap}, {Fibonacci heap}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={discrete interval encoding tree},
{hash heap}, {calendar queue}, {queue}

# any notes.  these will not be printed in the final dictionary
@NOTES=It can be implemented efficiently with a {heap}.
After LK.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
Links to <a href="http://www.leekillough.com/heaps/">implementations,
dozens of papers, introductory material, etc.</a>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/priorityque.trm,v $
