# *created  "Wed Feb  3 09:27:25 1999" *by "Paul E. Black"
# *modified "Wed Sep 30 13:20:51 2009" *by "Paul E. Black"

# $Log: linearProbingSort.trm,v $
# Revision 1.4  2009/09/30 17:20:52  black
# Update domain name of Raul Baeza's Handbook of Algorithms and Data Structures
#
# Revision 1.3  2006/03/27 20:25:06  black
# fix grammatical error
#
# Revision 1.2  2004/12/17 15:34:18  black
# Add initial def'n and notes.  Refine XREFS into IMA, etc.  Linear
# probing (hashing) is INME.  Make more XHTML compliant.  Add RCS
# keywords.
#

# entry name
@NAME=linear probing sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=sort
# the definition
@DEFN=Distribute each of $n$ elements to one of $m$ locations
in an array ($m&gt;n$) based on an interpolation of the element's
{key}.  In case of {collisions}, put the element in the next empty
location.  The array has extra space at the end for overflow.  The
second pass packs the elements back into an array of size $n$.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={distribution sort}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME={linear probing}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=

# any notes.  these will not be printed in the final dictionary
@NOTES=The sort may fail if the overflow is exceeded.
</p>

<p>
The distribution phase may be seen as putting the elements in a
{linear probing} {hash table} using the interpolation function as the
{hash function}.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=<a
href="http://www.dcc.chileedu.com/~rbaeza/handbook/algs/4/417.sort.c">(C
and Pascal)</a>.
# GBY91 pp 168-170

# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/linearProbingSort.trm,v $
