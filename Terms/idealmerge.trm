# *created  "Thu Mar  4 13:19:03 1999" *by "Paul E. Black"
# *modified "Fri Dec 17 12:04:41 2004" *by "Paul E. Black"

# $Log: idealmerge.trm,v $
# Revision 1.2  2004/12/17 17:04:41  black
# Refine XREFS into IMA, etc.  Add RCS keywords.
#

# entry name
@NAME=ideal merge
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic theory numeric search sort tree graph combin(atorial) para(llel) crypt
@AREA=sort
# the definition
@DEFN={Merge} $n$ sorted streams into one output stream.
To begin the streams are sorted by the value of the head element of
each.
Then the head of the first stream, which is the least since the
streams were sorted, is removed and
written to the output.  That stream is inserted back into the list of
streams according to its new head.  Taking the head of the first
stream and reinserting that stream is repeated until all elements have
been processed.
Using {binary search} to find the new place to insert a
stream, the execution time is {$\Theta(M \log N)$#\Theta}
where $M$ is the total number of elements.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={simple merge}, {optimal merge}, {UnShuffle sort}, {merge sort}

# any notes.  these will not be printed in the final dictionary
@NOTES=
Ideal merge was first mentioned by Art S. Kagel as 
part of the implementation of the UnShuffle sort.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=ASK
# end $Source: /home/black/Workspace/dads/Terms/RCS/idealmerge.trm,v $
