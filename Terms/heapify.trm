# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Thu Apr  6 14:59:28 2023" *by "Paul E. Black"

# $Log: heapify.trm,v $
# Revision 1.2  2004/12/17 17:04:37  black
# Refine XREFS into IMA, etc.  Add RCS keywords.
#

# entry name
@NAME=heapify
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=tree
# the definition
@DEFN=Rearrange a {heap} to maintain the {heap property}, that is,
the {key} of the {root} {node} is more extreme (greater or less) than
or equal to the keys of its {children#child}.  If the root node's key
is not more extreme, swap it with the most extreme child key,
then {recursively#recursion} heapify that child's subtree.  The child
subtrees must be heaps to start.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN={heapsort}
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={binary heap}, {build-heap}

# any notes.  these will not be printed in the final dictionary
@NOTES=For an array implementation, heapify takes
{O($\log<sub>2</sub> n$)#big-O notation} or O($h$) time under the
comparison model,
where $n$ is the number of nodes and $h$ is the {height}.
# further explanation (pure HTML)
@LINKS=
An
<a href="https://www.youtube.com/watch?v=H5kAcmGOn4Q&t=163">illustration</a>
of heapify.
<br />
<iframe src="https://www.youtube.com/embed/H5kAcmGOn4Q?start=163" frameborder="0" allowfullscreen></iframe>
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/heapify.trm,v $
