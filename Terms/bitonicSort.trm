# *created  "Wed Jun  4 12:59:25 2003" *by "Paul E. Black"
# *modified "Wed Jan 26 16:52:11 2005" *by "Paul E. Black"

# $Log: bitonicSort.trm,v $
# Revision 1.4  2005/01/26 21:56:37  black
# Improve definition.  Add reference for Knuth's Algo M.  Add WEB name
# of merge exchange sort.  NOTE that this is an oblivious sort, and give
# example.
#
# Revision 1.3  2005/01/04 16:08:18  black
# Remove eisenb URL - account is gone from server.
#
# Revision 1.2  2004/12/17 16:48:34  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#

# entry name
@NAME=bitonic sort
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=para
# the definition
@DEFN=Compare, and swap if necessary, pairs of elements in parallel.
Subsets are sorted then merged.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=Batcher sort
# other cross-listings solely for the web, such as word or spelling variants
@WEB=merge exchange sort, Batcher's sort

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=<strong>K. E. Batcher</strong>, <em>Sorting Networks and their
Applications</em>, Proc. AFIPS Spring Joint Computer Conference,
32:307-314, 1968.
# any notes.  these are not printed in the final dictionary
@NOTES=This takes {O((log n)<sup>2</sup>/2)#big-O notation} stages
(or steps) with $n/2$ comparators at each stage.
</p>

<p>
This sorts increasingly larger intermingled subsets, somewhat like
{Shell sort}, and merges subsets, like {merge sort}.
</p>

<p>
Elements are compared and swapped in a fixed (oblivious) schedule, so
this may be implemented with only conditional swaps.  Here is a
Batcher sort for four elements:
<pre>
    compareAndSwap(0, 1);<br>
    compareAndSwap(2, 3);<br>
    compareAndSwap(0, 2);<br>
    compareAndSwap(1, 3);<br>
    compareAndSwap(1, 2);
</pre>
where compareAndSwap(i,j) is if (a[i] &lt; a[j]) Swap(a[i], a[j]).
</p>

<p>
<a
href="http://www.csam.iit.edu/~sun/note546/node34.html">definitions
and analysis</a>
</p>

<p>
This is Knuth's <a href="../terms.html#Knuth98">Algorithm M [Knuth98,
3:111, Sect. 5.2.2]</a> .
# implementation(s) (pure HTML)
@IMPL=
<a
href="http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/bitonic/bitonicen.htm">explanation,
analysis, bibliography, etc. (Java)</a>.
<a
href="http://www.cag.lcs.mit.edu/streamit/results/bitonic/code/c/">reference
source code (C)</a>
# further explanation (pure HTML)
@LINKS=
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/bitonicSort.trm,v $
