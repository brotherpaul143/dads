# *created  "Mon Aug 30 12:43:09 1999" *by "Paul E. Black"
# *modified "Mon Mar 17 14:52:48 2003" *by "Paul E. Black"

# entry name
@NAME=k-ary Huffman encoding
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=crypt
# the definition
@DEFN=A minimal variable-length encoding based on the frequency of
each character.  Similar to a {Huffman encoding}, but joins $k$ trees
into a {k-ary tree} at each step, and uses $k$ symbols for each level.
# comma-separated list of {cross references}.  printed as "See also ..."
@XREFS=
# any notes.  these will not be printed in the final dictionary
@NOTES=The encoding at each stage has k symbols, not just 2 (0 or 1)
like traditional Huffman.  If k is a power of two, that is,
$k=2<sup>n</sup>$, every symbol can be represented by n bits.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# John Morris morris@ee.uwa.edu.au
<A
href="http://ciips.ee.uwa.edu.au/~morris/Year2/PLDS210/huffman.html">animation
which counts characters, finds the code, encodes, and decodes
(Java)</A>, 
# author's initials (see authors.data)
@AUTHOR=PEB
# end
