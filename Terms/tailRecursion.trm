# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Tue Jan 28 12:56:59 2003" *by "Paul E. Black"

# entry name
@NAME=tail recursion
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=T
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=basic
# the definition
@DEFN=A special form of {recursion} where the last operation of a
function is a recursive call.  The recursion may be optimized
away by executing the call in the current stack frame and returning
its result rather than creating a new stack frame.
# comma-separated list of {cross references}, i.e., See also ...
@XREFS={collective recursion}, {iteration}
# any notes.  these will not be printed in the final dictionary
@NOTES=Although it may not save a lot of run time, it can save a lot
of memory.
The following finds the maximum value in a list.
<pre>
int max_list(list l, int max_so_far)<br>
\{<br>
    if (null == l) \{<br>
        return max_so_far;<br>
    }<br>
<br>
    if (max_so_far < head(l)) \{<br>
        return max_list(tail(l), head(l));<br>
    } else \{<br>
        return max_list(tail(l), max_so_far);<br>
    }<br>
}
</pre>

<P>
The return value of the current invocation is just the return value of
the recursive call.  A compiler could optimize it something like
the following so it doesn't allocate new space for l and max_so_far on
each invocation or tear down the stack on the returns.
<pre>
<br>
int max_list(list l, int max_so_far)<br>
\{<br>
  for (;;) \{<br>
    if (null == l) \{<br>
        return max_so_far;<br>
    }<br>
<br>
    if (max_so_far < head(l)) \{<br>
        max_so_far = head(l);<br>
        l = tail(l);<br>
    } else \{<br>
        max_so_far = max_so_far;<br>
        l = tail(l);<br>
    }<br>
  }<br>
}
</pre>
Now there is no need to allocate new memory for the parameters or get
rid of it during the returns, so this will run faster.  This
code transformation is simple enough to do by hand in this example,
but it is much harder for complex {recursive} data structures, such as
{trees}.

<P>
Of course, if a compiler is good enough to find and rewrite tail
recursion, it will also collapse the loop test, eliminate the
assignment of max_so_far to itself, and hoist the assignment of l
after the test giving the following:
<pre>
<br>
int max_list(list l, int max_so_far)<br>
\{<br>
  while (null != l) \{<br>
    if (max_so_far < head(l)) \{<br>
        max_so_far = head(l);<br>
    }<br>
    l = tail(l);<br>
  }<br>
  return max_so_far;<br>
}
</pre>
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end
