# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Fri Dec 17 11:52:44 2004" *by "Paul E. Black"

# $Log: knapsackProblem.trm,v $
# Revision 1.5  2004/12/17 16:52:44  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#
# Revision 1.4  2003/09/22 19:33:14  black
# Improve NOTES again.
#
# Revision 1.3  2003/09/22 19:18:20  black
# Improve NOTE.
#
# Revision 1.2  2003/09/22 19:16:06  black
# Add GAMS as an implementation.
#

# entry name
@NAME=knapsack problem
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=P
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=combin
# the definition
@DEFN=Given items of different values and volumes, find the
most valuable set of items that fit in a knapsack of fixed volume.
# formal definition or {cross reference} to an entry
@FORML=There is a knapsack of capacity $c &gt; 0$ and $N$ items.  Each
item has value $v<sub>i</sub> &gt; 0$ and
weight $w<sub>i</sub> &gt; 0$.  
Find the selection of items ($\delta<sub>i</sub> = 1$ if selected, $0$
if not) that fit,
$\sum<sub>i=1</sub><sup>N</sup> \delta<sub>i</sub>w<sub>i</sub> \leq c$,
and the total value,
$\sum<sub>i=1</sub><sup>N</sup> \delta<sub>i</sub>v<sub>i</sub>$,
is maximized.
# comma-sep list of pure names that this is Also Known As.
@AKA=0-1 knapsack problem, binary knapsack problem
# other cross-listings solely for the web, such as word or spelling variants
@WEB=BKP

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={fractional knapsack problem}, {unbounded knapsack problem}, 

{bin packing problem}, {cutting stock problem}
# any notes.  these will not be printed in the final dictionary
@NOTES=Also called 0-1 or binary knapsack (each item may be taken (1)
or not (0)), in contrast to the {fractional
knapsack problem}.  Also called bounded knapsack (BKP) because there
are a limited number of items, in contrast to the {unbounded knapsack
problem}.
The {decision problem} is, given items of
different values and volumes and a knapsack, is there a subset that
exceeds a certain value?  The decision problem is {NP-complete}.
# further explanation (pure HTML)
@LINKS=How to <a
href="http://www.ceng.metu.edu.tr/~leventc/C567/lectures/chapter4_3_1.html">construct
an optimal solution</a> using 
<a href="http://www.nist.gov/dads/HTML/dynamicprog.html">dynamic
programming</a>.
# implementation(s) (pure HTML)
@IMPL=<a
href="http://www.cs.sunysb.edu/~algorith/files/knapsack.shtml">(Fortran
and Pascal)</a>.
GAMS <a href="http://gams.nist.gov/serve.cgi/Class/G2c3/">Class G2c3
(Fortran)</a>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/knapsackProblem.trm,v $
