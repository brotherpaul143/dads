# *created  "Mon Nov  1 10:07:45 1999" *by "Paul E. Black"
# *modified "Thu Nov 13 11:42:40 2008" *by "Paul E. Black"

# $Log: bingosort.trm,v $
# Revision 1.4  2008/11/13 16:44:07  black
# Correct the DEFN from the book.  IMA selection sort.  make the BIB
# reference more precise.  Add NOTEs on the origin of the name and the
# complexity.
#
# Revision 1.3  2008/10/31 16:21:46  black
# Add known BIB reference (and the table of contents on the web)
#
# Revision 1.2  2004/12/17 17:02:30  black
# Refine XREFS into IMA, etc.  Add RCS keywords.
#

# entry name
@NAME=bingo sort
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=sort
# the definition
@DEFN=A variant of {selection sort} that orders items by first
finding the least value, then repeatedly moving all items with that
value to their final location and find the least value for the next
pass.  This is more efficient than selection sort if there are many
duplicate values.
# per Kevin <HMYINT@aol.com> 30 Oct 1999
# http://www.ececs.uc.edu/~jpaul/contents.html (accessed Oct 2008)

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={selection sort}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={counting sort}

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
<strong>Kenneth A. Berman</strong> and <strong>Jerome L. Paul</strong>, 
<em>Fundamentals of Sequential and Parallel Algorithms</em>,
Sect. 4.6, pages 137-139, PWS Publishing Co., Boston, MA, 1996.

# any notes.  these will not be printed in the final dictionary
@NOTES=To see why it is more efficient, consider one value.  Selection
sort does one pass through remaining items for each item moved.  Bingo
sort does one pass for each value (not item) and moves every item with
that value to its final location.
</p>

<p>
The name refers to the exclamation, Bingo!, when an item with the
right value is found.
</p>

<p>
The {best case} complexity is {$\Theta(n+m<sup>2</sup>)$#\Theta},
where $n$ is the number of items and $m$ is the number of unique
values.
The {worst case} complexity, which is the same as the {average case}
complexity, is $\Theta(nm)$.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/DADS/Terms/RCS/bingosort.trm,v $
