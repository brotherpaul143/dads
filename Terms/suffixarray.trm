# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Mon Nov  2 12:27:44 2020" *by "Paul E. Black"

# $Log: suffixarray.trm,v $
# Mon Nov  2 12:27:48 2020  Paul E. Black
# Update IMPL URL for Algorist.com to use https
# 
# Mon Aug 12 09:47:31 2019  Paul E. Black
# Add Skiena algorist IMPL
# 
# Wed Nov 16 16:54:51 2016  Paul E. Black
# Change "one-based indexing" to "1-based indexing".
# 
# Revision 1.6  2007/12/07 19:49:16  black
# Expand DEF'N that suffix array allows fast substring search.  Change
# example to 1-based indexing.  XREF inverse suffix array.  IMA array,
# not an ordered array (the things I point to are ordered, but not the
# elements themselves).  Improve wording on NOTE about construction time.
#
# Revision 1.5  2007/10/30 21:38:34  black
# add BIB citation and construction algorithm citation.  Clarify DEFN a little.
#
# Revision 1.4  2004/12/17 17:28:51  black
# Make more XHTML compliant.
#
# Revision 1.3  2004/03/18 15:55:21  black
# Cross reference new 0-based indexing.
#
# Revision 1.2  2004/03/10 17:42:39  black
# Correct the note on construction time.  Refine XREFS into IMA,
# etc. and add more cross references.  Add an example.
#

# entry name
@NAME=suffix array
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=search
# the definition
@DEFN=An {array} of all starting positions of {suffixes} of a {string}
arranged in {lexicographical order}. This allows a {binary search} or
fast substring search.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={array}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME={suffix}, {binary search}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={suffix tree}, {inverse suffix array}, {suffix automaton}

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
<strong>Udi Manber and Gene Myers</strong>, 
<em>Suffix Arrays: A New Method for On-Line String Searches</em>,
SIAM Journal on Computing 22(5):935-948, 1993.

# any notes.  these will not be printed in the final dictionary
@NOTES=
Consider the string "good".  In lexicographical order, the suffixes
are "d", "good", "od", and "ood".
In {1-based indexing}, the suffix array is [4, 1, 3, 2].  (For
convenience, a special character is usually appended to the string.)
</p>

<p>
A suffix array can be constructed in 
{$O(n \log n)$#big-O notation} time, where $n$ is the length of the
string, by sorting the suffixes, or in
{$O(n)$#big-O notation} time by building the {suffix tree}, then doing
a {depth-first search}.
Many other algorithms build suffix arrays quickly.  
For a comprehensive survey, see
<strong>Simon J. Puglisi, W. F. Smyth, and Andrew H. Turpin</strong>, 
<em>A taxonomy of suffix array construction algorithms</em>,
ACM Computing Surveys, 39(2) Article #4, 2007.
</p>

<p>
From Algorithms and Theory of Computation Handbook, page 11-23,
Copyright &copy; 1999 by CRC Press LLC.
Appearing in the Dictionary of Computer Science, Engineering and
Technology, Copyright &copy; 2000 CRC Press LLC.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
Steven Skiena's
<a
href="https://algorist.com/problems/Suffix_Trees_and_Arrays.html">Suffix
Trees and Arrays (C++, Python, and Java)</a>.
# author's initials
@AUTHOR=CRC-A
# end $Source: /home/black/Workspace/dads/Terms/RCS/suffixarray.trm,v $
