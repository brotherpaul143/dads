# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Mon Mar  7 09:03:53 2005" *by "Paul E. Black"

# $Log: divideAndConquer.trm,v $
# Revision 1.5  2005/03/07 14:04:23  black
# Improve wording of definition and explanation of why binary search is
# divide-and-conquer.
#
# Revision 1.4  2005/01/11 20:56:55  black
# Remove leading redundant phrase in DEFN.  Improve the rest of the
# definition.
#
# Revision 1.3  2005/01/03 21:59:04  black
# Remove notes which are no longer accessible.
#
# Revision 1.2  2004/12/17 16:49:50  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#

# entry name
@NAME=divide and conquer
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=T
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=basic
# the definition
@DEFN=Solve a problem, either directly
because solving that instance is easy (typically, because the instance
is small) or by <em>dividing</em> it into two or more smaller
instances.  Each of these smaller instances is 
{recursively#recursion} solved, and the solutions are combined to
produce a solution for the original instance.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=

# any notes.  these will not be printed in the final dictionary
@NOTES=The technique is named "divide and conquer" because a
problem is conquered by dividing it into several smaller problems.
</p>

<p>
This technique yields elegant, simple and quite often very efficient
algorithms.  Well-known examples include {heapify},
{merge sort}, {quicksort}, Strassen's fast matrix multiplication,
the Fast Fourier Transform (FFT), and {binary search}.  (Why is binary
search included?  The dividing part picks which segment
to search, and "the solutions are combined" trivially: take the answer
from the segment searched.  Segments not searched are "recursively
solved" by the null operation: they are ignored.)  A similar
principle is at
the heart of several important data structures such as 
{binary search tree}, {multiway search trees}, {tries}, {skip lists},
multidimensional search trees ({k-d trees}, {quadtrees}),
etc.
</p>

<p>
Here is this term in different languages:
<table>
<tr><td>French</td>	<td>diviser pour r&eacute;gner</td></tr>
<tr><td>German</td>	<td>teile und herrsche</td></tr>
<tr><td>Latin</td>	<td>divide et impera</td></tr>
<tr><td>Spanish</td>	<td>divide y vencer&aacute;s</td></tr>
<tr><td></td>	<td></td></tr>
</table>
# further explanation (pure HTML)
@LINKS=<a
href="http://www.ics.uci.edu/~eppstein/161/960118.html">Three divide
and conquer sorting algorithms</a>, as a means of <a
href="http://www.dcs.gla.ac.uk/~hwloidl/publications/Strategies/strategies_18.html">using
parallelism</a>.
# implementation(s) (pure HTML)
@IMPL=<a
href="http://www.geocities.com/Vienna/7079/src/addodd.txt">how many
odd numbers in an array? (C)</a>
# author's initials
@AUTHOR=PEB,CM
# end $Source: /home/black/Workspace/dads/Terms/RCS/divideAndConquer.trm,v $
