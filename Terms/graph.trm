# *created  "Fri Sep 18 13:26:31 1998" *by "Paul E. Black"
# *modified "Fri Dec 17 12:23:54 2004" *by "Paul E. Black"

# $Log: graph.trm,v $
# Revision 1.10  2004/12/17 17:23:54  black
# Make more XHTML compliant.
#
# Revision 1.9  2004/11/05 20:06:52  black
# Remove "dominate" - I deleted it from DADS
#
# Revision 1.8  2004/11/04 17:31:46  black
# Add digraph as VARIANT, since it is used so much.  Add new term
# "dominate" to XREFS and organize them.
#
# Revision 1.7  2004/08/13 19:00:47  black
# Link to Jung and jdsl IMPLs.
#
# Revision 1.6  2004/04/19 18:38:01  black
# Use the standard English plural of vertex
#
# Revision 1.5  2004/03/09 14:28:27  black
# Add implementation: GEF.
#
# Revision 1.4  2004/02/04 21:38:48  black
# Refine XREFS into VARIANT, etc. and add missing terms.  Add RCS Log.
# Use a more regular plural of vertex.
#
# Revision 1.3  2003/10/03 19:50:07  black
# Add another graph library
#
# Revision 1.2  2003/09/24 17:23:43  black
# Add link to Graph Template Library.  Be more specific that adjacency
# is a *binary* relation.
#

# entry name
@NAME=graph
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=graph
# the definition
@DEFN=A set of items connected by {edges}.  Each
item is called a {vertex} or node.  Formally, a graph is a
{set} of vertices and a {binary relation} between vertices, adjacency.
# formal definition or {cross reference} to an entry
@FORML=A graph G can be defined as a pair (V,E), where V is a set
of vertices, and E is a set of edges between the vertices
$E = \{(u,v) | u, v \in V}$. If the graph is undirected, the adjacency
relation defined by the edges is {symmetric}, or
$E = \{\{u,v} | u, v \in V}$ (sets of vertices rather than
ordered pairs).
If the graph does not allow {self-loops}, adjacency is {irreflexive}.
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT={directed graph}, {undirected graph}, {acyclic graph},
{directed acyclic graph},
{planar graph}, {biconnected graph}, {connected graph}, 
{complete graph}, {dense graph}, {sparse graph},
{hypergraph}, {multigraph}, {labeled graph},
{weighted graph}, 
{tree}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME={vertex}, {edge}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=Relations between vertices: {adjacent}, {self-loop},
Relations between graphs: {isomorphic}, {homeomorphic}, {dual},
{subgraph},
Properties: {diameter}, {degree},
Implementations: 
{adjacency-list representation}, {adjacency-matrix representation}
Other: {graph drawing}.

# any notes.  these will not be printed in the final dictionary
@NOTES=Graphs are so general that many other data structures, such as
{trees}, are just special kinds of graphs.
</p>

<p>
A graph is like a road map.  Cities are vertices.  Roads from
city to city are edges.  (How about junctions or branches in a road?
You could consider junctions to be vertices, too.  If you don't want
to count them as vertices, a road may connect more than two cities.
So strictly speaking you have {hyperedges} in a {hypergraph}.  If you
want to allow more than one road between each pair of cities, you have
a {multigraph}, instead.  It all
depends on how you want to define it.)
</p>

<p> 
Another way to think of a graph is as a bunch of dots connected by
lines.  Because mathematicians
stopped talking to regular people long ago, the dots in a graph are
called vertices, and the lines that connect the dots are called
edges.  The important things are edges and the vertices: the dots
and the connections between them.  The actual position of a given
dot or the length or straightness of a given line isn't at issue.
Thus the dots can be anywhere, and the lines that join them are
infinitely stretchy.  Moreover, a mathematical graph is not a
comparison chart, nor a diagram with an x- and y-axis, nor a squiggly
line on a stock report.  A graph is simply dots and lines between
them---pardon me, vertices and edges. <br>
&nbsp;&nbsp;&nbsp;&nbsp;Michael Bolton &lt;mb@michaelbolton.net&gt; 22
February 2000

# further explanation (pure HTML)
@LINKS=Journal of Combinatorics dynamic surveys DS8 and DS9 are 
<a href="http://www.combinatorics.org/Surveys/">a bibliography and
glossary of graphs</a>.
# implementation(s) (pure HTML)
@IMPL=GraphEd -- <a
href="http://www.cs.sunysb.edu/~algorith/implement/graphed/implement.shtml">Graph
Editor and Layout Program (C)</a>,
<a
href="http://www.cs.sunysb.edu/~algorith/files/graph-data-structures.shtml">graph
manipulation (C++, C, Mathematica, and Pascal)</a>,
<a
href="http://www.helsinki.fi/~jbrown/tira/overview.html">build,
traverse, top sort, etc. weighted, directed graphs (Java)</a>,
<a href="http://jgrapht.sourceforge.net/">JGraphT (Java)</a> build, traverse,
and display directed and undirected graphs,
<a href="http://gef.tigris.org/">GEF - Graph Editing Framework
(Java)</a> a library to edit and display graphs.
<a
href="http://www.cs.sunysb.edu/~algorith/files/generating-graphs.shtml">graph
generating (C, Mathematica, Pascal, C++, and Fortran)</a>,
<a href="http://infosun.fmi.uni-passau.de/GTL/">GTL - the Graph
Template Library (C)</a>,
<a href="http://www.boost.org/libs/graph/doc/">BGL - the Boost Graph
Library (C++)</a>
<a href="http://jung.sourceforge.net/">Jung (Java)</A.
<a href="www.jdsl.org/home.html">jdsl (Java)</a>.
# author's initials
@AUTHOR=PEB,PJT
# end $Source: /home/black/Workspace/dads/Terms/RCS/graph.trm,v $
