# *created  "Fri Sep 18 13:26:31 1998" *by "Paul E. Black"
# *modified "Mon Nov  2 12:23:24 2020" *by "Paul E. Black"

# $Log: graph.trm,v $
# Mon Nov  2 12:23:32 2020  Paul E. Black
# Update IMPL URL for Algorist.com to use https
# 
# Mon Nov  2 10:56:39 2020  Paul E. Black
# Change Stony Brook IMPL URL to https
# 
# Mon Apr 22 11:58:50 2019  Paul E. Black
# Update LINK to bib and glossary of graphs.  Update Boost IMPL URL.
# 
# Mon Feb 25 11:53:15 2019  Paul E. Black
# Update JGraphT IMPL URL
# 
# Mon Feb 25 11:22:49 2019  Paul E. Black
# Update Annas IMPL URL
# 
# Mon Apr 13 11:34:31 2015  Paul E. Black
# update LINK for Journal of Combinatorics surveys and also Annas IMPL
# 
# Tue Sep  2 08:41:12 2014  Paul E. Black
# Change stonybrook.edu URL in IMPL
# 
# Mon Jul 28 16:20:58 2014  Paul E. Black
# update URL for Skienas Stony Brook Algorithm Respository IMPLs
# 
# Revision 1.33  2012/12/26 14:09:12  black
# update URL for JDSL IMPL
#
# Revision 1.32  2012/07/16 13:38:47  black
# Update LINK for GTL - Graph Template Library
#
# Revision 1.31  2010/09/27 19:26:15  black
# Find alternate source for JDSL
#
# Revision 1.30  2010/08/09 13:49:19  black
# Update Boost IMPL URL
#
# Revision 1.29  2010/07/12 14:53:41  black
# add trailing slash to Annas IMPL URL
#
# Revision 1.28  2010/06/09 14:44:47  black
# update URL for Annas IMPL
#
# Revision 1.27  2010/05/10 16:56:18  black
# add bipartite graph as a VARIANT
#
# Revision 1.26  2010/04/27 17:33:12  black
# change British spelling to American.
#
# Revision 1.25  2010/04/27 14:15:24  black
# Add Annas IMPL
#
# Revision 1.24  2009/08/03 13:39:20  black
# update URL for IMPL at Simple Programming Tutorials, now Algorithms
# and Data Structures.
#
# Revision 1.23  2009/01/22 16:07:38  black
# Add Simple programming tutorials' IMPL.  Change so implementation
# XREFs are INME.
#
# Revision 1.22  2008/08/14 16:14:29  black
# Update HTML line break (br) tags to be XML/XHMTL compatible
#
# Revision 1.21  2008/04/01 18:38:35  black
# Update URL for Boost Graph Library
#
# Revision 1.20  2007/11/02 18:07:01  black
# link to node in DEFN
#
# Revision 1.19  2007/10/18 20:04:33  black
# Fix DEFN: E is a subset of edges ...  When I wrote it, I was
# prob. thinking E is a set whose members are pairs.  But it really
# means THE set of ALL pairs ...
#
# Revision 1.18  2007/10/09 15:43:05  black
# Remove Jonathan Brown's IMPL - gone.
#
# Revision 1.17  2007/09/24 12:47:04  black
# Update GTL IMPL URL
#
# Revision 1.16  2007/08/27 14:11:33  black
# Update GTL IMPL URL
#
# Revision 1.15  2007/04/02 13:52:50  black
# Update URL for GTL IMPL
#
# Revision 1.14  2007/03/26 15:52:56  black
# XREF graph partition
#
# Revision 1.13  2006/09/11 14:05:54  black
# NOTE a good survey article on graph generators
#
# Revision 1.12  2005/01/10 15:32:01  black
# Fix malformed anchor and URL for JUNG and JDSL and add more info.
#
# Revision 1.11  2004/12/23 21:21:59  black
# Remove unneeded period from end of XREFS.
#
# Revision 1.10  2004/12/17 17:23:54  black
# Make more XHTML compliant.
#
# Revision 1.9  2004/11/05 20:06:52  black
# Remove "dominate" - I deleted it from DADS
#
# Revision 1.8  2004/11/04 17:31:46  black
# Add digraph as VARIANT, since it is used so much.  Add new term
# "dominate" to XREFS and organize them.
#
# Revision 1.7  2004/08/13 19:00:47  black
# Link to Jung and jdsl IMPLs.
#
# Revision 1.6  2004/04/19 18:38:01  black
# Use the standard English plural of vertex
#
# Revision 1.5  2004/03/09 14:28:27  black
# Add implementation: GEF.
#
# Revision 1.4  2004/02/04 21:38:48  black
# Refine XREFS into VARIANT, etc. and add missing terms.  Add RCS Log.
# Use a more regular plural of vertex.
#
# Revision 1.3  2003/10/03 19:50:07  black
# Add another graph library
#
# Revision 1.2  2003/09/24 17:23:43  black
# Add link to Graph Template Library.  Be more specific that adjacency
# is a *binary* relation.
#

# entry name
@NAME=graph
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=graph
# the definition
@DEFN=A set of items connected by {edges}.  Each
item is called a {vertex} or {node}.  Formally, a graph is a
{set} of vertices and a {binary relation} between vertices, adjacency.
# formal definition or {cross reference} to an entry
@FORML=A graph G can be defined as a pair (V,E), where V is a set
of vertices, and E is a set of edges between the vertices
$E \subseteq \{(u,v) | u, v \in V}$. If the graph is undirected, the adjacency
relation defined by the edges is {symmetric}, or
$E \subseteq \{\{u,v} | u, v \in V}$ (sets of vertices rather than
ordered pairs).
If the graph does not allow {self-loops}, adjacency is {irreflexive}.
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT={directed graph}, {undirected graph}, {acyclic graph},
{directed acyclic graph},
{planar graph}, {connected graph}, {biconnected graph}, {bipartite graph}, 
{complete graph}, {dense graph}, {sparse graph},
{hypergraph}, {multigraph}, {labeled graph},
{weighted graph}, 
{tree}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME={vertex}, {edge}, {path}, {cycle},
Implementations: 
{adjacency-list representation}, {adjacency-matrix representation}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=Relations between vertices: {adjacent}, {self-loop},
Relations between graphs: {isomorphic}, {homeomorphic}, {dual},
{subgraph},
Properties: {diameter}, {degree},
Other: {graph drawing}, {graph partition}

# any notes.  these will not be printed in the final dictionary
@NOTES=Graphs are so general that many other data structures, such as
{trees}, are just special kinds of graphs.
</p>

<p>
A graph is like a road map.  Cities are vertices.  Roads from
city to city are edges.  (How about junctions or branches in a road?
You could consider junctions to be vertices, too.  If you don't want
to count them as vertices, a road may connect more than two cities.
So strictly speaking you have {hyperedges} in a {hypergraph}.  If you
want to allow more than one road between each pair of cities, you have
a {multigraph}, instead.  It all
depends on how you want to define it.)
</p>

<p> 
Another way to think of a graph is as a bunch of dots connected by
lines.  Because mathematicians
stopped talking to regular people long ago, the dots in a graph are
called vertices, and the lines that connect the dots are called
edges.  The important things are edges and the vertices: the dots
and the connections between them.  The actual position of a given
dot or the length or straightness of a given line isn't at issue.
Thus the dots can be anywhere, and the lines that join them are
infinitely stretchy.  Moreover, a mathematical graph is not a
comparison chart, nor a diagram with an x- and y-axis, nor a squiggly
line on a stock report.  A graph is simply dots and lines between
them---pardon me, vertices and edges. <br />
&nbsp;&nbsp;&nbsp;&nbsp;Michael Bolton &lt;mb@michaelbolton.net&gt; 22
February 2000

# further explanation (pure HTML)
@LINKS=Journal of Combinatorics dynamic surveys DS8 and DS9 are 
<a href="https://www.combinatorics.org/ojs/index.php/eljc/issue/view/Surveys">a bibliography (DS8)
and glossary (DS9) of signed and gain graphs</a>.
<strong>Deepayan Chakrabarti</strong> and <strong>Christos
Faloutsos</strong>, <em>Graph Mining: Laws, Generators, and
Algorithms</em>,  ACM Computing Surveys, Vol. 38, March 2006, Article 2.
<br />
A great list of graph generators and their strengths and weaknesses.

# implementation(s) (pure HTML)
@IMPL=GraphEd -- <a
href="https://www3.cs.stonybrook.edu/~algorith/implement/graphed/implement.shtml">Graph
Editor and Layout Program (C)</a>,
<a
href="https://algorist.com/problems/Graph_Data_Structures.html">graph
manipulation (C++, C, Mathematica, and Pascal)</a>,
<a href="https://jgrapht.org/">JGraphT (Java)</a> build, traverse,
and display directed and undirected graphs,
<a href="http://gef.tigris.org/">GEF - Graph Editing Framework
(Java)</a> a library to edit and display graphs.
<a
href="https://algorist.com/problems/Generating_Graphs.html">Graph
generating (C, Mathematica, Pascal, C++, and Fortran)</a>,
<a href="https://www.boost.org/doc/libs/1_43_0/libs/graph/doc/">BGL - 
the Boost Graph
Library (C++)</a>.
<a href="http://freecode.com/projects/thegraphtemplatelibrary">GTL - the Graph
Template Library (C)</a>.
<a href="https://github.com/gt4j/annas/">Annas (Java)</a>, for graph
theory, AI, path finding, distributed systems, etc.  The main
libraries are Annas.Graph, graph manipulation and visualization and
Annas.Math, comprehensive math functions.
<a href="http://jung.sourceforge.net/">JUNG (Java)</a>, the Java
Universal Network/Graph framework.
<a href="http://cs.brown.edu/cgc/jdsl/">JDSL (Java)</a>, the Data
Structures Library in Java.
Algorithms and Data Structures'
<a
href="http://www.algolist.net/Data_structures/Graph">explanation</a>
and <a
href="http://www.algolist.net/Data_structures/Graph/Internal_representation">adjacency
matrix implementation (Java and C++)</a>.
# author's initials
@AUTHOR=PEB,PJT
# end $Source: /home/black/Workspace/dads/Terms/RCS/graph.trm,v $
