# *created  "Mon Oct 19 15:06:57 1998" *by "Paul E. Black"
# *modified "Wed Sep 20 16:29:57 2006" *by "Paul E. Black"

# $Log: dijkstraalgo.trm,v $
# Revision 1.10  2006/09/20 20:32:34  black
# Move the complexity statement from DEFN to NOTE and elaborate, since
# run time is very sensitive to the implementation of the priority
# queue, which needs a very specialized implementation to reach the
# cited bound.
#
# Revision 1.9  2005/10/27 14:10:15  black
# Update John Morris' URL
#
# Revision 1.8  2005/02/02 20:26:47  black
# IM not A greedy algorithm; it is an algo. technique used INME.
#
# Revision 1.7  2004/12/17 17:23:36  black
# Make more XHTML compliant.
#
# Revision 1.6  2004/09/22 12:56:32  black
# Correct spelling of Fibonacci
#
# Revision 1.5  2004/09/01 11:09:00  black
# Remove duplicate "all paris shortest path" XREF.
#
# Revision 1.4  2004/04/19 18:37:32  black
# Use the standard English plural of vertex
#
# Revision 1.3  2004/01/30 18:13:36  black
# Refine XREFS into IMA, etc.  Add RCS keywords, esp. Log.
#
# Revision 1.2  2003/10/16 16:56:25  black
# Use a more regular plural of vertex
#

# entry name
@NAME=Dijkstra's algorithm
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=graph
# the definition
@DEFN=An algorithm to find the {shortest paths} from a single {source}
{vertex} to all other vertices in a
{weighted, directed graph}.  All
weights must be nonnegative.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN={Johnson's algorithm}
# Aggregate child: "... is a part of or used in me."
@INME={priority queue}, {greedy algorithm}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={Bellman-Ford algorithm}, {all pairs shortest path}

# any notes.  these will not be printed in the final dictionary
@NOTES=
A naive implementation of the {priority queue} gives a run time
complexity {$O(V<sup>2</sup>)$#big-O notation}, where $V$ is the
number of vertices.
Implementing the priority queue with a {Fibonacci heap} makes the
time complexity {$O(E + V \log V)$#big-O notation}, where $E$ is the
number of {edges}.
</p>

<p>
After <a href="../terms.html#CLR90">[CLR90, page 527]</a>.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# John Morris morris@ee.uwa.edu.au
An <a href="http://www.cs.auckland.ac.nz/software/AlgAnim/dijkstra.html">analysis
with code (C)</a>
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/dijkstraalgo.trm,v $
