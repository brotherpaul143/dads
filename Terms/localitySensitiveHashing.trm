# *created  "Fri May 16 14:14:02 2008" *by "Paul E. Black"
# *modified "Fri May 16 16:12:40 2008" *by "Paul E. Black"

# $Log: localitySensitiveHashing.trm,v $
# Revision 1.1  2008/05/16 20:14:28  black
# Initial revision
#

# entry name
@NAME=locality-sensitive hashing
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=search
# the definition
@DEFN=A {probabilistic algorithm} to quickly find points in a high
dimensional space near a query point.  Preprocessing: put every
point in multiple {hash tables}.  Each table has its own
locality-sensitive {hash function} and uses {buckets} (or {chaining})
since many collisions are expected.
The {hash functions} come from a family of functions.  
Finding: look up the query point in each hash table, and compute the
distance from the query point of every point in the bucket.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as name or spelling variants
@WEB=LSH

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={point access method}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME={hash function}, {bucket}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={Bloom filter}

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
<strong>Alexandr Andoni</strong> and <strong>Piotr Indyk</strong>,
<em>Near-Optimal Hashing Algorithms for Approximate Nearest Neighbor
in High Dimensions</em>, CACM, 51(1):117-122, January 2008.

# any notes.  these are not printed in the final dictionary
@NOTES=
This algorithm is for high dimensional spaces.  For instance, a 1000 x
1000 image can be characterized by a vector in 1,000,000-dimensional
space, one dimension for each pixel.
</p>

<p>
To understand the algorithm, let the "hash functions" be random sets
of the coordinates.  If many coordinates of a point match the query
point, it is likely to be close to the query point, at least closer
than those that don't match.

# any historical notes
@HISTORY=

# implementation(s) (pure HTML)
@IMPL=
# further explanation (pure HTML)
@LINKS=
Alexandr Andoni's
<a href="http://www.mit.edu/~andoni/LSH/">Locality-Sensitive Hashing
home page</a>.
<a
href="http://en.wikipedia.org/wiki/Locality_sensitive_hashing">Locality
sensitive hashing</a> in Wikipedia.

# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/DADS/Terms/RCS/localitySensitiveHashing.trm,v $
