# *created  "Thu Jan 15 13:51:44 2004" *by "Paul E. Black"
# *modified "Tue Jun 29 14:06:36 2021" *by "Paul E. Black"

# $Log: zipper.trm,v $
# Tue Jun 29 14:10:20 2021  Paul E. Black
# Update LINK URL for caml.inria.fr.
# 
# Revision 1.3  2005/03/21 14:42:38  black
# Update "Using zippers ..." message LINK.
#
# Revision 1.2  2004/12/17 17:29:03  black
# Make more XHTML compliant.
#
# Revision 1.1  2004/01/15 20:56:43  black
# Initial revision
#

# entry name
@NAME=zipper
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=tree
# the definition
@DEFN=A data structure equivalent to a {binary tree} that is "opened"
so that some {node} is accessible.  It consists of a pair: the current
node, along with information to reconstruct the tree.  Reconstruction
information
is called the path or context.  A move-to-left-child operation returns
the left subtree, along with a new path, which has (i) a Left value,
(ii) the current node, (iii) the right subtree, and (iv) any previous
path.  A similar operation moves to the right child.  A move-up
operation returns a tree rebuilt from the path information and the
current node, along with the previous path.
# formal definition or {cross reference} to an entry
@FORML=
#The operations left(z), right(z), up(z) may be defined as follows.
#<ol>
#<li>left(Zipper(Tree(l, v, r), p)) = Zipper(l, Path(Lf, v, r, p))
#<li>up(Zipper(l, Path(Lf, v, r, p))) = Zipper(Tree(l, v, r), p)
#<li>right(Zipper(Tree(l, v, r), p)) = Zipper(r, Path(Rt, r, v, p))
#<li>up(Zipper(r, Path(Rt, r, v, p))) = Zipper(Tree(l, v, r), p)
#</ol>
#where l and r are trees, v is the value of the current node, and p is
#a path.  The terms Zipper, Tree, and Path are constructors, and Lf and
#Rt are special values.

# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as name or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS=

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
<strong>G&eacute;rard Huet</strong>, <em>The Zipper</em>,
Journal of Functional Programming, 7(5):549-554, 1997.

# any notes.  these are not printed in the final dictionary
@NOTES=In functional programming languages, a zipper acts as a
"pointer" into a tree.
The name comes from visualizing the
move-to-child operation as unzipping a tree.  (Instead of two halves,
though, move-to-child keeps the pieces in a {k-ary tree}: the path.)
# any historical notes
@HISTORY=

# implementation(s) (pure HTML)
@IMPL=
# further explanation (pure HTML)
@LINKS=
A message on
<a href="https://caml.inria.fr/pub/ml-archives/caml-list/2003/04/d9701aacd4580cf3feb60ae8cd7a1836.xml">Using
zippers to handle huge trees</a>.
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/zipper.trm,v $
