# *created  "Wed Jun  2 13:42:31 1999" *by "Phillip Laplante"
# *modified "Wed Nov 19 10:04:05 2003" *by "Paul E. Black"

# $Log: longestCommonSubsequence.trm,v $
# Revision 1.3  2003/11/19 15:06:08  black
# add xref to shortest common supersequence
#
# Revision 1.2  2003/11/19 14:47:50  black
# Differentiate between longest common substring and longest common
# subsequence.  Add new line.
#

# entry name
@NAME=longest common subsequence
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=P
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=search
# the definition
@DEFN=The problem of finding a maximum length (or maximum weight)
{subsequence} of two or more {strings}.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names or {cross refs} that this is Also Known As.
@AKA=heaviest common subsequence
# other cross-listings solely for the web, such as word or spelling variants
@WEB=
# comma-separated list of {cross references}, i.e., See also ...
@XREFS={Ratcliff/Obershelp pattern recognition},
{longest common substring}, {shortest common supersequence}
# any notes.  these will not be printed in the final dictionary
@NOTES=
The longest common substring is contiguous, while the longest common
subsequence need not be.
</P>

<P>
From Algorithms and Theory of Computation Handbook, page 13-17,
Copyright &copy; 1999 by CRC Press LLC.
Appearing in the Dictionary of Computer Science, Engineering and
Technology, Copyright &copy; 2000 CRC Press LLC.
# further explanation (pure HTML)
@LINKS=
Dan Hirschberg's <A
href="http://www.ics.uci.edu/~dan/class/161/notes/6/Dynamic.html">pseudocode</A>
as an example of <A
href="http://www.nist.gov/dads/HTML/dynamicprog.html">dynamic
programming</A>.
# implementation(s) (pure HTML)
@IMPL=<A
href="http://www.cs.sunysb.edu/~algorith/files/longest-common-substring.shtml">(C
and Mathematica)</A>
# author's initials (see authors.data)
@AUTHOR=CRC-A
# end $Source: /home/black/Workspace/dads/Terms/RCS/longestCommonSubsequence.trm,v $
