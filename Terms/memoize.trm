# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Thu Dec 28 09:24:12 2006" *by "Paul E. Black"

# $Log: memoize.trm,v $
# Revision 1.4  2006/12/28 14:25:42  black
# clarify that the memo array must be initialized to 0.  Improve wording.
#
# Revision 1.3  2005/01/11 20:39:44  black
# Remove leading redundant phrase.  Correct comment on time to compute.
#
# Revision 1.2  2004/12/17 16:53:06  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#

# entry name
@NAME=memoization
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=T
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=basic
# the definition
@DEFN=Save (memoize) a computed
answer for possible later reuse, rather than recomputing the answer.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=memoize

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={dynamic programming}

# any notes.  these will not be printed in the final dictionary
@NOTES=The term comes from "memo": "A short note written as a
reminder." [The American Heritage Dictionary of the English Language,
&copy; 1970, American Heritage Publishing]
<p>
A naive program to compute {Fibonacci numbers} is
<pre>
fib(n) \{<br>
   if n is 1 or 2, return 1;<br>
   return fib(n-1) + fib(n-2);<br>
}
</pre>
Because fib() is recomputed over and over for the same argument, run
time for the above is ${\Omega}(1.6<sup>n</sup>)$.
If instead we memoize (save) the value of fib(n) the first time we
compute it, the run time is ${\Theta}(n)$.
<pre>
allocate array for memo;<br>
set all values of memo to zero;<br>
initialize memo[1] and memo[2] to 1;<br>
<br>
fib(n) \{<br>
   if memo[n] is not zero, return memo[n];<br>
   memo[n] = fib(n-1) + fib(n-2);<br>
   return memo[n];<br>
}
</pre>
<p>
Of course, computing Fibonacci numbers can be easily done in {logarithmic}
time (see {Fibonacci numbers}), but this illustrates memoization.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/memoize.trm,v $
