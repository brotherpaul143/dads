# *created  "Tue Dec  1 13:00:26 1998" *by "Paul E. Black"
# *modified "Thu Apr 21 14:49:27 2022" *by "Paul E. Black"

# $Log: radixsort.trm,v $
# Thu Apr 21 14:23:53 2022  Paul E. Black
# Add Python IMPL
# 
# Tue Feb 12 09:43:34 2019  Paul E. Black
# update access to rbaeza handbook
# 
# Mon Mar  2 15:59:55 2015  Paul E. Black
# Remove John David Stones (Grinnell) IMPL - Stones account is entirely gone.
# 
# Mon Jan 26 11:11:39 2015  Paul E. Black
# Remove trailing period (.) of INME line - formatting adds one.
# 
# Fri Nov 28 14:55:14 2014  Paul E. Black
# Add that counting sort may be INME.  Improve formatting of example.
# Remove NOTE about an in-place variant of radix sort.  It is NOT in-place.
# 
# Revision 1.13  2013/08/22 19:42:03  black
# update URL for Alex Lopez-Ortiz at U waterloo
#
# Revision 1.12  2009/11/16 14:52:47  black
# Update domain name of Ricardo Baeza-Yates' Handbook of Algorithms and Data Structures
#
# Revision 1.11  2009/09/30 17:21:05  black
# Update domain name of Raul Baeza's Handbook of Algorithms and Data Structures
#
# Revision 1.10  2008/08/14 16:15:23  black
# Update HTML line break (br) tags to be XML/XHMTL compatible
#
# Revision 1.9  2005/12/14 19:02:48  black
# Remove XREF to multikey Quicksort, which is more like postman's sort.
# XREF postman's sort.
#
# Revision 1.8  2005/12/14 14:47:04  black
# rename 3-way radix quicksort to multikey Quicksort, the authors' term
#
# Revision 1.7  2005/12/14 13:58:45  black
# Change pp to pages
#
# Revision 1.6  2005/11/22 21:42:16  black
# Improve the wording of the example in the NOTE.
#
# Revision 1.5  2005/10/27 14:01:56  black
# Update John Morris' URL
#
# Revision 1.4  2005/04/18 13:08:43  black
# Update URL for cubic.org tutorial.
#
# Revision 1.3  2005/02/04 15:51:42  black
# NOTE radix sort on a linked list as described in DDJ.  Add page number
# to CLR citation.
#
# Revision 1.2  2004/12/17 15:51:26  black
# Add XREF top-down radix sort.  Refine XREFS into IMA, etc.  Add RCS
# keywords.  Make more XHTML compliant.

# entry name
@NAME=radix sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=sort
# the definition
@DEFN=A multiple pass {distribution sort} algorithm that distributes
each item to a {bucket} according to part of the item's {key}
beginning with the least significant part of the key.
After each pass, items are collected from the buckets, keeping the
items in order, then redistributed according to the next most
significant part of the key.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={distribution sort}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME={counting sort} may be an appropriate algorithm for each pass
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={postman's sort}, {bucket sort},
{American flag sort}, {top-down radix sort}

# any notes.  these will not be printed in the final dictionary
@NOTES=
Here is a simple example of the sort.  Suppose the input keys are
34, 12, 42, 32, 44, 41, 34, 11, 32, and 23.  Four buckets are
appropriate, since there are four different digits (1, 2, 3, and 4).
The first pass distributes the keys into buckets by the least
significant digit.  Half way through the first pass, the buckets
contain the following, where each line is a bucket.<br />
B1: <br />
B2: 12 42 32<br />
B3: <br />
B4: 34 44<br />
<br />
When the first pass is done, we have the following.<br />
B1: 41 11<br />
B2: 12 42 32 32<br />
B3: 23<br />
B4: 34 44 34<br />
<br />
We collect these, keeping their relative order: 
41 11 12 42 32 32 23 34 44 34.
Now we distribute by the next most significant digit, which is the
highest digit, and we get the following.<br />
B1: 11 12<br />
B2: 23<br />
B3: 32 32 34 34<br />
B4: 41 42 44<br />
<br />
When we collect them, they are in order: 
11 12 23 32 32 34 34 41 42 44.
</p>

<p>
Radix sort can be particularly effective on a {linked list}.  Rather
than buckets, put items in linked lists.  At the end of a pass collect
the items  by "sewing" the lists together: make the {tail} of each
list point to the {head} of the next list.  (After <strong>Steven
Pigeon</strong>, <em>QuickSort and Radix Sorts on Lists</em>,
Dr. Dobb's Journal, May 2002, pages 89-94.)
# implementation(s) (pure HTML)
@IMPL=
<a
href="https://users.dcc.uchile.cl/~rbaeza/handbook/algs/4/424.sort.c">(C
and Pascal)</a>.
John Morris'
# morris@ee.uwa.edu.au
<a
href="http://www.cs.auckland.ac.nz/software/AlgAnim/radixsort.html">analysis,
explanation, and code (C)</a>.
<a
href="http://cubic.org/docs/radix.htm">tutorial
with examples and code (C++)</a>.
<a href="https://www.geeksforgeeks.org/python-program-for-radix-sort/">(Python)</a>.

# further explanation (pure HTML)
@LINKS=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/radixsort.trm,v $
