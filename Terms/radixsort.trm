# *created  "Tue Dec  1 13:00:26 1998" *by "Paul E. Black"
# *modified "Wed Dec 14 08:58:37 2005" *by "Paul E. Black"

# $Log: radixsort.trm,v $
# Revision 1.7  2005/12/14 13:58:45  black
# Change pp to pages
#
# Revision 1.6  2005/11/22 21:42:16  black
# Improve the wording of the example in the NOTE.
#
# Revision 1.5  2005/10/27 14:01:56  black
# Update John Morris' URL
#
# Revision 1.4  2005/04/18 13:08:43  black
# Update URL for cubic.org tutorial.
#
# Revision 1.3  2005/02/04 15:51:42  black
# NOTE radix sort on a linked list as described in DDJ.  Add page number
# to CLR citation.
#
# Revision 1.2  2004/12/17 15:51:26  black
# Add XREF top-down radix sort.  Refine XREFS into IMA, etc.  Add RCS
# keywords.  Make more XHTML compliant.
#

# entry name
@NAME=radix sort
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=sort
# the definition
@DEFN=A multiple pass {distribution sort} algorithm that distributes
each item to a {bucket} according to part of the item's {key}
beginning with the least significant part of the key.
After each pass, items are collected from the buckets, keeping the
items in order, then redistributed according to the next most
significant part of the key.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={distribution sort}
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={bucket sort}, {three-way radix quicksort},
{American flag sort}, {top-down radix sort}

# any notes.  these will not be printed in the final dictionary
@NOTES=
Here is a simple example of the sort.  Suppose the input keys are
34, 12, 42, 32, 44, 41, 34, 11, 32, and 23.  Four buckets are
appropriate, since there are four different digits.
The first pass distributes the keys into buckets by the least
significant digit.  Half way through the first pass, the buckets
contain the following, where each line is a bucket.<br>
<br>
12 42 32<br>
<br>
34 44<br>
When the first pass is done, we have the following.<br>
41 11<br>
12 42 32 32<br>
23<br>
34 44 34<br>
We collect these, keeping their relative order: 
41 11 12 42 32 32 23 34 44 34.
Now we distribute by the next most significant digit, which is the
highest digit, and we get the following.<br>
11 12<br>
23<br>
32 32 34 34<br>
41 42 44<br>
When we collect them, they are in order: 
11 12 23 32 32 34 34 41 42 44.
</p>

<p>
<a href="../terms.html#CLR90">[CLR90, page 179]</a> gives an
{in-place#in-place sort} variant of radix sort which
uses a {stable} sort on each digit of the key.
</p>

<p>
Radix sort can be particularly effective on a {linked list}.  Rather
than buckets, put items in linked lists.  At the end of a pass collect
the items  by "sewing" the lists together: make the {tail} of each
list point to the {head} of the next list.  (After <strong>Steven
Pigeon</strong>, <em>QuickSort and Radix Sorts on Lists</em>,
Dr. Dobb's Journal, May 2002, pages 89-94.)
# implementation(s) (pure HTML)
@IMPL=<a
href="http://www.math.grin.edu/~stone/courses/fundamentals/radix-sorting.html">Explanation
and code (Pascal)</a>.
<a
href="http://www.dcc.uchile.cl/~rbaeza/handbook/algs/4/424.sort.c">(C
and Pascal)</a>.
# John Morris morris@ee.uwa.edu.au
<a
href="http://www.cs.auckland.ac.nz/software/AlgAnim/radixsort.html">analysis,
explanation, and code (C)</a>.
<a
href="http://cubic.org/docs/radix.htm">tutorial
with examples and code (C++)</a>.
# further explanation (pure HTML)
@LINKS=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/radixsort.trm,v $
