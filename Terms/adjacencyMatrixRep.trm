# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Mon Aug  3 09:57:27 2009" *by "Paul E. Black"

# $Log: adjacencyMatrixRep.trm,v $
# Revision 1.7  2009/08/03 13:57:44  black
# update URL for IMPL at Simple Programming Tutorials, now Algorithms
# and Data Structures.
#
# Revision 1.6  2009/01/22 16:03:49  black
# Add Simple programming tutorials' IMPL.  IMIN graph.
#
# Revision 1.5  2008/08/14 16:12:07  black
# Update HTML line break (br) tags to be XML/XHMTL compatible
#
# Revision 1.4  2004/12/17 17:27:38  black
# Make more XHTML compliant.
#
# Revision 1.3  2004/04/19 18:33:11  black
# Use the standard English plural of vertex
#
# Revision 1.2  2003/10/16 17:05:12  black
# Use a more regular plural of vertex
#

# entry name
@NAME=adjacency-matrix representation
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=graph
# the definition
@DEFN=A representation of a {directed graph} with $n$
{vertices#vertex} using an $n \times n$ {matrix}, where the entry at
$(i,j)$ is 1 if there is an {edge} from vertex $i$ to vertex $j$;
otherwise the entry is 0.  A {weighted graph} may be
represented using the weight as the entry.  An {undirected graph}
may be represented using the same entry in both $(i,j)$ and $(j,i)$ or
using an {upper triangular matrix}.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=adjacency matrix

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN={graph}
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={adjacency-list representation}, {dense graph}

# any notes.  these will not be printed in the final dictionary
@NOTES=
Suppose we have a directed graph with four vertices.  Here are
adjacency-matrix and adjacency-list representations.  The arrow (-&gt;)
means a link in a list.
<p>
<pre>
   1 2 3 4<br />
1  1 1 1 1<br />
2  1 0 0 0<br />
3  0 1 0 1<br />
4  0 1 1 0<br />
</pre>
</p>
<p>
<pre>
1  -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4<br />
2  -&gt; 1<br />
3  -&gt; 2 -&gt; 4<br />
4  -&gt; 2 -&gt; 3<br />
</pre>
</p>

<p>
The adjacency-list representation is more compact for a {sparse matrix}.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
Algorithms and Data Structures'
<a
href="http://www.algolist.net/Data_structures/Graph/Internal_representation">implementation (Java and C++)</a>.
# author's initials
@AUTHOR=SKS
# end $Source: /home/black/Workspace/dads/Terms/RCS/adjacencyMatrixRep.trm,v $
