# *created  "Tue Nov 17 14:41:38 1998" *by "Paul E. Black"
# *modified "Fri Dec 17 12:27:54 2004" *by "Paul E. Black"

# $Log: completeBinaryTree.trm,v $
# Revision 1.3  2004/12/17 17:27:55  black
# Make more XHTML compliant.
#
# Revision 1.2  2004/04/07 16:33:41  black
# Refine XREFS into IMA, etc.  Add references to binary tree and binary
# heap.  Add that the indexing note is 1-based.
#

# entry name
@NAME=complete binary tree
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=D
# basic, numeric, search, sort, graph, combin(atorial), tree, theory
@AREA=tree
# the definition
@DEFN=A {binary tree} in which every level, except possibly the
deepest, is completely filled.  At depth $n$, the {height} of the
tree, all {nodes} must be as far left as possible.  
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=CBT

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={complete tree}, {binary tree}
# Specialization: "... is a kind of me."
@VARIANT={binary heap}
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={full binary tree}, {perfect binary tree}, {extendible
hashing}, {heap}

# any notes.  these will not be printed in the final dictionary
@NOTES=A complete binary tree has $2<sup>k</sup>$ nodes at every
{depth} $k &lt; n$ and between $2<sup>n</sup>$ and $2<sup>n+1</sup>-1$
nodes altogether.
It can be efficiently implemented as an {array}, where a node at index
$i$ has children at indexes $2i$ and $2i+1$ and a
parent at index $i/2$, with {one-based indexing}.  
If child index is greater than the number
of nodes, the child does not exist.
</p>

<p>
After LK.
</p>

<p>
Thanks to Adrienne G. Bloss (bloss@roanoke.edu) September 2003.
</p>

<p>
This kind of tree is called "complete" by authors that mention it
(Budd page 332, Ege, Carrano &amp; Prichard page 427, Goodrich &amp;
Tamassia page 302,
<a href="../terms.html#HS83">[HS83, page 226]</a>,
<a href="../terms.html#Knuth98">[Knuth98]</a>,
<a href="../terms.html#Stand98">[Stand98, page 249]</a>).  Some
authors call {perfect binary trees} "complete".
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/completeBinaryTree.trm,v $
