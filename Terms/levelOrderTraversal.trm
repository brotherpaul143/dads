# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Thu May 26 15:48:58 2011" *by "Paul E. Black"

# $Log: levelOrderTraversal.trm,v $
# Revision 1.5  2011/05/26 19:49:50  black
# XREF the new entry, level
#
# Revision 1.4  2010/10/06 15:03:16  black
# add anchor to Standish citation.
#
# Revision 1.3  2008/08/14 16:14:48  black
# Update HTML line break (br) tags to be XML/XHMTL compatible
#
# Revision 1.2  2004/12/17 16:52:54  black
# Refine XREFS into IMA, etc.  Add RCS keywords.  Make more XHTML compliant.
#

# entry name
@NAME=level-order traversal
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=tree
# the definition
@DEFN=Process all {nodes} of a {tree} by {depth}: first the {root},
then the {children#child} of the root, etc.  Equivalent to a
{breadth-first search} from the root.

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={postorder traversal}, {preorder traversal}, {tree traversal},
{level}

# any notes.  these will not be printed in the final dictionary
@NOTES=For instance, if the "processing" is just printing, a tree is
printed as "root, all children of the root, all grandchildren
(children of children) of the root, etc."
Here is pseudocode for an inefficient level-order traversal of a
{binary tree}:
<pre>
levelorderAux(tree, level)<br />
begin<br />
    if tree is null, return;<br /><br />
    if level is 1, then<br />
        print(tree.root);<br />
    else if level greater than 1, then<br />
        levelorderAux(tree.left_subtree, level-1);<br />
        levelorderAux(tree.right_subtree, level-1);<br />
    endif<br />
end<br />
<br />
levelorder(tree)<br />
begin<br />
    for d = 1 to height(tree)<br />
        levelorderAux(tree, d);<br />
    endfor<br />
end
</pre>
</p>

<p>
See <a href="../terms.html#Stand98">[Stand98, p. 251]</a>.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/DADS/Terms/RCS/levelOrderTraversal.trm,v $
