# *created  "Tue Mar 16 16:31:33 1999" *by "Paul E. Black"
# *modified "Thu Jan 10 15:39:17 2002" *by "Paul E. Black"
# entry name
@NAME=inverted index
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# basic theory numeric search sort tree graph combin(atorial) para(llel) crypt
@AREA=search
# the definition
@DEFN=An index into a set of {texts} of the words in the texts.
The index is accessed by some {search} method.
Each index entry gives the 
word and a list of texts, possibly with locations 
within the text, where the word occurs.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names or {cross refs} that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as word or spelling variants
@WEB=inverted file
# comma-separated list of {cross references}, i.e., See also ...
@XREFS={full inverted index}, {inverted file index}, {block addressing
index}, {index file}, {external index}, {forward index}
# bib refs, eg, to defining article (pure HTML).  printed within <P>..</P>
@BIB=<strong>Nivio Ziviani, Edleno Silva de Moura, Gonzalo Navarro,
Ricardo Baeza-Yates</strong>, <em>Compression: A Key for
Next-Generation Text Retrieval Systems</em>, IEEE Computer,
33(11):37-44, November 2000, (page 42).
# any notes.  these will not be printed in the final dictionary
@NOTES=Suppose we want to search the texts "i love you," "god is
love," "love is blind," and "blind justice." (The words of the text
are all lower case for simplicity.)  If we index by (text, character
within the text), the index with location in text is:
<PRE>
blind   (3,8);(4,0)<br>
god     (2,0)<br>
i       (1,0)<br>
is      (2,4);(3,5)<br>
justice (4,6)<br>
love    (1,2);(2,7);(3,0)<br>
you     (1,7)
</PRE>
The word "blind" is in document 3 ("love is blind") starting at
character 8, so has an entry <code>(3,8)</code>.
To find, for instance, documents with both "is" and "love," first
look up the words in the index, then find the
intersection of the texts in each list.  In this case, documents 2 and
3 have both words.  We can quickly find documents where the words
appear close to each other by comparing the character within the
text.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=
# author's initials
@AUTHOR=PEB
# end
