# *created  "Thu Jun  8 16:45:23 2006" *by "Paul E. Black"
# *modified "Tue Jun 27 10:05:44 2006" *by "Paul E. Black"

# $Log: hugeSparseArray.trm,v $
# Revision 1.1  2006/06/27 14:11:07  black
# Initial revision
#

# entry name
@NAME=huge sparse array
# _A_lgorithm, algo _T_echnique, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=S
# autom basic theory search sort tree graph combin numeric etc. see areas.data
@AREA=theory
# the definition
@DEFN=Let $N$ be the number of items to store and $R$ be the size of
the {range} of {key} values; $R \gg N$.  
Allocate, but don't initialize, two arrays: a key
array K, where $|K|=R$, and an item array I, where $|I|&gt;N$.
Initialize c, the number of items, to zero.  
To insert an item, put it in the next place in the item array
and save that location in the key array.
<pre>
  I[c] = item;<br>
  K[item.key] = c;<br>
  c++;
</pre>
To look up an item by key, get the index from the key array.  If
the index is invalid or refers to the wrong item, the item is not
found.
<pre>
  index = K[key];<br>
  if (index &lt; 0 OR index &gt;= c) return NOTFOUND;<br>
  if (I[index].key != key) return NOTFOUND;<br>
  return I[index];
</pre>
Inserting $N$ items takes {$\Theta(N)$#\Theta} total time, assuming
allocation takes constant time.
Retrieving an item by key (or responding "not found") takes
constant time.
Listing all items takes $\Theta(N)$ time using I.

# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names that this is Also Known As.
@AKA=
# other cross-listings solely for the web, such as name or spelling variants
@WEB=

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA=
# Specialization: "... is a kind of me."
@VARIANT=
# Aggregate parent: "I am a part of or used in ..."
@IMIN=
# Aggregate child: "... is a part of or used in me."
@INME=
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={sparse matrix}, {hash table}

# bib refs, eg, to defining article (pure HTML).  printed within <p>..</p>
@BIB=
#<strong>Paul E. Black</strong>, <em>Hypothetical Intelligence</em>,
#Proc. Everything XV, Provo, Utah, USA, 2(7):30-32, February 1997.

# any notes.  these are not printed in the final dictionary
@NOTES=
Keys must be unique.  Duplicate keys could be handled with
{collision resolution schemes}.  
This data structure is usually impractical since the key range is
enormous.
</p>

<p>
This is what {hash tables} want to be: constant time for insertion and
look up.
# any historical notes
@HISTORY=possibly from an exercise in <strong>Alfred V. Aho,
John E. Hopcroft</strong>, and <strong>Jeffrey D. Ullman</strong>,
<em>The Design and Analysis of Computer Algorithms</em>, 1974?

# implementation(s) (pure HTML)
@IMPL=
# further explanation (pure HTML)
@LINKS=
# author's initials (see authors.data)
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/hugeSparseArray.trm,v $
