# *created  "Wed Feb  3 13:42:31 1999" *by "Paul E. Black"
# *modified "Tue Mar 30 12:17:59 2004" *by "Paul E. Black"

# $Log: permutation.trm,v $
# Revision 1.2  2004/03/30 17:19:19  black
# Refine XREFS into IMA, etc.  Refer to Ben Pfaff's shuffle impl.
#

# entry name
@NAME=permutation
# _A_lgorithm, _D_efinition, _P_roblem, or data _S_tructure
@TYPE=A
# basic numeric search sort graph combin(atorial) tree theory para(llel)
@AREA=combin
# the definition
@DEFN=A rearrangement of elements, where none are lost, added, or
changed.  A good algorithm to randomly permute $N$
elements is to exchange each element $e<sub>i</sub>$ with a random
element from $i$ to $N$.
# formal definition or {cross reference} to an entry
@FORML=
# comma-sep list of pure names or {cross refs} that this is Also Known As.
@AKA=shuffle
# other cross-listings solely for the web, such as word or spelling variants
@WEB=permute

#    These are all comma-separated lists of {cross references}
# Generalization: "I am a kind of ..."
@IMA={combination}
# Specialization: "... is a kind of me."
@VARIANT={perfect shuffle}, {sort}, {derangement}
# Aggregate parent: "I am a part of or used in ..."
@IMIN={American flag sort}
# Aggregate child: "... is a part of or used in me."
@INME={Johnson-Trotter}
# Other cross references that don't fit the above.  printed as "See also ..."
@XREFS={pseudo-random number generator}

# any notes.  these will not be printed in the final dictionary
@NOTES=A {sort} is a permutation where the items are arranged in some
order.  The algorithm above can be viewed as a reverse {selection
sort}, and is described in detail in 
<A href="../terms.html#Knuth98">[Knuth98, vol. 2]</A>.
It consumes {$\Theta(N \log N)$#$\Theta$} bits and runs in
{linear} time.
# further explanation (pure HTML)
@LINKS=
# implementation(s) (pure HTML)
@IMPL=The (Combinatorial) Object Server's information on <A
href="http://www.theory.csc.uvic.ca/~cos/inf/perm/PermInfo.html">Permutations
(Pascal and C)</A>;
Michael Gilleland's
<A href="http://www.merriampark.com/perm.htm">PermutationGenerator
class (Java)</A>;
Glenn Rhoads' 
<A href="http://remus.rutgers.edu/~rhoads/Code/code.html">Snippets (c)</A>;
<A
href="http://www.cs.sunysb.edu/~algorith/files/generating-permutations.shtml">(Pascal,
Fortran, Mathematica, and C)</A>;
<A href="http://gams.nist.gov/serve.cgi/Class/N8">(Fortran)</A>.
Ben Pfaff's answer to
<A href="http://www.msu.edu/~pfaffben/writings/clc/shuffle.html">how
can I shuffle the contents of an array? (C)</A>.
<A
href="http://pobox.com/~oleg/ftp/Haskell/perfect-shuffle.txt">Perfect
shuffle (Haskell)</A>.
# author's initials
@AUTHOR=PEB
# end $Source: /home/black/Workspace/dads/Terms/RCS/permutation.trm,v $
