#!/usr/bin/perl -w
# $Id$
#             *created  "Mon Oct 21 15:41:50 2013" *by "Paul E. Black"
$versionMod=' *modified "Thu Oct 24 10:47:00 2013" *by "Paul E. Black"';

#-----------------------------------------------------------------------------
#
#     Commit a modified file
# Step 1 create a diff file and solict a message
# Step 2 insert the message into the file and get approval for change
# Step 3 git commit the file using that message
#
$useMsg = "use: gcommit [--help] [--version] mkterms";
$minOperands = 1;
$maxOperands = 1;
$typUse = "gcommit mkterms";
#
# adapted from wdelta and editTerms
#
# This software was developed at the National Institute of Standards 
# and Technology by employees of the Federal Government in the course 
# of their official duties.  Pursuant to title 17 Section 105 of the 
# United States Code this software is not subject to copyright 
# protection and is in the public domain. 
# 
# We would appreciate acknowledgment if the software is used.
#
# Paul E. Black  paul.black@nist.gov or p.black@acm.org
#	http://hissa.nist.gov/~black/
#
#-----------------------------------------------------------------------------

# $Log$

#------------------------------------------------------------------------------
#	Command line handling
#------------------------------------------------------------------------------

while ($#ARGV >= 0) {
    if ($ARGV[0] =~ /^--?h(e(lp?)?)?/) {
	print "$useMsg\n";
	print "    where\n";
	print "\t--version Print version and exit\n";
	print "\t--help    Print this message and exit\n";
	print "\t--        End of options (e.g., file begins with -)\n";
	print "    Step 1: Display a file showing changes in which you put a message.\n";
	print "    Step 2: Insert the message in file and ask permission to commit. Options are:\n";
	print "\ty - Yes; commit changes\n";
	print "\tl - Leave changes, but don't commit\n";
	print "\tn - No; leave the original version (w/o the message)\n";
	print "\tq - Quit; leave then quit\n";
	print "      The default is 'n'.\n";
	print "    Step 3: git commit file with that message. git add if necessary.\n";
	print "typical use:\n";
	print "    $typUse\n";
	exit 0;
    } elsif ($ARGV[0] =~ /^--?v(e(r(s(i(on?)?)?)?)?)?$/) {
	print "$versionMod\n";
	exit 0;
    } elsif ($ARGV[0] eq "--") {
	shift;
	last;
    } elsif ($ARGV[0] =~ /^-/) {
	print "unknown option: $ARGV[0]\n";
	print "$useMsg\n";
	exit 1;
    } else {
	# end of options
	last;
    }
}

$numberOfOperands = 1 + $#ARGV;
if ($numberOfOperands < $minOperands || $maxOperands < $numberOfOperands) {
    print "Wrong number of operands\n";
    print "$useMsg\n";
    die;
}
$filename = $ARGV[0];

# SKIMP check that file exists and other validation (is writable, etc.)

###############################################################################
#	program proper
###############################################################################

# get the name of the person executing
my $fullname = (getpwuid($<))[6];
# here's an alternative
#my $person = $ENV{LOGNAME} || $ENV{USER} || getlogin || getpwuid($<);
if (! defined $fullname || $fullname eq "") {
    $fullname = "unknown";
}
#print "$fullname\n";


#------------------------------------------------------------------------------
#
# Step 1: Display a file showing changes in which the user puts a message.
#
#------------------------------------------------------------------------------

use File::Temp qw/ tempfile /;
# safely get a temporary file handle and name
my ($DIFF_FH, $diffFile) = tempfile("diffFileXXXXXX", DIR => "/tmp");

#print "diff file is $diffFile\n";

# true to git add later
$gitaddFile = 0;

# find differences between current contents and latest index(?)
# -b ignores changes in whitespace
# --unified=0 gives no context lines
my $differences = `git diff -b --unified=0 $filename`;
if ($differences eq "") {
    # $differences is empty; the file isn't in git or hasn't been committed or hasn't changed

    $gitaddFile = 1;

    # create a stub
    $differences = "+++ b/$filename\nfile not in git or not changed? Add commit message above\n";
}

# remove lines we don't want. Here's a short, example file:
#   diff --git a/fileone b/fileone
#   index 2d5ae8a..ce162fd 100644
#   --- a/fileone
#   +++ b/fileone
#   @@ -7 +6,0 @@ emergency and called for help.
#   -Enchante
$differences =~ s/^diff [^\n]*\n//; # remove 1st line
$differences =~ s/^index [^\n]*\n//; # remove 2nd line
$differences =~ s|^--- a/[^\n]*\n||; # remove 3rd line
$differences =~ s|^\+\+\+ b/|Modify |; # change 4th line to a label
    # REMEMBER: code that adds the comment to the file ASSUMES a label line
$differences =~ s/(\n@@ [^@]+ @@) [^\n]*/$1/g; # remove change contexts
# Add DIFF: before each line to later remove lines (add 8 chars for tabs)
$differences =~ s/\n/\nDIFF:  /g;
$differences =~ s/DIFF:  $//; #remove DIFF after last newline

#print $differences;

# put differences in a file
print $DIFF_FH "$differences";

close $DIFF_FH;

# start an editor so the user can add a commit message
system "emacs $diffFile";

# get just added text (and file name) as commit message
my $message = `grep -v "^DIFF: " $diffFile`;
$message =~ s/\'//g; # remove single quotes so git command isn't ruined

unlink $diffFile;


#------------------------------------------------------------------------------
#
# Step 2: If there is an RCS $Log line, insert the message in file,
#         show the change, and ask permission to commit.
#
#------------------------------------------------------------------------------

if (! open THEFILE, "< $filename") {
    # this should never happen - missing or unreadable file is caught earlier
    die "Cannot open $filename!?!, stopped";
}

# read whole file
my @file_contents = <THEFILE>;

close THEFILE || 
    # this should never happen
    die "Cannot close THEFILE!?!, stopped";

#print @file_contents;

# figure out the comment character(s) from the $Log: line, for example
#    dnl $Log: bitsSearch.m4,v $
#    # $Log: mkauthors,v $
#    *      $Log$
use List::Util 'first';
my $commentLine = first { /\$Log(:[^\$]*|)\$/ } @file_contents;
if (defined $commentLine) {
    # found an RCS $Log line.  Insert message, etc., etc.

    # We assume the string that precedes the $Log is the comment string.
    # Note: we do NOT add a space.  We use whatever is there.
    $commentLine =~ /([^\$]*)\$Log/;
    my $commentString = $1;

    #print "comment string is Q$commentString" . "Q\n";

    # choose a temporary file name for the edited version, in case of failure
    $filenameEDIT = "$filename.EDITED";

    # write back a version with the message inserted after the $Log line
    if (! open EDITFILE, "> $filenameEDIT") {
	die "Message not added: cannot open $filenameEDIT to write, stopped";
    }
    $commentAdded = 0;
    foreach $line (@file_contents) {
	# always print this line
	print EDITFILE $line;

	# if it is the $Log line, ...
	if (! $commentAdded && $line =~ /\$Log(:[^\$]*|)\$/) {
	    # SKIMP add site or hostname, too?
	    # add date and person
	    my $now = localtime;
	    print EDITFILE ($commentString) . "$now  $fullname\n";

	    #        add message
	    # prefix every line with the comment string
	    my $filemessage = $message;
	    $filemessage =~ s/\n/\n$commentString/g;
	    # remove the first (Modify filename) line
	    $filemessage =~ s/^[^\n]*\n//;
	    print EDITFILE "$filemessage\n";

	    $commentAdded = 1;
	}
    }
    close EDITFILE || print "Cannot close EDITFILE after writing!?!\n";

    # replace original file with edited file
    $filenameBACKUP = "$filename.BACKUP";
    rename $filename, $filenameBACKUP || die "Cannot create backup file $filenameBACKUP, stopped";
    rename $filenameEDIT, $filename || die "Cannot move edited file ($filenameEDIT) to original, stopped";

    # have user review additions
    print `diff -c2 $filename $filenameBACKUP`;

    # get user approval
    while (1) {
	print "Commit? [ylnhq](n): ";
	$ans = <STDIN>;
	if ($ans =~ /^[ylnq]/i || $ans =~ /^$/) {
	    last;
	} else {
	    # unrecognized response
	    print "Yes: commit; Leave additions but don't commit; Help: show this message\n";
	    print "No: revert to original; Quit: revert to original then exit\n";
	}
    }

    if ($ans =~ /^[n]/i || $ans =~ /^$/ || $ans =~ /^[q]/i) {
	print "original file not changed\n";
	rename $filenameBACKUP, $filename; # can't do anything if we fail
	# if we looped through many files, "no" would execute next, not exit.
	exit;
    }

    if ($ans =~ /^[l]/i) {
	print "leaving additions as is.  Remember to commit $filename\n";
	exit;
    }

    # this is an assertion
    die "Answer was not Yes, stopped" if $ans !~ /^[y]/i;
} else {
    print "No \$Log$ line found\n";
}


#------------------------------------------------------------------------------
#
# Step 3: git add if necessary. git commit file with that message.
#
#------------------------------------------------------------------------------

if ($gitaddFile) {
    print "\nAdding file: git add $filename\n";
    system "git add $filename\n";
    # SKIMP check for git failure
}

chomp $message; # remove trailing newline
print "commiting: git commit -m '$message' $filename\n";
system "git commit -m '$message' $filename\n";
# SKIMP check for git failure

# don't remove backup file, leave it just in case ...
#    ... although we should be able to get it from git ...
#if (defined $filenameBACKUP) {
#    unlink $filenameBACKUP; # I can't think of anything to do if this fails
#}

# end of $Source$
