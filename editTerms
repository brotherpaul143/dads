#!/usr/bin/perl -w
# $Id: editTerms,v 1.5 2003/10/29 15:03:47 black Exp $
# *created  "Wed Oct 15 10:37:48 2003" *by "Paul E. Black"
# *modified "Wed Oct 29 10:01:40 2003" *by "Paul E. Black"

#-----------------------------------------------------------------------------
# Check out, change, and check in terms
#	Paul E. Black <paul.black@nist.gov> or <p.black@acm.org>
#	http://hissa.nist.gov/~black/
#
# Use:
#    ./editTerms `find Terms -name "*.trm" -exec grep -l vertices {} \;`
# This will check out and edit the file.  Then it does an rcsdiff, so 
# you can review the changes, and asks if you want to commit the changes.
# Your options are
#    y - Yes; check in the changes, with the "reason" hard-coded below
#    n - No; unlock the file and revert to the previous version
#    q - Quit; unlock the file and revert, then quit the program
# The default is 'n'.
#
# This software was developed at the National Institute of Standards 
# and Technology by employees of the Federal Government in the course 
# of their official duties.  Pursuant to title 17 Section 105 of the 
# United States Code this software is not subject to copyright 
# protection and is in the public domain. 
# 
# We would appreciate acknowledgment if the software is used.
#
# Paul E. Black  paul.black@nist.gov
#
#-----------------------------------------------------------------------------

$reason = "Standard clean-up edits";
$editor = "Paul E. Black"; # for *modified line
# make sure the program is not accidentally rerun without being updated
if (localtime() !~ /Wed Oct 29/) {
    print "The (hard coded) check-in reason is:\n";
    print "\t$reason\n";
    print "REMEMBER TO CHANGE THE CHECK-IN REASON!\n";
    print "\tIt is " . localtime() . "\n";
    die;
}

# convert log history from rlog into $Log (co) format
sub formatLogHistory {
    my $file = shift(@_);
    my $logHistory = "";
    if (! open RLOGO, "rlog $file |") {
	print "rlog error for $file\n";
	return "";
    }

    my $inLogMessage = 0;
    while (<RLOGO>) {
	if (/^-----/ || /^=====/) {
	    $logHistory .= "#\n" if $inLogMessage;
	    $inLogMessage=0;
	}
	$logHistory .= "# $_" if $inLogMessage;

	# handle revision and date lines
	if (/^revision ([0-9.]+)/) {
	    $rev=$1;
	    last if $rev == "1.1"; # Rev 1.1 is just "Initial revision"
	}

	if (/^date: ([^;]+);  author: ([^;]+)/) {
	    $logHistory .= "# Revision $rev  $1  $2\n";
	    $inLogMessage=1;
	}
    }

    close RLOGO;

    return $logHistory
}

foreach $term_file_name (@ARGV) {
    #print "==} $term_file_name\n";

    # make sure the writable file is the same as the latest RCS version
    system "rcsdiff $term_file_name > /dev/null 2>&1";
    if ($?) {
	print "$term_file_name differs from RCS version; skipping!\n";
	next;
    }

    # (try to) check it out: lock & get writable file
    system "echo n | co -l $term_file_name > /dev/null 2>&1";
    if ($?) {
	print "Could not check out $term_file_name; skipping!\n";
	next;
    }

    # edit the term file in place
    if (open TERM, "< $term_file_name") {
	# read whole file
	@term_contents = <TERM>;

	close TERM || print "Cannot close TERM!?!\n";

	#print `ls -l $term_file_name`;

	# write back an edited version
	$runtime = localtime();
	if (open TERM, "> $term_file_name") {
	    my $justAfterModified = 0;
	    my $blankLineFound = 0;
	    foreach $line (@term_contents) {
		# change *modified
		$line =~ s/[*]modified "[^"]*" [*]by "[^"]*"/*modified "$runtime" *by "$editor"/;

		# add RCS Log line (and history) if missing
		if ($justAfterModified) {
		    if ($line =~ /^# \$Log/) {
			# this term already has an RCS Log keyword
			$justAfterModified = 0;
		    } elsif ($line =~ /^$/) {
			# blank line, be patient
			$blankLineFound = 1;
		    } else {
			# no RCS Log line found, but other stuff found
			print TERM "\n" if (! $blankLineFound);
			print TERM "# \$Log\$\n";

			# add Log history
			print TERM &formatLogHistory($term_file_name);

			print TERM "\n";

			$justAfterModified = 0;
		    }
		}
		if ($line =~ /[*]modified "[^"]*" [*]by/) {
		    $justAfterModified = 1;
		    $blankLineFound = 0;
		}

		# other clean-up edits
		$line =~ s/^# end$/# end \$Source\$/;
		$line =~ s/HREF=/href=/g;

		#----------------------------------------------------
		#
		#	HERE ARE THE EDITS WE WANT TO DO
		#
		# Remember to change the check-in reason
		#
		#----------------------------------------------------

		$line =~ s/{vertices#vertex}/{vertexes}/g;
		$line =~ s/vertices/vertexes/g;

		print TERM $line;
	    }

	    close TERM || print "Cannot close TERM after writing!?!\n";
	} else {
	    print "Cannot open $term_file_name to write!?!\n";
	}
    } else {
	print "Cannot open $term_file_name!?!\n";
    }

    # review any changes
    system "rcsdiff $term_file_name";

    while (1) {
	print "Commit (check in)? [ynhlq](n): ";
	$ans = <STDIN>;
	if ($ans =~ /[ynlq]?/i) {
	    last;
	} else {
	    print "Yes: check in; Leave edits but don't check in; Help: show this message\n";
	    print "No: unlock and revert; Quit: unlock and revert then exit\n";
	}
    } 
    if ($ans =~ /[y]/i) {
	system "echo $reason | ci -u $term_file_name";
    } elsif ($ans =~ /[l]/i) {
	print "leaving edits as is and locked.  Remember to check in $term_file_name\n";
    } else {
	# (try to) UNLOCK it
	system "echo n | rcs -u $term_file_name";

	# revert
	system "co -f $term_file_name";
    }

    if ($ans =~ /[q]/i) {
	exit;
    }
}

# end of $Source: /home/black/DADS/dads/RCS/editTerms,v $
