#!/usr/bin/perl -w
# $Id: mkterms,v 1.70 2004/07/29 14:30:20 black Exp $
# *created  "Tue Sep  8 11:36:37 1998" *by "Paul E. Black"
# *modified "Wed Jul  7 11:59:17 2004" *by "Paul E. Black"
#
# Collect all terms and format them for web pages.
#	Paul E. Black <paul.black@nist.gov> or <p.black@acm.org>
#	http://hissa.nist.gov/~black/
#
#------------------------------------------------------------------------

$useMsg="usage: mkterms [--page path] [--url root] [--all] [--help]";
$minOperands = 0;
$maxOperands = 0;

#------------------------------------------------------------------------
#
# This software was developed at the National Institute of Standards 
# and Technology by employees of the Federal Government in the course 
# of their official duties.  Pursuant to title 17 Section 105 of the 
# United States Code this software is not subject to copyright 
# protection and is in the public domain. 
# 
# We would appreciate acknowledgement if the software is used.
#
# Paul E. Black paul.black@nist.gov
#
#------------------------------------------------------------------------

$justTesting = "";

# true prints information as this runs
$verbose = 1;

# true generates all HTML pages
$writeAllPages = "";

# CONFIGURATION SECTION:
require 'mkcommon.pl';

# - Name of the two-level index web page, less extension (.html),
#	it is written to $WEB_DIR/$TWOLEVEL.html
$TWOLEVEL ="terms2";
# - Name of the unified index web page, less extension (.html),
#	it is written to $WEB_DIR/$UNIFIED.html
$UNIFIED ="ui";

# the first and ending parts of each entry page
$ENTINTRO="$PAGES/entry.intro";
$ENTCONCL="$PAGES/entry.concl";

#------------------------------------------------------------------------
#
# you should not have to edit anything below this
#
#------------------------------------------------------------------------

#------------------------------------------------------------------------------
#       Command line handling
#------------------------------------------------------------------------------

while ($#ARGV >= 0) {
    if ($ARGV[0] =~ /^--?h(e(lp?)?)?/) {
        print "$useMsg\n";
        print "    where\n";
	print "\t--page    File system path to web page directory (default: $WEB_DIR)\n";
	print "\t--url     URL to web page directory (default: $URL_DIR)\n";
        print "\t--all     Write HTML pages for all terms\n";
        print "\t--help    Print this message and exit\n";
        print "\t--        End of options\n";
        print "    This creates HTML pages and cross references for terms\n";
        exit 0;
    } elsif ($ARGV[0] =~ /^--?a(ll?)?$/) {
	$writeAllPages = 1;
	shift;
    } elsif ($ARGV[0] =~ /^--?p(a(ge?)?)?$/) {
	shift;
	$WEB_DIR = shift;
    } elsif ($ARGV[0] =~ /^--?u(rl?)?$/) {
	shift;
	$URL_DIR = shift;
    } elsif ($ARGV[0] eq "--") {
        shift;
    } elsif ($ARGV[0] =~ /^-/) {
        print "unknown option: $ARGV[0]\n";
        print "$useMsg\n";
        exit 1;
    } else {
        # end of options
        last;
    }
}

$numberOfOperands = 1 + $#ARGV; # - $optind
if ($numberOfOperands < $minOperands || $maxOperands < $numberOfOperands) {
    print "Wrong number of operands\n";
    print "$useMsg\n";
    die;
}

# so -w doesn't complain about these being used only once
$dummy = $numEntriesInIndex;	# set in mkcommon.pl
$dummy = $OUT_DIR;		# set in mkcommon.pl
$dummy = $AUTHPAGE;		# set in mkcommon.pl
$dummy = $OTHER;		# set in mkcommon.pl
$dummy = $TERMS_DIR;		# set and used in mkcommon.pl
undef $dummy;

# get the year (CCYY), month (01-12), day (01-31), etc.  This is Y2K compliant.
#($sec,$min,$hr,$mday,$mon,$yr,$wday,undef,undef) = localtime;
# SKIMP - timezone (like MDT or EST) not printed
#printf("%3s %3s %2d %02d:%02d:%02d %4d\n",
#        (Sun,Mon,Tue,Wed,Thu,Fri,Sat)[$wday],
#        (Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec)[$mon],
#        $mday, $hr, $min, $sec, 1900+$yr);
$now = localtime;

# read/write by owner, readable by everyone else
umask(0022);

# Step I: read initialization and config files
&readConfigFiles;

# Step II: read term entries
&readTermEntries;

#------------------------------------------------------------------------
#
# Step III: start pages for main, two-level, and unified indices.  
#	Write each entry to its own page and to appropriate indices.
#
#------------------------------------------------------------------------

sub rewriteXrefs {
    # rewrite cross references ({...}) as href's (to entries, not files)
    #print "STEP 1: $_[0] \n"; # for debugging
    $_[0] =~ s|%|%P|go; # preserve our escape character
    $_[0] =~ s|\\{|%R|go; # escape {'s in HTML markup
    #print "STEP 3: $_[0] \n"; # for debugging
    # rewrite complex references ( {text#xref} ) first
    $_[0] =~ s|{([^}]+)\#([^}]+)}|<A href="\#$2"><em>$1</em></A>|go;
    # now rewrite simple references ( {textref} )
    $_[0] =~ s|{(.+?)}|<A href="\#$1"><em>$1</em></A>|go;
    # change escaped characters back
    $_[0] =~ s|%R|{|go; # unescape {'s for final display
    $_[0] =~ s|%P|%|go;
    #print "STEP 7: $_[0] \n"; # for debugging

    # change entry names to their corresponding files and
    #   report any dangling xrefs
    foreach $xref (split /^.*?href="\#|".*?href="\#|".*?$|^.*$/, $_[0]) {
	next if ($xref eq ""); # above RE starts with a null split
	#print "\nFound $xref\n"; # for debugging
	my $strippedXref = $xref;
	$strippedXref =~ s/\$([^\$]*)\$/$1/go; # strip LaTeX markers
	my $indexXref = $strippedXref;
	if (! defined $entriesForXref{$indexXref}) {
	    # try the singular, i.e., removing a trailing "s"
	    $indexXref =~ s/s$//;
	    if (! defined $entriesForXref{$indexXref}) {
		# try lower case on first character
		$indexXref = $strippedXref; # start again
		substr($indexXref, 0, 1) =~ tr/A-Z/a-z/;
		if (! defined $entriesForXref{$indexXref}) {
		    # try removing a trailing "es"
		    $indexXref = $strippedXref; # start again
		    $indexXref =~ s/es$//;
		    if (! defined $entriesForXref{$indexXref}) {
			print "\n    *****Unknown HyperREFerence to \"$xref\" in $_[1]\n";
			next;
		    }
		}
	    }
	}

	my $xrefKey = $entriesForXref{$indexXref};
	#print "\nit is $xrefKey\n";
	%xrefEntry = %{$entries{$xrefKey}};
	my($xrefFile) = "$xrefEntry{FILENM}.html";

	# quote special RE characters
	my $xrefQ = quoteREpatterns("\#$xref");

	#print "subs is /$xrefQ/$xrefFile/\n"; # for debugging
	$_[0] =~ s/$xrefQ/$xrefFile/;
    }
}

# Create the URL of an entry page, relative to the index
sub pageURLrel {
    return "$OUT_DIR/@_.html";
}

###################################################################
# Step IIIa: start a temporary file for the main index
###################################################################
$temppage="$WEB_DIR/\#$WEBPAGE.html";

unlink($temppage) if (-e $temppage);
open(TMPPAGE, "> $temppage")
    || die ("Cannot create temporary web page $temppage, stopped");

&concatenate("$PAGES/$WEBPAGE.intro", TMPPAGE);

# write processing date and time
#print TMPPAGE "<P>\nRun on $now\n";

print TMPPAGE "\n<h3>";
foreach $letter ("A".."Z") {
    print TMPPAGE "<A href=\"\#$letter\">$letter</A>\n";
}
print TMPPAGE "</h3>\n";

# start a two-column table
print TMPPAGE << "TABLE_BEGINNING";
<TABLE border=0 width="100%">
<!-- the table has 2 columns, each 50% of the width -->
<COLGROUP span="2" width="50%"></COLGROUP>
<TR>
<TD valign=top>
TABLE_BEGINNING

# start with special characters
$letter = " ";
print TMPPAGE "<dl>\n";


###################################################################
# Step IIIb: start a temporary file for the two-level index
###################################################################
$twolevpage="$TWOLEVEL.html";
$twolevtemp="$WEB_DIR/\#$TWOLEVEL.html";

unlink($twolevtemp) if (-e $twolevtemp);
open(TMP2LEV, "> $twolevtemp")
    || die ("Cannot create temporary web page $twolevtemp, stopped");

&concatenate("$PAGES/$TWOLEVEL.intro", TMP2LEV);

# start the two-level index
print TMP2LEV << "TWO_LEVEL_BEGINNING";
<UL>
TWO_LEVEL_BEGINNING
$optimNumbPages = int(.5 + 1.31656 * sqrt $numEntriesInIndex);
$optimEntriesPerPage = $numEntriesInIndex / $optimNumbPages;
$entriesInPage = 0; # how many entries written in this page?
$indexPageName = "t00";


###################################################################
# Step IIIc: start a temporary file for the unified index
###################################################################
$unifiedpage="$UNIFIED.html";
$unifiedtemp="$WEB_DIR/\#$UNIFIED.html";

unlink($unifiedtemp) if (-e $unifiedtemp);
open(TMPUNIFI, "> $unifiedtemp")
    || die ("Cannot create temporary web page $unifiedtemp, stopped");

&concatenate("$PAGES/$UNIFIED.intro", TMPUNIFI);

# write processing date and time
print TMPUNIFI "<P>\nRun on $now\n";

# start the unified index
print TMPUNIFI << "UNIFIED_BEGINNING";
<UL>
UNIFIED_BEGINNING


# find the age of the younger of the entry intro and entry conclusion 
# files, so we can check whether we need to rewrite the HTML page.
$ENTNEWESTMOD = -M $ENTCONCL;
if (-M $ENTINTRO < $ENTNEWESTMOD) {
    $ENTNEWESTMOD = -M $ENTINTRO;
}

$prevdname = ""; # check for repeated entries

# sort the entries
@sortedentries = sort keys %entries;
#print @sortedentries;
$numEntries = 0;

#------------------------------------------------------------------------
#
# Step IIId: write each entry to its own page.  Write entry in main 
#	index, two-level index, and unified index as appropriate.
#
#------------------------------------------------------------------------

print STDERR "Writing terms\n" if ($verbose);

for $ekey (@sortedentries) {
    %thisEntry = %{$entries{$ekey}};
    #print %thisEntry; print "\n";

    #for $fld (keys %thisEntry) {
    #	print "\$thisEntry\{$fld} = $thisEntry{$fld}\n";
    #}

    my($ename) = $thisEntry{NAME};
    my($tname) = $thisEntry{TNAME};
    my $dname = $thisEntry{DNAME};
    my $xname = $thisEntry{XNAME};
    if (defined $thisEntry{MODIFIED}) {
	$moddate = $thisEntry{MODIFIED};
    } else {
	$moddate = "sometime";
    }

    # check for repeated entry names.  This happens when I change the
    # file name for an entry, but forget to remove the old file, or add
    # an AKA, etc.
    if ($dname eq $prevdname) {
	print "\n    *****Repeated entry: $dname ($thisEntry{SRCFILE} and $prevfile)\n";
    }
    $prevdname = $dname;
    $prevfile = $thisEntry{SRCFILE};

    # the (relative) URL for the page
    $termpage=pageURLrel($thisEntry{FILENM});
    $termurl ="$URL_DIR/$termpage";
    $termfile="$WEB_DIR/$termpage";

    if ($thisEntry{ENTCLASS} ne "WEB") {
	$numEntries++;

	# For AKA, the entrypg is the original source (why visit a page 
	# that just says "See SRCFILE"??)  For other terms, entrypg is
	# the same as termpage.
	# the href for the page in the index
	my $entrypg = pageURLrel($thisEntry{SRCFILE});
	my $indexEntry = "<A href=\"$entrypg\">$dname</A>";
	# if ($thisEntry{SRCFILE} ne $thisEntry{FILENM}) {
	#    # just refer to main def'n
	#    $indexEntry = "$dname see <A href=\"$entrypg\">$thisEntry{SRCDNAME}</A>";
	# }

	###########################################################
	# Write an entry in the main index page
	###########################################################

	while (substr($ekey, 0, 1) gt $letter) {
	    # finish previous letter
	    print TMPPAGE "</dl>\n\n";

	    # start new letter
	    if ($letter eq " ") {
		$letter = "A";
	    } else {
		$letter++;
	    }
	    if ($letter eq "M") {
		# start new column
		print TMPPAGE << "TABLE_NEXT_COLUMN";
</td>

<td valign=top>
TABLE_NEXT_COLUMN
	    }
	    print TMPPAGE "<A name=\"$letter\"><h2>$letter</h2>\n\n<dl>\n";
	}

	# write an entry in the main page
	print TMPPAGE "<dt>$indexEntry\n";

	###########################################################
	# Write an entry in the two-level index
	###########################################################

	if ($entriesInPage == 0) {
	    # start a new index page
	    $indexPageName++;

	    $indexPage = "$WEB_DIR/$indexPageName.html";

	    unlink($indexPage) if (-e $indexPage);
	    open(SUB2LEV, "> $indexPage")
		|| die ("Cannot create index web page $indexPage, stopped");
	    &concatenate("$PAGES/${TWOLEVEL}page.intro", SUB2LEV);

	    print TMP2LEV "<li><A href=\"$indexPageName.html\">$dname - ";
	}

	# write an entry in the second level page
	print SUB2LEV "<dt>$indexEntry\n";
	$entriesInPage++;
	if ($entriesInPage > $optimEntriesPerPage) {
	    # finish the current index page
	    &concatenate("$PAGES/${TWOLEVEL}page.concl", SUB2LEV);
	    close SUB2LEV;

	    print TMP2LEV "$dname</A>\n";

	    $entriesInPage = 0;
	}
    }

    ###########################################################
    # Write an entry in the unified index
    ###########################################################

    print TMPUNIFI "<li><A href=\"$termpage\">$dname</A>\n";


    ###########################################################
    # Write the entry HTML page (if necessary)
    ###########################################################

    $entryPages++;

    # should we write the HTML page?
    if ($writeAllPages || (! -e $termfile) || -z $termfile
	|| (-M $termfile > -M "$TERMS_DIR/$thisEntry{SRCFILE}.trm")
	|| (-M $termfile > $ENTNEWESTMOD)) {
	# write the page
	print STDERR "$tname, " if ($verbose);
    } else {
	# don't need to write the page
	print STDERR ", " if ($verbose); # just a "working" mark
	next;
    }

    # get type if there is one
    $elongtype = "";
    if (defined $thisEntry{TYPE}) {
	my($etype) = $thisEntry{TYPE};
	$elongtype = $types{$etype};
	$elongtype =~ tr/A-Z/a-z/; # make lower case
	$elongtype =~ s/s$//o; # make singluar (not plural)
    }

    # get area if there is one
    $termarea = "";
    if (defined $thisEntry{AREA}) {
	my($area) = $thisEntry{AREA};
	$termarea = $areas{$area};
    }

    unlink($termfile) if (-e $termfile);
    open(TERMPAGE, "> $termfile")
	|| die ("Cannot create term web page $termfile, stopped");

    # copy term page intro, replacing variables as appropriate
    open(FHANDLE, "< $ENTINTRO")
	|| die("Cannot open $ENTINTRO\n");
    $runtime = localtime;
    while (<FHANDLE>) {
	s/\$NAME/$ename/g;
	s/\$DNAME/$dname/g;
	s/\$TNAME/$tname/g;
	s/\$AREA/$termarea/g;
	s/\$TYPE/$elongtype/g;
	s/\$RUNDATE/$runtime/g;
	s/\$MODDATE/$moddate/g;
	s/\$URL/$termurl/g;
	print TERMPAGE $_;
    };
    close(FHANDLE);

    if (defined $thisEntry{TYPE}) {
	print TERMPAGE "<P>\n($elongtype)\n</P>\n\n";
    }

    print TERMPAGE "<P>\n<strong>Definition:</strong>\n";
    if (defined $thisEntry{DEFN}) {
	my($edefn) = $thisEntry{DEFN};
	# convert cross references ({...}) to href's
	&rewriteXrefs($edefn, $ename);
	# convert LaTeX expressions to HTML
	&rewriteLatex($edefn);
	print TERMPAGE "$edefn\n";
    } else {
	print TERMPAGE << "NO_DEFN_MESSAGE";
(no definition here, yet, but
<A href=\"../$MAINPAGE\#needHelp\">you can help</A>.)
NO_DEFN_MESSAGE
    }
    print TERMPAGE "</P>\n\n";

    if (defined $thisEntry{FORML}) {
	my($eformlDef) = $thisEntry{FORML};
	# convert cross references ({...}) to href's
	&rewriteXrefs($eformlDef, $ename);
	# convert LaTeX expressions to HTML
	&rewriteLatex($eformlDef);
	print TERMPAGE "<P>\n<strong>Formal Definition:</strong> $eformlDef\n</P>\n";
    }

    if (defined $thisEntry{AKA}) {
	my($ealiases) = $thisEntry{AKA};
	# have exactly one space after a comma
	$ealiases =~ s|,\s*|, |go;
	# change cross references ({...}) to href's
	&rewriteXrefs($ealiases, $ename);
	# convert LaTeX expressions to HTML
	&rewriteLatex($ealiases);
	print TERMPAGE "<P>\n<strong>Also known as</strong> $ealiases.\n</P>\n\n";
    }

    if (defined $thisEntry{IMA}) {
	my($eGeneralization) = $thisEntry{IMA};
	# change cross references ({...}) to href's
	&rewriteXrefs($eGeneralization, $ename);
	# convert LaTeX expressions to HTML
	&rewriteLatex($eGeneralization);
	# have exactly one space after a comma
	$eGeneralization =~ s|,\s*|, |go;
	print TERMPAGE "<P>\n<strong>Generalization</strong> (I am a kind of ...)<br>\n$eGeneralization.\n</P>\n";
    }
    if (defined $thisEntry{VARIANT}) {
	my($eSpecialization) = $thisEntry{VARIANT};
	# change cross references ({...}) to href's
	&rewriteXrefs($eSpecialization, $ename);
	# convert LaTeX expressions to HTML
	&rewriteLatex($eSpecialization);
	# have exactly one space after a comma
	$eSpecialization =~ s|,\s*|, |go;
	print TERMPAGE "<P>\n<strong>Specialization</strong> (... is a kind of me.)<br>\n$eSpecialization.\n</P>\n";
    }
    if (defined $thisEntry{IMIN}) {
	my($eAggParent) = $thisEntry{IMIN};
	# change cross references ({...}) to href's
	&rewriteXrefs($eAggParent, $ename);
	# convert LaTeX expressions to HTML
	&rewriteLatex($eAggParent);
	# have exactly one space after a comma
	$eAggParent =~ s|,\s*|, |go;
	print TERMPAGE "<P>\n<strong>Aggregate parent</strong> (I am a part of or used in ...)<br>\n$eAggParent.\n</P>\n";
    }
    if (defined $thisEntry{INME}) {
	my($eAggChild) = $thisEntry{INME};
	# change cross references ({...}) to href's
	&rewriteXrefs($eAggChild, $ename);
	# convert LaTeX expressions to HTML
	&rewriteLatex($eAggChild);
	# have exactly one space after a comma
	$eAggChild =~ s|,\s*|, |go;
	print TERMPAGE "<P>\n<strong>Aggregate child</strong> (... is a part of or used in me.)<br>\n$eAggChild.\n</P>\n";
    }
    if (defined $thisEntry{XREFS}) {
	my($exrefs) = $thisEntry{XREFS};
	# change cross references ({...}) to href's
	&rewriteXrefs($exrefs, $ename);
	# convert LaTeX expressions to HTML
	&rewriteLatex($exrefs);
	# have exactly one space after a comma
	$exrefs =~ s|,\s*|, |go;
	print TERMPAGE "<P>\n<strong>See also</strong>\n$exrefs.\n</P>\n";
    }
    print TERMPAGE "\n";

    if (defined $thisEntry{NOTES}) {
	my($enotes) = $thisEntry{NOTES};
	# rewrite HREFs with exit_nist script
	&rewriteHrefs($enotes);
	# convert cross references ({...}) to href's
	&rewriteXrefs($enotes, $ename);
	# convert LaTeX expressions to HTML
	&rewriteLatex($enotes);
	print TERMPAGE "<P>\n<em>Note:\n$enotes</em>\n</P>\n\n";
    }
    if (defined $thisEntry{AUTHOR}) {
	my($eauth) = $thisEntry{AUTHOR};
	$eauth =~ s| *([^,]+)|<A href="../$OTHER/$AUTHPAGE.html\#author$1">$1</A>|go;
	# use plural if more than one
	$plural = "";
	if ($eauth =~ /,/o) {
	    $plural = "s";
	}
	print TERMPAGE "<P>Author$plural: $eauth</P>\n";
    }
    if (defined $thisEntry{IMPL}) {
	my($eimpls) = $thisEntry{IMPL};
	# rewrite HREFs with exit_nist script
	&rewriteHrefs($eimpls);
	# SKIMP write plural if more than one
	print TERMPAGE "<H2>Implementation</H2>\n$eimpls\n";
    }
    if (defined $thisEntry{LINKS} || defined $thisEntry{BIB}
		|| defined $thisEntry{HISTORY}) {
	print TERMPAGE "<H2>More information</H2>\n";
    }
    if (defined $thisEntry{LINKS}) {
	my($elinks) = $thisEntry{LINKS};
	# rewrite HREFs with exit_nist script
	&rewriteHrefs($elinks);
	print TERMPAGE "<P>\n$elinks\n</P>\n";
    }
    if (defined $thisEntry{BIB}) {
	my($ebiblio) = $thisEntry{BIB};
	# rewrite HREFs with exit_nist script
	&rewriteHrefs($ebiblio);
	print TERMPAGE "<P>\n$ebiblio\n</P>\n";
    }
    if (defined $thisEntry{HISTORY}) {
	my($eHistoricalNote) = $thisEntry{HISTORY};
	# rewrite HREFs with exit_nist script
	&rewriteHrefs($eHistoricalNote);
	print TERMPAGE "<P>\n<strong>Historical Note</strong><br>\n$eHistoricalNote\n</P>\n";
    }
    print TERMPAGE "\n";

    # copy term page conclusion, replacing variables as appropriate
    open(FHANDLE, "< $ENTCONCL")
	|| die("Cannot open $ENTCONCL\n");
    while (<FHANDLE>) {
	s/\$NAME/$ename/g;
	s/\$DNAME/$dname/g;
	s/\$TNAME/$tname/g;
	s/\$RUNDATE/$runtime/g;
	s/\$MODDATE/$moddate/g;
	s/\$URL/$termurl/g;
	print TERMPAGE $_;
    };
    close(FHANDLE);

    close(TERMPAGE);
}

print STDERR "\n" if ($verbose);

print "Wrote $numEntries terms in main index and $entryPages term pages\n";

#------------------------------------------------------------------------
#
# Step IV: Finish main index and two-level index, backup old page, and
#	rename temporary page
#    a) Finish the main index and copy closing
#    b) Copy closing of two-level index
#
#------------------------------------------------------------------------

########################################
# IVa: Finish main index
########################################

# print any remaining letters, for completeness
while ("Z" gt $letter) {
    # finish previous letter
    print TMPPAGE "</dl>\n\n";

    # start new letter
    $letter++;
    print TMPPAGE "<h2><A name=\"$letter\">$letter</A></h2>\n\n<dl>\n";
}

# finish last letter
print TMPPAGE "</dl>\n\n"; # end of list and section

# finish two column table
print TMPPAGE << "TABLE_ENDING";
</td>
</tr>
</table>
TABLE_ENDING

print STDERR "\n" if ($verbose);

# copy the closing
&concatenate("$PAGES/$WEBPAGE.concl", TMPPAGE);

close TMPPAGE;

# backup old page and rename the temporary file

&backupMove($temppage, "$WEB_DIR/$MAINPAGE") if ! $justTesting;

########################################
# IVb: Finish two-level index
########################################

# if the index page isn't finished, do it now
if ($entriesInPage > 0) {
    # finish the current index page
    &concatenate("$PAGES/${TWOLEVEL}page.concl", SUB2LEV);
    close SUB2LEV;

    print TMP2LEV "$prevdname</A>\n";
}

print TMP2LEV "</UL>\n\n";

&concatenate("$PAGES/$TWOLEVEL.concl", TMP2LEV);

close TMP2LEV;

&backupMove($twolevtemp, "$WEB_DIR/$twolevpage") if ! $justTesting;

########################################
# IVc: Finish unified index
########################################

print TMPUNIFI "</UL>\n\n";

&concatenate("$PAGES/$UNIFIED.concl", TMPUNIFI);

close TMPUNIFI;

&backupMove($unifiedtemp, "$WEB_DIR/$unifiedpage") if ! $justTesting;

#------------------------------------------------------------------------
#
# Step V: write entries with implementations
#
#------------------------------------------------------------------------

# Step Va: select name and open the page

$pageroot="$WEBPAGE" . "Impl";
$fspagename="$WEB_DIR/$pageroot.html";
$temppage="$WEB_DIR/\#$pageroot.html";

unlink($temppage) if (-e $temppage);
open(TMPPAGE, "> $temppage")
    || die ("Cannot create temporary web page $temppage, stopped");

# Step Vb: copy the intro
&concatenate("$PAGES/$pageroot.intro", TMPPAGE);

# write processing date and time
print TMPPAGE "<P>\nRun on $now\n";

# Step Vc: write entries with implementations

print STDERR "Writing entries with implementation links\n" if ($verbose);

print TMPPAGE "<hr>\n";

print TMPPAGE "<ul>\n";

# go through all the entries and print those with implementations
for $ent (@sortedentries) {
    %thisEntry = %{$entries{$ent}};

    next if ! defined $thisEntry{IMPL} || $thisEntry{ENTCLASS} eq "WEB";
    my $dname = $thisEntry{DNAME};
    my $eimpls = $thisEntry{IMPL};
    my $erelurl = pageURLrel($thisEntry{SRCFILE});
    print TMPPAGE "<li><A href=\"$erelurl\">$dname</A>: $eimpls\n";
}
print TMPPAGE "</ul>\n\n";

# Step Vd: copy the conclusion and close
&concatenate("$PAGES/$pageroot.concl", TMPPAGE);

close TMPPAGE;

# Step Ve: backup page and relink

&backupMove($temppage, $fspagename);

#------------------------------------------------------------------------
#
# Step VI: write area index page
#
#------------------------------------------------------------------------

print STDERR "Writing entries by area\n" if ($verbose);

# Step VIa: select name and open the page

$pageroot="$WEBPAGE" . "Area";
$fspagename="$WEB_DIR/$pageroot.html";
$temppage="$WEB_DIR/\#$pageroot.html";

unlink($temppage) if (-e $temppage);
open(TMPPAGE, "> $temppage")
    || die ("Cannot create temporary web page $temppage, stopped");

# Step VIb: copy the intro
&concatenate("$PAGES/$pageroot.intro", TMPPAGE);

# write processing date and time
print TMPPAGE "<P>\nRun on $now\n";

# Add links to each area for fast access
print TMPPAGE "\n<h3>Areas</h3>\n<ul>\n";
for $area (sort keys %areas) {
    print TMPPAGE "<li><A href=\"\#$area\">$areas{$area}</A>\n";
}
# add link to no area
print TMPPAGE "<li><A href=\"\#noarea\">Entries with No Area</A>\n";
print TMPPAGE "</ul>\n";

# Step VIc: write areas and entries

print TMPPAGE "<hr>\n";

sub printAreaEntry {
    my %thisEntry = %{$entries{$_[0]}};
    return if $thisEntry{ENTCLASS} eq "WEB";
    my $dname = $thisEntry{DNAME};
    my $erelurl = pageURLrel($thisEntry{SRCFILE});
    print TMPPAGE "<li><A href=\"$erelurl\">$dname</A>";
    if (defined $thisEntry{TYPE}) {
	my $etype = $thisEntry{TYPE};
	print TMPPAGE " [<strong>$etype</strong>]";
    }
    print TMPPAGE "\n";
}

for $area (sort keys %areas) {
    print TMPPAGE "<h2><A name=\"$area\">$areas{$area}</A></h2>\n";
    print TMPPAGE "<ul>\n";

    # go through all the entries and print those in this area
    for $ent (@sortedentries) {
	next if ! defined $entries{$ent}{AREA} ||
			$entries{$ent}{AREA} ne $area;
	&printAreaEntry($ent);
    }
    print TMPPAGE "</ul>\n\n";
}

# print any entries without an area
print TMPPAGE "<h2><A name=\"noarea\">Entries with No Area</A></h2>\n";
print TMPPAGE "<ul>\n";
for $ent (@sortedentries) {
    if (! defined $entries{$ent}{AREA}) {
	&printAreaEntry($ent);
    }
}
print TMPPAGE "</ul>\n\n";

# Step VId: copy the conclusion and close
&concatenate("$PAGES/$pageroot.concl", TMPPAGE);

close TMPPAGE;

# Step VIe: backup page and relink

&backupMove($temppage, $fspagename);

#------------------------------------------------------------------------
#
# Step VII: write type index page
#
#------------------------------------------------------------------------

print STDERR "Writing entries by type\n" if ($verbose);

# Step VIIa: select name and open the page

$pageroot="$WEBPAGE" . "Type";
$fspagename="$WEB_DIR/$pageroot.html";
$temppage="$WEB_DIR/\#$pageroot.html";

unlink($temppage) if (-e $temppage);
open(TMPPAGE, "> $temppage")
    || die ("Cannot create temporary web page $temppage, stopped");

# Step VIIb: copy the intro
&concatenate("$PAGES/$pageroot.intro", TMPPAGE);

# write processing date and time
print TMPPAGE "<P>\nRun on $now\n";

# Add links to each section for fast access
print TMPPAGE "\n<h3>Types</h3>\n<ul>\n";
for $tent (keys %types) {
    print TMPPAGE "<li><A href=\"\#$tent\">$types{$tent}</A>\n";
}
# add link to unclassified entries
print TMPPAGE "<li><A href=\"\#notype\">Entries with No Type</A>\n";
print TMPPAGE "</ul>\n";

# Step VIIc: write types and entries

print TMPPAGE "<hr>\n";

sub printTypeEntry {
    my %thisEntry = %{$entries{$_[0]}};
    return if $thisEntry{ENTCLASS} eq "WEB";
    my $dname = $thisEntry{DNAME};
    my $erelurl = pageURLrel($thisEntry{SRCFILE});
    print TMPPAGE "<li><A href=\"$erelurl\">$dname</A>\n";
}

for $tent (keys %types) {
    print TMPPAGE "<h2><A name=\"$tent\">$types{$tent}</A></h2>\n";
    print TMPPAGE "<ul>\n";

    # go through all the entries and print those of this type
    for $ent (@sortedentries) {
	next if ! defined $entries{$ent}{TYPE} ||
	    $entries{$ent}{TYPE} ne $tent;
	&printTypeEntry($ent);
    }
    print TMPPAGE "</ul>\n\n";
}

# print those with no type
print TMPPAGE "<h2><A name=\"notype\">Entries with No Type</A></h2>\n";
print TMPPAGE "<ul>\n";
for $ent (@sortedentries) {
    if (! defined $entries{$ent}{TYPE}) {
	&printTypeEntry($ent);
    }
}
print TMPPAGE "</ul>\n\n";

# Step VIId: copy the conclusion and close
&concatenate("$PAGES/$pageroot.concl", TMPPAGE);

close TMPPAGE;

# Step VIIe: backup page and relink

&backupMove($temppage, $fspagename);

exit;

# end of $Source: /home/black/DADS/dads/RCS/mkterms,v $
